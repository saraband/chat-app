!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=96)}([function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";e.exports=n(95)},function(e,t,n){e.exports=n(85)()},function(e,t,n){(function(r){function o(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG),e}(t=e.exports=n(75)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),!n)return;var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var o=0,i=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&"%c"===e&&(i=++o)}),e.splice(i,0,r)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=o,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(o())}).call(this,n(76))},function(e,t,n){"use strict";n.r(t);var r=n(1),o=n(2),i=n.n(o),a=i.a.shape({trySubscribe:i.a.func.isRequired,tryUnsubscribe:i.a.func.isRequired,notifyNestedSubs:i.a.func.isRequired,isSubscribed:i.a.func.isRequired}),s=i.a.shape({subscribe:i.a.func.isRequired,dispatch:i.a.func.isRequired,getState:i.a.func.isRequired});function u(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"store",n=arguments[1]||t+"Subscription",o=function(e){function o(n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,r));return i[t]=n.store,i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(o,e),o.prototype.getChildContext=function(){var e;return(e={})[t]=this[t],e[n]=null,e},o.prototype.render=function(){return r.Children.only(this.props.children)},o}(r.Component);return o.propTypes={store:s.isRequired,children:i.a.element.isRequired},o.childContextTypes=((e={})[t]=s.isRequired,e[n]=a,e),o}var c=u(),l=n(36),f=n.n(l),p=n(12),d=n.n(p);var h=null,y={notify:function(){}};var m=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.store=t,this.parentSub=n,this.onStateChange=r,this.unsubscribe=null,this.listeners=y}return e.prototype.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},e.prototype.notifyNestedSubs=function(){this.listeners.notify()},e.prototype.isSubscribed=function(){return Boolean(this.unsubscribe)},e.prototype.trySubscribe=function(){var e,t;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.onStateChange):this.store.subscribe(this.onStateChange),this.listeners=(e=[],t=[],{clear:function(){t=h,e=h},notify:function(){for(var n=e=t,r=0;r<n.length;r++)n[r]()},get:function(){return t},subscribe:function(n){var r=!0;return t===e&&(t=e.slice()),t.push(n),function(){r&&e!==h&&(r=!1,t===e&&(t=e.slice()),t.splice(t.indexOf(n),1))}}}))},e.prototype.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=y)},e}(),g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var v=0,b={};function w(){}function E(e){var t,n,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=o.getDisplayName,u=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,c=o.methodName,l=void 0===c?"connectAdvanced":c,p=o.renderCountProp,h=void 0===p?void 0:p,y=o.shouldHandleStateChanges,E=void 0===y||y,_=o.storeKey,C=void 0===_?"store":_,S=o.withRef,k=void 0!==S&&S,x=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(o,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef"]),T=C+"Subscription",O=v++,P=((t={})[C]=s,t[T]=a,t),R=((n={})[T]=a,n);return function(t){d()("function"==typeof t,"You must pass a component to the function returned by "+l+". Instead received "+JSON.stringify(t));var n=t.displayName||t.name||"Component",o=u(n),i=g({},x,{getDisplayName:u,methodName:l,renderCountProp:h,shouldHandleStateChanges:E,storeKey:C,withRef:k,displayName:o,wrappedComponentName:n,WrappedComponent:t}),a=function(n){function a(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,n.call(this,e,t));return r.version=O,r.state={},r.renderCount=0,r.store=e[C]||t[C],r.propsMode=Boolean(e[C]),r.setWrappedInstance=r.setWrappedInstance.bind(r),d()(r.store,'Could not find "'+C+'" in either the context or props of "'+o+'". Either wrap the root component in a <Provider>, or explicitly pass "'+C+'" as a prop to "'+o+'".'),r.initSelector(),r.initSubscription(),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,n),a.prototype.getChildContext=function(){var e,t=this.propsMode?null:this.subscription;return(e={})[T]=t||this.context[T],e},a.prototype.componentDidMount=function(){E&&(this.subscription.trySubscribe(),this.selector.run(this.props),this.selector.shouldComponentUpdate&&this.forceUpdate())},a.prototype.componentWillReceiveProps=function(e){this.selector.run(e)},a.prototype.shouldComponentUpdate=function(){return this.selector.shouldComponentUpdate},a.prototype.componentWillUnmount=function(){this.subscription&&this.subscription.tryUnsubscribe(),this.subscription=null,this.notifyNestedSubs=w,this.store=null,this.selector.run=w,this.selector.shouldComponentUpdate=!1},a.prototype.getWrappedInstance=function(){return d()(k,"To access the wrapped instance, you need to specify { withRef: true } in the options argument of the "+l+"() call."),this.wrappedInstance},a.prototype.setWrappedInstance=function(e){this.wrappedInstance=e},a.prototype.initSelector=function(){var t=e(this.store.dispatch,i);this.selector=function(e,t){var n={run:function(r){try{var o=e(t.getState(),r);(o!==n.props||n.error)&&(n.shouldComponentUpdate=!0,n.props=o,n.error=null)}catch(e){n.shouldComponentUpdate=!0,n.error=e}}};return n}(t,this.store),this.selector.run(this.props)},a.prototype.initSubscription=function(){if(E){var e=(this.propsMode?this.props:this.context)[T];this.subscription=new m(this.store,e,this.onStateChange.bind(this)),this.notifyNestedSubs=this.subscription.notifyNestedSubs.bind(this.subscription)}},a.prototype.onStateChange=function(){this.selector.run(this.props),this.selector.shouldComponentUpdate?(this.componentDidUpdate=this.notifyNestedSubsOnComponentDidUpdate,this.setState(b)):this.notifyNestedSubs()},a.prototype.notifyNestedSubsOnComponentDidUpdate=function(){this.componentDidUpdate=void 0,this.notifyNestedSubs()},a.prototype.isSubscribed=function(){return Boolean(this.subscription)&&this.subscription.isSubscribed()},a.prototype.addExtraProps=function(e){if(!(k||h||this.propsMode&&this.subscription))return e;var t=g({},e);return k&&(t.ref=this.setWrappedInstance),h&&(t[h]=this.renderCount++),this.propsMode&&this.subscription&&(t[T]=this.subscription),t},a.prototype.render=function(){var e=this.selector;if(e.shouldComponentUpdate=!1,e.error)throw e.error;return Object(r.createElement)(t,this.addExtraProps(e.props))},a}(r.Component);return a.WrappedComponent=t,a.displayName=o,a.childContextTypes=R,a.contextTypes=P,a.propTypes=P,f()(a,t)}}var _=Object.prototype.hasOwnProperty;function C(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function S(e,t){if(C(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!_.call(t,n[o])||!C(e[n[o]],t[n[o]]))return!1;return!0}var k=n(18),x=n(97),T="object"==typeof self&&self&&self.Object===Object&&self,O=(x.a||T||Function("return this")()).Symbol,P=Object.prototype;P.hasOwnProperty,P.toString,O&&O.toStringTag;Object.prototype.toString;O&&O.toStringTag;Object.getPrototypeOf,Object;var R=Function.prototype,A=Object.prototype,N=R.toString;A.hasOwnProperty,N.call(Object);function U(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function I(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function M(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=I(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=I(o),o=r(t,n)),o},r}}var D=[function(e){return"function"==typeof e?M(e):void 0},function(e){return e?void 0:U(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?U(function(t){return Object(k.bindActionCreators)(e,t)}):void 0}];var L=[function(e){return"function"==typeof e?M(e):void 0},function(e){return e?void 0:U(function(){return{}})}],j=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function B(e,t,n){return j({},n,e,t)}var F=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r=n.pure,o=n.areMergedPropsEqual,i=!1,a=void 0;return function(t,n,s){var u=e(t,n,s);return i?r&&o(u,a)||(a=u):(i=!0,a=u),a}}}(e):void 0},function(e){return e?void 0:function(){return B}}];function z(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function q(e,t,n,r,o){var i=o.areStatesEqual,a=o.areOwnPropsEqual,s=o.areStatePropsEqual,u=!1,c=void 0,l=void 0,f=void 0,p=void 0,d=void 0;function h(o,u){var h,y,m=!a(u,l),g=!i(o,c);return c=o,l=u,m&&g?(f=e(c,l),t.dependsOnOwnProps&&(p=t(r,l)),d=n(f,p,l)):m?(e.dependsOnOwnProps&&(f=e(c,l)),t.dependsOnOwnProps&&(p=t(r,l)),d=n(f,p,l)):g?(h=e(c,l),y=!s(h,f),f=h,y&&(d=n(f,p,l)),d):d}return function(o,i){return u?h(o,i):(f=e(c=o,l=i),p=t(r,l),d=n(f,p,l),u=!0,d)}}function H(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),s=r(e,i),u=o(e,i);return(i.pure?q:z)(a,s,u,e,i)}var W=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function V(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function Y(e,t){return e===t}var Q=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.connectHOC,n=void 0===t?E:t,r=e.mapStateToPropsFactories,o=void 0===r?L:r,i=e.mapDispatchToPropsFactories,a=void 0===i?D:i,s=e.mergePropsFactories,u=void 0===s?F:s,c=e.selectorFactory,l=void 0===c?H:c;return function(e,t,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},s=i.pure,c=void 0===s||s,f=i.areStatesEqual,p=void 0===f?Y:f,d=i.areOwnPropsEqual,h=void 0===d?S:d,y=i.areStatePropsEqual,m=void 0===y?S:y,g=i.areMergedPropsEqual,v=void 0===g?S:g,b=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(i,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),w=V(e,o,"mapStateToProps"),E=V(t,a,"mapDispatchToProps"),_=V(r,u,"mergeProps");return n(l,W({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:w,initMapDispatchToProps:E,initMergeProps:_,pure:c,areStatesEqual:p,areOwnPropsEqual:h,areStatePropsEqual:m,areMergedPropsEqual:v},b))}}();n.d(t,"Provider",function(){return c}),n.d(t,"createProvider",function(){return u}),n.d(t,"connectAdvanced",function(){return E}),n.d(t,"connect",function(){return Q})},function(e,t,n){(function(e){var r,o=n(68),i=n(25),a=n(62),s=n(61),u=n(60);e&&e.ArrayBuffer&&(r=n(58));var c="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),l="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),f=c||l;t.protocol=3;var p=t.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},d=o(p),h={type:"error",data:"parser error"},y=n(57);function m(e,t,n){for(var r=new Array(e.length),o=s(e.length,n),i=function(e,n,o){t(n,function(t,n){r[e]=n,o(t,r)})},a=0;a<e.length;a++)i(a,e[a],o)}t.encodePacket=function(n,r,o,i){"function"==typeof r&&(i=r,r=!1),"function"==typeof o&&(i=o,o=null);var a=void 0===n.data?void 0:n.data.buffer||n.data;if(e.ArrayBuffer&&a instanceof ArrayBuffer)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);var o=e.data,i=new Uint8Array(o),a=new Uint8Array(1+o.byteLength);a[0]=p[e.type];for(var s=0;s<i.length;s++)a[s+1]=i[s];return r(a.buffer)}(n,r,i);if(y&&a instanceof e.Blob)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);if(f)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);var o=new FileReader;return o.onload=function(){e.data=o.result,t.encodePacket(e,n,!0,r)},o.readAsArrayBuffer(e.data)}(e,n,r);var o=new Uint8Array(1);o[0]=p[e.type];var i=new y([o.buffer,e.data]);return r(i)}(n,r,i);if(a&&a.base64)return function(e,n){var r="b"+t.packets[e.type]+e.data.data;return n(r)}(n,i);var s=p[n.type];return void 0!==n.data&&(s+=o?u.encode(String(n.data),{strict:!1}):String(n.data)),i(""+s)},t.encodeBase64Packet=function(n,r){var o,i="b"+t.packets[n.type];if(y&&n.data instanceof e.Blob){var a=new FileReader;return a.onload=function(){var e=a.result.split(",")[1];r(i+e)},a.readAsDataURL(n.data)}try{o=String.fromCharCode.apply(null,new Uint8Array(n.data))}catch(e){for(var s=new Uint8Array(n.data),u=new Array(s.length),c=0;c<s.length;c++)u[c]=s[c];o=String.fromCharCode.apply(null,u)}return i+=e.btoa(o),r(i)},t.decodePacket=function(e,n,r){if(void 0===e)return h;if("string"==typeof e){if("b"===e.charAt(0))return t.decodeBase64Packet(e.substr(1),n);if(r&&!1===(e=function(e){try{e=u.decode(e,{strict:!1})}catch(e){return!1}return e}(e)))return h;var o=e.charAt(0);return Number(o)==o&&d[o]?e.length>1?{type:d[o],data:e.substring(1)}:{type:d[o]}:h}o=new Uint8Array(e)[0];var i=a(e,1);return y&&"blob"===n&&(i=new y([i])),{type:d[o],data:i}},t.decodeBase64Packet=function(e,t){var n=d[e.charAt(0)];if(!r)return{type:n,data:{base64:!0,data:e.substr(1)}};var o=r.decode(e.substr(1));return"blob"===t&&y&&(o=new y([o])),{type:n,data:o}},t.encodePayload=function(e,n,r){"function"==typeof n&&(r=n,n=null);var o=i(e);if(n&&o)return y&&!f?t.encodePayloadAsBlob(e,r):t.encodePayloadAsArrayBuffer(e,r);if(!e.length)return r("0:");m(e,function(e,r){t.encodePacket(e,!!o&&n,!1,function(e){r(null,function(e){return e.length+":"+e}(e))})},function(e,t){return r(t.join(""))})},t.decodePayload=function(e,n,r){if("string"!=typeof e)return t.decodePayloadAsBinary(e,n,r);var o;if("function"==typeof n&&(r=n,n=null),""===e)return r(h,0,1);for(var i,a,s="",u=0,c=e.length;u<c;u++){var l=e.charAt(u);if(":"===l){if(""===s||s!=(i=Number(s)))return r(h,0,1);if(s!=(a=e.substr(u+1,i)).length)return r(h,0,1);if(a.length){if(o=t.decodePacket(a,n,!1),h.type===o.type&&h.data===o.data)return r(h,0,1);if(!1===r(o,u+i,c))return}u+=i,s=""}else s+=l}return""!==s?r(h,0,1):void 0},t.encodePayloadAsArrayBuffer=function(e,n){if(!e.length)return n(new ArrayBuffer(0));m(e,function(e,n){t.encodePacket(e,!0,!0,function(e){return n(null,e)})},function(e,t){var r=t.reduce(function(e,t){var n;return e+(n="string"==typeof t?t.length:t.byteLength).toString().length+n+2},0),o=new Uint8Array(r),i=0;return t.forEach(function(e){var t="string"==typeof e,n=e;if(t){for(var r=new Uint8Array(e.length),a=0;a<e.length;a++)r[a]=e.charCodeAt(a);n=r.buffer}o[i++]=t?0:1;var s=n.byteLength.toString();for(a=0;a<s.length;a++)o[i++]=parseInt(s[a]);o[i++]=255;for(r=new Uint8Array(n),a=0;a<r.length;a++)o[i++]=r[a]}),n(o.buffer)})},t.encodePayloadAsBlob=function(e,n){m(e,function(e,n){t.encodePacket(e,!0,!0,function(e){var t=new Uint8Array(1);if(t[0]=1,"string"==typeof e){for(var r=new Uint8Array(e.length),o=0;o<e.length;o++)r[o]=e.charCodeAt(o);e=r.buffer,t[0]=0}var i=(e instanceof ArrayBuffer?e.byteLength:e.size).toString(),a=new Uint8Array(i.length+1);for(o=0;o<i.length;o++)a[o]=parseInt(i[o]);if(a[i.length]=255,y){var s=new y([t.buffer,a.buffer,e]);n(null,s)}})},function(e,t){return n(new y(t))})},t.decodePayloadAsBinary=function(e,n,r){"function"==typeof n&&(r=n,n=null);for(var o=e,i=[];o.byteLength>0;){for(var s=new Uint8Array(o),u=0===s[0],c="",l=1;255!==s[l];l++){if(c.length>310)return r(h,0,1);c+=s[l]}o=a(o,2+c.length),c=parseInt(c);var f=a(o,0,c);if(u)try{f=String.fromCharCode.apply(null,new Uint8Array(f))}catch(e){var p=new Uint8Array(f);f="";for(l=0;l<p.length;l++)f+=String.fromCharCode(p[l])}i.push(f),o=a(o,c)}var d=i.length;i.forEach(function(e,o){r(t.decodePacket(e,n,!0),o,d)})}}).call(this,n(0))},function(e,t,n){function r(e){if(e)return function(e){for(var t in r.prototype)e[t]=r.prototype[t];return e}(e)}e.exports=r,r.prototype.on=r.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},r.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var o=0;o<r.length;o++)if((n=r[o])===t||n.fn===t){r.splice(o,1);break}return this},r.prototype.emit=function(e){this._callbacks=this._callbacks||{};var t=[].slice.call(arguments,1),n=this._callbacks["$"+e];if(n)for(var r=0,o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,t);return this},r.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},r.prototype.hasListeners=function(e){return!!this.listeners(e).length}},function(e,t,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),u=null,c=0,l=[],f=n(79);function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(v(r.parts[a],t))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(v(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:s}}}}function d(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function h(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),l.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function y(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=l.indexOf(e);t>=0&&l.splice(t,1)}function m(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),g(t,e.attrs),h(e,t),t}function g(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function v(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var a=c++;n=u||(u=m(t)),r=E.bind(null,n,a,!1),o=E.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",g(t,e.attrs),h(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=f(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,t),o=function(){y(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){y(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(s=i[a.id]).refs--,r.push(s)}e&&p(d(e,t),t);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete i[s.id]}}}};var b,w=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function E(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=w(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}var a;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t){e.exports=function(e,t){var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t){t.encode=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t},t.decode=function(e){for(var t={},n=e.split("&"),r=0,o=n.length;r<o;r++){var i=n[r].split("=");t[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createRoom=t.receiveMessage=t.sendMessage=t.requestRoomData=t.receiveRoomsList=t.requestRoomsList=t.receiveUsersList=t.requestUsersList=t.setRoomsListFilter=t.CREATE_ROOM_FAILED=t.CREATE_ROOM_SUCCESS=t.CREATE_ROOM_PENDING=t.SEND_MESSAGE_FAILED=t.SEND_MESSAGE_SUCCESS=t.SEND_MESSAGE_PENDING=t.REQUEST_ROOM_DATA_FAILED=t.REQUEST_ROOM_DATA_SUCCESS=t.REQUEST_ROOM_DATA_PENDING=t.REQUEST_ROOMS_LIST_FAILED=t.REQUEST_ROOMS_LIST_SUCCESS=t.REQUEST_ROOMS_LIST_PENDING=t.REQUEST_USERS_LIST_FAILED=t.REQUEST_USERS_LIST_SUCCESS=t.REQUEST_USERS_LIST_PENDING=t.HIDE_CREATE_ROOM_PANEL=t.SHOW_CREATE_ROOM_PANEL=t.SET_ROOMS_LIST_FILTER=void 0;var r,o=n(32),i=(r=o)&&r.__esModule?r:{default:r};var a=t.SET_ROOMS_LIST_FILTER="SET_ROOMS_LIST_FILTER",s=(t.SHOW_CREATE_ROOM_PANEL="SHOW_CREATE_ROOM_PANEL",t.HIDE_CREATE_ROOM_PANEL="HIDE_CREATE_ROOM_PANEL",t.REQUEST_USERS_LIST_PENDING="REQUEST_USERS_LIST_PENDING"),u=t.REQUEST_USERS_LIST_SUCCESS="REQUEST_USERS_LIST_SUCCESS",c=(t.REQUEST_USERS_LIST_FAILED="REQUEST_USERS_LIST_FAILED",t.REQUEST_ROOMS_LIST_PENDING="REQUEST_ROOMS_LIST_PENDING"),l=t.REQUEST_ROOMS_LIST_SUCCESS="REQUEST_ROOMS_LIST_SUCCESS",f=(t.REQUEST_ROOMS_LIST_FAILED="REQUEST_ROOMS_LIST_FAILED",t.REQUEST_ROOM_DATA_PENDING="REQUEST_ROOM_DATA_PENDING"),p=t.REQUEST_ROOM_DATA_SUCCESS="REQUEST_ROOM_DATA_SUCCESS",d=t.REQUEST_ROOM_DATA_FAILED="REQUEST_ROOM_DATA_FAILED",h=t.SEND_MESSAGE_PENDING="SEND_MESSAGE_PENDING",y=t.SEND_MESSAGE_SUCCESS="SEND_MESSAGE_SUCCESS",m=(t.SEND_MESSAGE_FAILED="SEND_MESSAGE_FAILED",t.CREATE_ROOM_PENDING="CREATE_ROOM_PENDING");t.CREATE_ROOM_SUCCESS="CREATE_ROOM_SUCCESS",t.CREATE_ROOM_FAILED="CREATE_ROOM_FAILED",t.setRoomsListFilter=function(e){return{type:a,filter:e}},t.requestUsersList=function(e){return function(t){t({type:s}),i.default.emit("REQUEST_USERS_LIST",e)}},t.receiveUsersList=function(e){return{type:u,usersList:e}},t.requestRoomsList=function(e){return function(t){t({type:c}),i.default.emit("REQUEST_ROOMS_LIST",e)}},t.receiveRoomsList=function(e){return{type:l,roomsList:e}},t.requestRoomData=function(e){return function(t){t({type:f}),fetch("/roomData",{headers:{Accept:"application/json","Content-Type":"application/json"},method:"post",credentials:"same-origin",body:JSON.stringify({id:e})}).then(function(e){return e.json()},function(e){console.error(e),t({type:d})}).then(function(e){t({type:p,roomData:e})})}},t.sendMessage=function(e,t,n){return function(r){r({type:h}),i.default.emit("SEND_MESSAGE",JSON.stringify({user:e,roomId:t,message:n}))}},t.receiveMessage=function(e){return{type:y,message:e}},t.createRoom=function(e,t,n,r){return function(o){o({type:m}),i.default.emit("CREATE_ROOM",JSON.stringify({user:e,title:t,message:n,participants:r}))}}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,s){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,a,s],l=0;(u=new Error(t.replace(/%s/g,function(){return c[l++]}))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t,n){var r=n(5),o=n(6);function i(e){this.path=e.path,this.hostname=e.hostname,this.port=e.port,this.secure=e.secure,this.query=e.query,this.timestampParam=e.timestampParam,this.timestampRequests=e.timestampRequests,this.readyState="",this.agent=e.agent||!1,this.socket=e.socket,this.enablesXDR=e.enablesXDR,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.forceNode=e.forceNode,this.extraHeaders=e.extraHeaders,this.localAddress=e.localAddress}e.exports=i,o(i.prototype),i.prototype.onError=function(e,t){var n=new Error(e);return n.type="TransportError",n.description=t,this.emit("error",n),this},i.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},i.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},i.prototype.send=function(e){if("open"!==this.readyState)throw new Error("Transport not open");this.write(e)},i.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},i.prototype.onData=function(e){var t=r.decodePacket(e,this.socket.binaryType);this.onPacket(t)},i.prototype.onPacket=function(e){this.emit("packet",e)},i.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(e,t,n){(function(t){var r=n(70);e.exports=function(e){var n=e.xdomain,o=e.xscheme,i=e.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!n||r))return new XMLHttpRequest}catch(e){}try{if("undefined"!=typeof XDomainRequest&&!o&&i)return new XDomainRequest}catch(e){}if(!n)try{return new(t[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}}).call(this,n(0))},function(e,t,n){var r=n(3)("socket.io-parser"),o=n(6),i=n(73),a=n(30),s=n(29);function u(){}t.protocol=4,t.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],t.CONNECT=0,t.DISCONNECT=1,t.EVENT=2,t.ACK=3,t.ERROR=4,t.BINARY_EVENT=5,t.BINARY_ACK=6,t.Encoder=u,t.Decoder=f;var c=t.ERROR+'"encode error"';function l(e){var n=""+e.type;if(t.BINARY_EVENT!==e.type&&t.BINARY_ACK!==e.type||(n+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(n+=e.nsp+","),null!=e.id&&(n+=e.id),null!=e.data){var o=function(e){try{return JSON.stringify(e)}catch(e){return!1}}(e.data);if(!1===o)return c;n+=o}return r("encoded %j as %s",e,n),n}function f(){this.reconstructor=null}function p(e){this.reconPack=e,this.buffers=[]}function d(e){return{type:t.ERROR,data:"parser error: "+e}}u.prototype.encode=function(e,n){(r("encoding packet %j",e),t.BINARY_EVENT===e.type||t.BINARY_ACK===e.type)?function(e,t){i.removeBlobs(e,function(e){var n=i.deconstructPacket(e),r=l(n.packet),o=n.buffers;o.unshift(r),t(o)})}(e,n):n([l(e)])},o(f.prototype),f.prototype.add=function(e){var n;if("string"==typeof e)n=function(e){var n=0,o={type:Number(e.charAt(0))};if(null==t.types[o.type])return d("unknown packet type "+o.type);if(t.BINARY_EVENT===o.type||t.BINARY_ACK===o.type){for(var i="";"-"!==e.charAt(++n)&&(i+=e.charAt(n),n!=e.length););if(i!=Number(i)||"-"!==e.charAt(n))throw new Error("Illegal attachments");o.attachments=Number(i)}if("/"===e.charAt(n+1))for(o.nsp="";++n;){var s=e.charAt(n);if(","===s)break;if(o.nsp+=s,n===e.length)break}else o.nsp="/";var u=e.charAt(n+1);if(""!==u&&Number(u)==u){for(o.id="";++n;){var s=e.charAt(n);if(null==s||Number(s)!=s){--n;break}if(o.id+=e.charAt(n),n===e.length)break}o.id=Number(o.id)}if(e.charAt(++n)){var c=function(e){try{return JSON.parse(e)}catch(e){return!1}}(e.substr(n)),l=!1!==c&&(o.type===t.ERROR||a(c));if(!l)return d("invalid payload");o.data=c}return r("decoded %s as %j",e,o),o}(e),t.BINARY_EVENT===n.type||t.BINARY_ACK===n.type?(this.reconstructor=new p(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!s(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(n=this.reconstructor.takeBinaryData(e))&&(this.reconstructor=null,this.emit("decoded",n))}},f.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},p.prototype.takeBinaryData=function(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){var t=i.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null},p.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,i,a,s,u){if(r(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,o,i,a,s,u],f=0;(c=new Error(t.replace(/%s/g,function(){return l[f++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,n){"use strict";n.r(t),n.d(t,"createStore",function(){return u}),n.d(t,"combineReducers",function(){return l}),n.d(t,"bindActionCreators",function(){return p}),n.d(t,"applyMiddleware",function(){return h}),n.d(t,"compose",function(){return d}),n.d(t,"__DO_NOT_USE__ActionTypes",function(){return o});var r=n(19),o={INIT:"@@redux/INIT"+Math.random().toString(36).substring(7).split("").join("."),REPLACE:"@@redux/REPLACE"+Math.random().toString(36).substring(7).split("").join(".")},i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function s(e){if("object"!==(void 0===e?"undefined":i(e))||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function u(e,t,n){var a;if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(u)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var c=e,l=t,f=[],p=f,d=!1;function h(){p===f&&(p=f.slice())}function y(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return l}function m(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return h(),p.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,h();var n=p.indexOf(e);p.splice(n,1)}}}function g(e){if(!s(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,l=c(l,e)}finally{d=!1}for(var t=f=p,n=0;n<t.length;n++){(0,t[n])()}return e}return g({type:o.INIT}),(a={dispatch:g,subscribe:m,getState:y,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");c=e,g({type:o.REPLACE})}})[r.a]=function(){var e,t=m;return(e={subscribe:function(e){if("object"!==(void 0===e?"undefined":i(e))||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(y())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e},a}function c(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function l(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var i=t[r];0,"function"==typeof e[i]&&(n[i]=e[i])}var a=Object.keys(n);var s=void 0;try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:o.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:"@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".")}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+o.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){s=e}return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];if(s)throw s;for(var r=!1,o={},i=0;i<a.length;i++){var u=a[i],l=n[u],f=e[u],p=l(f,t);if(void 0===p){var d=c(u,t);throw new Error(d)}o[u]=p,r=r||p!==f}return r?o:e}}function f(e,t){return function(){return t(e.apply(this,arguments))}}function p(e,t){if("function"==typeof e)return f(e,t);if("object"!==(void 0===e?"undefined":i(e))||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":void 0===e?"undefined":i(e))+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},o=0;o<n.length;o++){var a=n[o],s=e[a];"function"==typeof s&&(r[a]=f(s,t))}return r}function d(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}function h(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=e.apply(void 0,r),s=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},u={getState:i.getState,dispatch:function(){return s.apply(void 0,arguments)}},c=t.map(function(e){return e(u)});return s=d.apply(void 0,c)(i.dispatch),a({},i,{dispatch:s})}}}},function(e,t,n){"use strict";(function(e,r){var o,i=n(35);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(0),n(83)(e))},function(e,t){var n=[].slice;e.exports=function(e,t){if("string"==typeof t&&(t=e[t]),"function"!=typeof t)throw new Error("bind() requires a function");var r=n.call(arguments,2);return function(){return t.apply(e,r.concat(n.call(arguments)))}}},function(e,t){e.exports=function(e,t,n){return e.on(t,n),{destroy:function(){e.removeListener(t,n)}}}},function(e,t,n){var r=n(15),o=n(6),i=n(53),a=n(21),s=n(20),u=n(3)("socket.io-client:socket"),c=n(10),l=n(25);e.exports=d;var f={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},p=o.prototype.emit;function d(e,t,n){this.io=e,this.nsp=t,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},n&&n.query&&(this.query=n.query),this.io.autoConnect&&this.open()}o(d.prototype),d.prototype.subEvents=function(){if(!this.subs){var e=this.io;this.subs=[a(e,"open",s(this,"onopen")),a(e,"packet",s(this,"onpacket")),a(e,"close",s(this,"onclose"))]}},d.prototype.open=d.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},d.prototype.send=function(){var e=i(arguments);return e.unshift("message"),this.emit.apply(this,e),this},d.prototype.emit=function(e){if(f.hasOwnProperty(e))return p.apply(this,arguments),this;var t=i(arguments),n={type:(void 0!==this.flags.binary?this.flags.binary:l(t))?r.BINARY_EVENT:r.EVENT,data:t,options:{}};return n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof t[t.length-1]&&(u("emitting packet with ack id %d",this.ids),this.acks[this.ids]=t.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),this.flags={},this},d.prototype.packet=function(e){e.nsp=this.nsp,this.io.packet(e)},d.prototype.onopen=function(){if(u("transport is open - connecting"),"/"!==this.nsp)if(this.query){var e="object"==typeof this.query?c.encode(this.query):this.query;u("sending connect packet with query %s",e),this.packet({type:r.CONNECT,query:e})}else this.packet({type:r.CONNECT})},d.prototype.onclose=function(e){u("close (%s)",e),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",e)},d.prototype.onpacket=function(e){var t=e.nsp===this.nsp,n=e.type===r.ERROR&&"/"===e.nsp;if(t||n)switch(e.type){case r.CONNECT:this.onconnect();break;case r.EVENT:case r.BINARY_EVENT:this.onevent(e);break;case r.ACK:case r.BINARY_ACK:this.onack(e);break;case r.DISCONNECT:this.ondisconnect();break;case r.ERROR:this.emit("error",e.data)}},d.prototype.onevent=function(e){var t=e.data||[];u("emitting event %j",t),null!=e.id&&(u("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?p.apply(this,t):this.receiveBuffer.push(t)},d.prototype.ack=function(e){var t=this,n=!1;return function(){if(!n){n=!0;var o=i(arguments);u("sending ack %j",o),t.packet({type:l(o)?r.BINARY_ACK:r.ACK,id:e,data:o})}}},d.prototype.onack=function(e){var t=this.acks[e.id];"function"==typeof t?(u("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):u("bad ack %s",e.id)},d.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},d.prototype.emitBuffered=function(){var e;for(e=0;e<this.receiveBuffer.length;e++)p.apply(this,this.receiveBuffer[e]);for(this.receiveBuffer=[],e=0;e<this.sendBuffer.length;e++)this.packet(this.sendBuffer[e]);this.sendBuffer=[]},d.prototype.ondisconnect=function(){u("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},d.prototype.destroy=function(){if(this.subs){for(var e=0;e<this.subs.length;e++)this.subs[e].destroy();this.subs=null}this.io.destroy(this)},d.prototype.close=d.prototype.disconnect=function(){return this.connected&&(u("performing disconnect (%s)",this.nsp),this.packet({type:r.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},d.prototype.compress=function(e){return this.flags.compress=e,this},d.prototype.binary=function(e){return this.flags.binary=e,this}},function(e,t){var n=[].indexOf;e.exports=function(e,t){if(n)return e.indexOf(t);for(var r=0;r<e.length;++r)if(e[r]===t)return r;return-1}},function(e,t,n){"use strict";var r,o="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),i=64,a={},s=0,u=0;function c(e){var t="";do{t=o[e%i]+t,e=Math.floor(e/i)}while(e>0);return t}function l(){var e=c(+new Date);return e!==r?(s=0,r=e):e+"."+c(s++)}for(;u<i;u++)a[o[u]]=u;l.encode=c,l.decode=function(e){var t=0;for(u=0;u<e.length;u++)t=t*i+a[e.charAt(u)];return t},e.exports=l},function(e,t,n){(function(t){var r=n(63),o=Object.prototype.toString,i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===o.call(Blob),a="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===o.call(File);e.exports=function e(n){if(!n||"object"!=typeof n)return!1;if(r(n)){for(var o=0,s=n.length;o<s;o++)if(e(n[o]))return!0;return!1}if("function"==typeof t&&t.isBuffer&&t.isBuffer(n)||"function"==typeof ArrayBuffer&&n instanceof ArrayBuffer||i&&n instanceof Blob||a&&n instanceof File)return!0;if(n.toJSON&&"function"==typeof n.toJSON&&1===arguments.length)return e(n.toJSON(),!0);for(var u in n)if(Object.prototype.hasOwnProperty.call(n,u)&&e(n[u]))return!0;return!1}}).call(this,n(67).Buffer)},function(e,t,n){var r=n(13),o=n(10),i=n(5),a=n(9),s=n(24),u=n(3)("engine.io-client:polling");e.exports=l;var c=null!=new(n(14))({xdomain:!1}).responseType;function l(e){var t=e&&e.forceBase64;c&&!t||(this.supportsBinary=!1),r.call(this,e)}a(l,r),l.prototype.name="polling",l.prototype.doOpen=function(){this.poll()},l.prototype.pause=function(e){var t=this;function n(){u("paused"),t.readyState="paused",e()}if(this.readyState="pausing",this.polling||!this.writable){var r=0;this.polling&&(u("we are currently polling - waiting to pause"),r++,this.once("pollComplete",function(){u("pre-pause polling complete"),--r||n()})),this.writable||(u("we are currently writing - waiting to pause"),r++,this.once("drain",function(){u("pre-pause writing complete"),--r||n()}))}else n()},l.prototype.poll=function(){u("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},l.prototype.onData=function(e){var t=this;u("polling got data %s",e);i.decodePayload(e,this.socket.binaryType,function(e,n,r){if("opening"===t.readyState&&t.onOpen(),"close"===e.type)return t.onClose(),!1;t.onPacket(e)}),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():u('ignoring poll - transport state "%s"',this.readyState))},l.prototype.doClose=function(){var e=this;function t(){u("writing close packet"),e.write([{type:"close"}])}"open"===this.readyState?(u("transport open - closing"),t()):(u("transport not open - deferring close"),this.once("open",t))},l.prototype.write=function(e){var t=this;this.writable=!1;var n=function(){t.writable=!0,t.emit("drain")};i.encodePayload(e,this.supportsBinary,function(e){t.doWrite(e,n)})},l.prototype.uri=function(){var e=this.query||{},t=this.secure?"https":"http",n="";return!1!==this.timestampRequests&&(e[this.timestampParam]=s()),this.supportsBinary||e.sid||(e.b64=1),e=o.encode(e),this.port&&("https"===t&&443!==Number(this.port)||"http"===t&&80!==Number(this.port))&&(n=":"+this.port),e.length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+e}},function(e,t,n){(function(e){var r=n(14),o=n(69),i=n(56),a=n(55);t.polling=function(t){var n=!1,a=!1,s=!1!==t.jsonp;if(e.location){var u="https:"===location.protocol,c=location.port;c||(c=u?443:80),n=t.hostname!==location.hostname||c!==t.port,a=t.secure!==u}if(t.xdomain=n,t.xscheme=a,"open"in new r(t)&&!t.forceJSONP)return new o(t);if(!s)throw new Error("JSONP disabled");return new i(t)},t.websocket=a}).call(this,n(0))},function(e,t,n){var r=n(72),o=n(22),i=n(6),a=n(15),s=n(21),u=n(20),c=n(3)("socket.io-client:manager"),l=n(23),f=n(52),p=Object.prototype.hasOwnProperty;function d(e,t){if(!(this instanceof d))return new d(e,t);e&&"object"==typeof e&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.nsps={},this.subs=[],this.opts=t,this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(t.randomizationFactor||.5),this.backoff=new f({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this.readyState="closed",this.uri=e,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var n=t.parser||a;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this.autoConnect=!1!==t.autoConnect,this.autoConnect&&this.open()}e.exports=d,d.prototype.emitAll=function(){for(var e in this.emit.apply(this,arguments),this.nsps)p.call(this.nsps,e)&&this.nsps[e].emit.apply(this.nsps[e],arguments)},d.prototype.updateSocketIds=function(){for(var e in this.nsps)p.call(this.nsps,e)&&(this.nsps[e].id=this.generateId(e))},d.prototype.generateId=function(e){return("/"===e?"":e+"#")+this.engine.id},i(d.prototype),d.prototype.reconnection=function(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection},d.prototype.reconnectionAttempts=function(e){return arguments.length?(this._reconnectionAttempts=e,this):this._reconnectionAttempts},d.prototype.reconnectionDelay=function(e){return arguments.length?(this._reconnectionDelay=e,this.backoff&&this.backoff.setMin(e),this):this._reconnectionDelay},d.prototype.randomizationFactor=function(e){return arguments.length?(this._randomizationFactor=e,this.backoff&&this.backoff.setJitter(e),this):this._randomizationFactor},d.prototype.reconnectionDelayMax=function(e){return arguments.length?(this._reconnectionDelayMax=e,this.backoff&&this.backoff.setMax(e),this):this._reconnectionDelayMax},d.prototype.timeout=function(e){return arguments.length?(this._timeout=e,this):this._timeout},d.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},d.prototype.open=d.prototype.connect=function(e,t){if(c("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;c("opening %s",this.uri),this.engine=r(this.uri,this.opts);var n=this.engine,o=this;this.readyState="opening",this.skipReconnect=!1;var i=s(n,"open",function(){o.onopen(),e&&e()}),a=s(n,"error",function(t){if(c("connect_error"),o.cleanup(),o.readyState="closed",o.emitAll("connect_error",t),e){var n=new Error("Connection error");n.data=t,e(n)}else o.maybeReconnectOnOpen()});if(!1!==this._timeout){var u=this._timeout;c("connect attempt will timeout after %d",u);var l=setTimeout(function(){c("connect attempt timed out after %d",u),i.destroy(),n.close(),n.emit("error","timeout"),o.emitAll("connect_timeout",u)},u);this.subs.push({destroy:function(){clearTimeout(l)}})}return this.subs.push(i),this.subs.push(a),this},d.prototype.onopen=function(){c("open"),this.cleanup(),this.readyState="open",this.emit("open");var e=this.engine;this.subs.push(s(e,"data",u(this,"ondata"))),this.subs.push(s(e,"ping",u(this,"onping"))),this.subs.push(s(e,"pong",u(this,"onpong"))),this.subs.push(s(e,"error",u(this,"onerror"))),this.subs.push(s(e,"close",u(this,"onclose"))),this.subs.push(s(this.decoder,"decoded",u(this,"ondecoded")))},d.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},d.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},d.prototype.ondata=function(e){this.decoder.add(e)},d.prototype.ondecoded=function(e){this.emit("packet",e)},d.prototype.onerror=function(e){c("error",e),this.emitAll("error",e)},d.prototype.socket=function(e,t){var n=this.nsps[e];if(!n){n=new o(this,e,t),this.nsps[e]=n;var r=this;n.on("connecting",i),n.on("connect",function(){n.id=r.generateId(e)}),this.autoConnect&&i()}function i(){~l(r.connecting,n)||r.connecting.push(n)}return n},d.prototype.destroy=function(e){var t=l(this.connecting,e);~t&&this.connecting.splice(t,1),this.connecting.length||this.close()},d.prototype.packet=function(e){c("writing packet %j",e);var t=this;e.query&&0===e.type&&(e.nsp+="?"+e.query),t.encoding?t.packetBuffer.push(e):(t.encoding=!0,this.encoder.encode(e,function(n){for(var r=0;r<n.length;r++)t.engine.write(n[r],e.options);t.encoding=!1,t.processPacketQueue()}))},d.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var e=this.packetBuffer.shift();this.packet(e)}},d.prototype.cleanup=function(){c("cleanup");for(var e=this.subs.length,t=0;t<e;t++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},d.prototype.close=d.prototype.disconnect=function(){c("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},d.prototype.onclose=function(e){c("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",e),this._reconnection&&!this.skipReconnect&&this.reconnect()},d.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var e=this;if(this.backoff.attempts>=this._reconnectionAttempts)c("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var t=this.backoff.duration();c("will wait %dms before reconnect attempt",t),this.reconnecting=!0;var n=setTimeout(function(){e.skipReconnect||(c("attempting reconnect"),e.emitAll("reconnect_attempt",e.backoff.attempts),e.emitAll("reconnecting",e.backoff.attempts),e.skipReconnect||e.open(function(t){t?(c("reconnect attempt error"),e.reconnecting=!1,e.reconnect(),e.emitAll("reconnect_error",t.data)):(c("reconnect success"),e.onreconnect())}))},t);this.subs.push({destroy:function(){clearTimeout(n)}})}},d.prototype.onreconnect=function(){var e=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",e)}},function(e,t,n){(function(t){e.exports=function(e){return n&&t.Buffer.isBuffer(e)||r&&(e instanceof t.ArrayBuffer||o(e))};var n="function"==typeof t.Buffer&&"function"==typeof t.Buffer.isBuffer,r="function"==typeof t.ArrayBuffer,o=r&&"function"==typeof t.ArrayBuffer.isView?t.ArrayBuffer.isView:function(e){return e.buffer instanceof t.ArrayBuffer}}).call(this,n(0))},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function(e){var t=e,o=e.indexOf("["),i=e.indexOf("]");-1!=o&&-1!=i&&(e=e.substring(0,o)+e.substring(o,i).replace(/:/g,";")+e.substring(i,e.length));for(var a=n.exec(e||""),s={},u=14;u--;)s[r[u]]=a[u]||"";return-1!=o&&-1!=i&&(s.source=t,s.host=s.host.substring(1,s.host.length-1).replace(/;/g,":"),s.authority=s.authority.replace("[","").replace("]","").replace(/;/g,":"),s.ipv6uri=!0),s}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=n(78)()},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,s=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var c in n=Object(arguments[u]))o.call(n,c)&&(s[c]=n[c]);if(r){a=r(n);for(var l=0;l<a.length;l++)i.call(n,a[l])&&(s[a[l]]=n[a[l]])}}return s}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){e.exports=function(){"use strict";var e={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},t={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},n=Object.defineProperty,r=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,i=Object.getOwnPropertyDescriptor,a=Object.getPrototypeOf,s=a&&a(Object);return function u(c,l,f){if("string"!=typeof l){if(s){var p=a(l);p&&p!==s&&u(c,p,f)}var d=r(l);o&&(d=d.concat(o(l)));for(var h=0;h<d.length;++h){var y=d[h];if(!(e[y]||t[y]||f&&f[y])){var m=i(l,y);try{n(c,y,m)}catch(e){}}}return c}return c}}()},function(e,t,n){"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}t.__esModule=!0;var o=r();o.withExtraArgument=r,t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(18),i=n(11);function a(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var s={id:"5b0a6d18ab1ebd1740587622",username:"Sara"};t.default=(0,o.combineReducers)({currentUser:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:s;return arguments[1].type,e},roomsList:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments[1];switch(t.type){case i.REQUEST_ROOMS_LIST_SUCCESS:return[].concat(a(t.roomsList));default:return e}},isCreateRoomPanelOpen:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];switch(arguments[1].type){case i.SHOW_CREATE_ROOM_PANEL:return!0;case i.HIDE_CREATE_ROOM_PANEL:return!1;default:return e}},usersList:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments[1];switch(t.type){case i.REQUEST_USERS_LIST_SUCCESS:return[].concat(a(t.usersList));default:return e}},currentRoom:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];switch(t.type){case i.REQUEST_ROOM_DATA_SUCCESS:return r({},t.roomData);case i.SEND_MESSAGE_SUCCESS:return void 0===e.messages?e:r({},e,{messages:[].concat(a(e.messages),[t.message])});default:return e}}})},function(e,t,n){e.exports=n.p+"dbce9c3bd207e839d9ac40af048f6020.png"},function(e,t,n){(e.exports=n(8)(!1)).push([e.i,"#create-room-panel-container {\n  position: fixed;\n  z-index: 100;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center; }\n  #create-room-panel-container #create-room-panel {\n    width: 600px;\n    height: 400px;\n    background-color: white; }\n    #create-room-panel-container #create-room-panel img {\n      float: right;\n      width: 50px;\n      margin: 15px;\n      cursor: pointer; }\n",""])},function(e,t,n){var r=n(40);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(7)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=u(n(1)),i=n(4);n(41);var a=u(n(39)),s=n(11);function u(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleSubmit=function(e){e.preventDefault();var t=n.props,r=t.createRoom,o=t.currentUser,i=n.state,a=i.title,s=i.message,u=i.participants;a.length&&s.length&&u.length&&r(o,a,s,u)},n.handleChange=function(e){var t,r,o;n.setState((t={},r=e.target.name,o=e.target.value,r in t?Object.defineProperty(t,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[r]=o,t))},n.addParticipant=function(e){n.setState({participants:[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(n.state.participants),[e])})},n.renderUsersListLeft=function(){var e=n.state.participants;return n.props.usersList.filter(function(t){return!e.includes(t)}).map(function(e){return o.default.createElement("strong",{onClick:function(){return n.addParticipant(e)}},e.username,", ")})},n.state={title:"",message:"",participants:[]},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"componentDidMount",value:function(){var e=this.props;(0,e.requestUsersList)(e.currentUser.id)}},{key:"render",value:function(){var e=this.props,t=e.hideCreateRoomPanel,n=(e.usersList,this.state),r=n.title,i=n.message,s=n.participants;return o.default.createElement("div",{id:"create-room-panel-container"},o.default.createElement("div",{id:"create-room-panel"},o.default.createElement("img",{src:a.default,onClick:t}),o.default.createElement("form",{onSubmit:this.handleSubmit},o.default.createElement("input",{type:"text",placeholder:"Title",name:"title",value:r,onChange:this.handleChange}),o.default.createElement("br",null),o.default.createElement("p",null,"Participants: ",s.map(function(e){return e.username+", "})),o.default.createElement("input",{type:"text",placeholder:"Message",name:"message",value:i,onChange:this.handleChange}),o.default.createElement("br",null),o.default.createElement("button",null,"Create"),o.default.createElement("br",null),o.default.createElement("p",null,this.renderUsersListLeft()))))}}]),t}();t.default=(0,i.connect)(function(e){return{currentUser:e.currentUser,usersList:e.usersList}},function(e){return{hideCreateRoomPanel:function(){return e({type:s.HIDE_CREATE_ROOM_PANEL})},requestUsersList:function(t){return e((0,s.requestUsersList)(t))},createRoom:function(t,n,r,o){return e((0,s.createRoom)(t,n,r,o))}}})(c)},function(e,t,n){(e.exports=n(8)(!1)).push([e.i,'* {\n  margin: 0;\n  padding: 0;\n  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif; }\n\n#app-container {\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  flex-direction: column; }\n  #app-container h1 {\n    flex-grow: 0;\n    font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;\n    background-color: #80bdff;\n    color: white;\n    padding: 20px;\n    padding-left: 40px; }\n  #app-container #body-container {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: row; }\n    #app-container #body-container #left-container {\n      width: 300px;\n      flex-grow: 0;\n      border-right: 1px solid #f3f3f3;\n      display: block; }\n      #app-container #body-container #left-container input {\n        flex-grow: 0; }\n      #app-container #body-container #left-container .room-list-item {\n        padding: 10px;\n        background-color: #EEE9D1; }\n        #app-container #body-container #left-container .room-list-item p {\n          margin-bottom: 0; }\n        #app-container #body-container #left-container .room-list-item .unread {\n          background-color: #97C0B7; }\n    #app-container #body-container #right-container {\n      flex-grow: 1;\n      display: flex;\n      flex-direction: column;\n      justify-content: end; }\n      #app-container #body-container #right-container #conversation-container {\n        flex-grow: 1; }\n      #app-container #body-container #right-container #input-container {\n        flex-grow: 0;\n        height: 200px;\n        background-color: #f3f3f3; }\n',""])},function(e,t,n){var r=n(43);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(7)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(8)(!1)).push([e.i,"#input-container input[type=text] {\n  width: 500px; }\n",""])},function(e,t,n){var r=n(45);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(7)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(1),a=(r=i)&&r.__esModule?r:{default:r},s=n(4);n(46);var u=n(11);var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleChange=function(e){var t,r,o;n.setState((t={},r=e.target.name,o=e.target.value,r in t?Object.defineProperty(t,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[r]=o,t))},n.handleSubmit=function(e){e.preventDefault();var t=n.props,r=t.currentRoom,o=t.currentUser,i=t.sendMessage,a=n.state.message;void 0!==o&&void 0!==r&&a.length&&(i(o,r._id,a),n.setState({message:""}))},n.inputRef=a.default.createRef(),n.state={message:""},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.PureComponent),o(t,[{key:"componentDidMount",value:function(){this.inputRef.current.focus()}},{key:"render",value:function(){var e=this.state.message;return a.default.createElement("div",{id:"input-container"},a.default.createElement("form",{onSubmit:this.handleSubmit},a.default.createElement("input",{type:"text",value:e,name:"message",ref:this.inputRef,onChange:this.handleChange,placeholder:"Type your message here"})))}}]),t}();t.default=(0,s.connect)(function(e){return{currentUser:e.currentUser,currentRoom:e.currentRoom}},function(e){return{sendMessage:function(t,n,r){return e((0,u.sendMessage)(t,n,r))}}})(c)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(1),a=(r=i)&&r.__esModule?r:{default:r},s=n(4);var u=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.PureComponent),o(t,[{key:"render",value:function(){var e=this.props.currentRoom,t=e.title,n=(e.seenBy,e.messages);return void 0===t?a.default.createElement("p",null,"No current room"):a.default.createElement("div",{id:"room-container"},n.map(function(e){return a.default.createElement("p",null,e.user.username," said: ",e.content)}))}}]),t}();t.default=(0,s.connect)(function(e){return{currentRoom:e.currentRoom}},function(e){return{}})(u)},function(e,t,n){(e.exports=n(8)(!1)).push([e.i,"input {\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem;\n  padding: 10px;\n  font-size: 20xpx;\n  font-family: inherits;\n  margin: 15px;\n  width: 250px; }\n\ninput:focus {\n  border-color: #80bdff;\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25); }\n",""])},function(e,t,n){var r=n(49);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(7)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(1),a=(r=i)&&r.__esModule?r:{default:r};n(4);n(50);var s=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.PureComponent),o(t,[{key:"render",value:function(){return a.default.createElement("div",null,a.default.createElement("input",{type:"text",placeholder:"Search conversations.."}))}}]),t}();t.default=s},function(e,t){function n(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}e.exports=n,n.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-n:e+n}return 0|Math.min(e,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(e){this.ms=e},n.prototype.setMax=function(e){this.max=e},n.prototype.setJitter=function(e){this.jitter=e}},function(e,t){e.exports=function(e,t){for(var n=[],r=(t=t||0)||0;r<e.length;r++)n[r-t]=e[r];return n}},function(e,t){},function(e,t,n){(function(t){var r,o=n(13),i=n(5),a=n(10),s=n(9),u=n(24),c=n(3)("engine.io-client:websocket"),l=t.WebSocket||t.MozWebSocket;if("undefined"==typeof window)try{r=n(54)}catch(e){}var f=l;function p(e){e&&e.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=e.perMessageDeflate,this.usingBrowserWebSocket=l&&!e.forceNode,this.protocols=e.protocols,this.usingBrowserWebSocket||(f=r),o.call(this,e)}f||"undefined"!=typeof window||(f=r),e.exports=p,s(p,o),p.prototype.name="websocket",p.prototype.supportsBinary=!0,p.prototype.doOpen=function(){if(this.check()){var e=this.uri(),t=this.protocols,n={agent:this.agent,perMessageDeflate:this.perMessageDeflate};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(n.headers=this.extraHeaders),this.localAddress&&(n.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket?t?new f(e,t):new f(e):new f(e,t,n)}catch(e){return this.emit("error",e)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},p.prototype.addEventListeners=function(){var e=this;this.ws.onopen=function(){e.onOpen()},this.ws.onclose=function(){e.onClose()},this.ws.onmessage=function(t){e.onData(t.data)},this.ws.onerror=function(t){e.onError("websocket error",t)}},p.prototype.write=function(e){var n=this;this.writable=!1;for(var r=e.length,o=0,a=r;o<a;o++)!function(e){i.encodePacket(e,n.supportsBinary,function(o){if(!n.usingBrowserWebSocket){var i={};if(e.options&&(i.compress=e.options.compress),n.perMessageDeflate)("string"==typeof o?t.Buffer.byteLength(o):o.length)<n.perMessageDeflate.threshold&&(i.compress=!1)}try{n.usingBrowserWebSocket?n.ws.send(o):n.ws.send(o,i)}catch(e){c("websocket closed before onclose event")}--r||s()})}(e[o]);function s(){n.emit("flush"),setTimeout(function(){n.writable=!0,n.emit("drain")},0)}},p.prototype.onClose=function(){o.prototype.onClose.call(this)},p.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},p.prototype.uri=function(){var e=this.query||{},t=this.secure?"wss":"ws",n="";return this.port&&("wss"===t&&443!==Number(this.port)||"ws"===t&&80!==Number(this.port))&&(n=":"+this.port),this.timestampRequests&&(e[this.timestampParam]=u()),this.supportsBinary||(e.b64=1),(e=a.encode(e)).length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+e},p.prototype.check=function(){return!(!f||"__initialize"in f&&this.name===p.prototype.name)}}).call(this,n(0))},function(e,t,n){(function(t){var r=n(26),o=n(9);e.exports=c;var i,a=/\n/g,s=/\\n/g;function u(){}function c(e){r.call(this,e),this.query=this.query||{},i||(t.___eio||(t.___eio=[]),i=t.___eio),this.index=i.length;var n=this;i.push(function(e){n.onData(e)}),this.query.j=this.index,t.document&&t.addEventListener&&t.addEventListener("beforeunload",function(){n.script&&(n.script.onerror=u)},!1)}o(c,r),c.prototype.supportsBinary=!1,c.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),r.prototype.doClose.call(this)},c.prototype.doPoll=function(){var e=this,t=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),t.async=!0,t.src=this.uri(),t.onerror=function(t){e.onError("jsonp poll error",t)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(t,n):(document.head||document.body).appendChild(t),this.script=t,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout(function(){var e=document.createElement("iframe");document.body.appendChild(e),document.body.removeChild(e)},100)},c.prototype.doWrite=function(e,t){var n=this;if(!this.form){var r,o=document.createElement("form"),i=document.createElement("textarea"),u=this.iframeId="eio_iframe_"+this.index;o.className="socketio",o.style.position="absolute",o.style.top="-1000px",o.style.left="-1000px",o.target=u,o.method="POST",o.setAttribute("accept-charset","utf-8"),i.name="d",o.appendChild(i),document.body.appendChild(o),this.form=o,this.area=i}function c(){l(),t()}function l(){if(n.iframe)try{n.form.removeChild(n.iframe)}catch(e){n.onError("jsonp polling iframe removal error",e)}try{var e='<iframe src="javascript:0" name="'+n.iframeId+'">';r=document.createElement(e)}catch(e){(r=document.createElement("iframe")).name=n.iframeId,r.src="javascript:0"}r.id=n.iframeId,n.form.appendChild(r),n.iframe=r}this.form.action=this.uri(),l(),e=e.replace(s,"\\\n"),this.area.value=e.replace(a,"\\n");try{this.form.submit()}catch(e){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===n.iframe.readyState&&c()}:this.iframe.onload=c}}).call(this,n(0))},function(e,t,n){(function(t){var n=t.BlobBuilder||t.WebKitBlobBuilder||t.MSBlobBuilder||t.MozBlobBuilder,r=function(){try{return 2===new Blob(["hi"]).size}catch(e){return!1}}(),o=r&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(e){return!1}}(),i=n&&n.prototype.append&&n.prototype.getBlob;function a(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.buffer instanceof ArrayBuffer){var r=n.buffer;if(n.byteLength!==r.byteLength){var o=new Uint8Array(n.byteLength);o.set(new Uint8Array(r,n.byteOffset,n.byteLength)),r=o.buffer}e[t]=r}}}function s(e,t){t=t||{};var r=new n;a(e);for(var o=0;o<e.length;o++)r.append(e[o]);return t.type?r.getBlob(t.type):r.getBlob()}function u(e,t){return a(e),new Blob(e,t||{})}e.exports=r?o?t.Blob:u:i?s:void 0}).call(this,n(0))},function(e,t){!function(){"use strict";for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=new Uint8Array(256),r=0;r<e.length;r++)n[e.charCodeAt(r)]=r;t.encode=function(t){var n,r=new Uint8Array(t),o=r.length,i="";for(n=0;n<o;n+=3)i+=e[r[n]>>2],i+=e[(3&r[n])<<4|r[n+1]>>4],i+=e[(15&r[n+1])<<2|r[n+2]>>6],i+=e[63&r[n+2]];return o%3==2?i=i.substring(0,i.length-1)+"=":o%3==1&&(i=i.substring(0,i.length-2)+"=="),i},t.decode=function(e){var t,r,o,i,a,s=.75*e.length,u=e.length,c=0;"="===e[e.length-1]&&(s--,"="===e[e.length-2]&&s--);var l=new ArrayBuffer(s),f=new Uint8Array(l);for(t=0;t<u;t+=4)r=n[e.charCodeAt(t)],o=n[e.charCodeAt(t+1)],i=n[e.charCodeAt(t+2)],a=n[e.charCodeAt(t+3)],f[c++]=r<<2|o>>4,f[c++]=(15&o)<<4|i>>2,f[c++]=(3&i)<<6|63&a;return l}}()},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){(function(e,r){var o;/*! https://mths.be/utf8js v2.1.2 by @mathias */!function(i){var a="object"==typeof t&&t,s=("object"==typeof e&&e&&e.exports,"object"==typeof r&&r);s.global!==s&&s.window;var u,c,l,f=String.fromCharCode;function p(e){for(var t,n,r=[],o=0,i=e.length;o<i;)(t=e.charCodeAt(o++))>=55296&&t<=56319&&o<i?56320==(64512&(n=e.charCodeAt(o++)))?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),o--):r.push(t);return r}function d(e,t){if(e>=55296&&e<=57343){if(t)throw Error("Lone surrogate U+"+e.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function h(e,t){return f(e>>t&63|128)}function y(e,t){if(0==(4294967168&e))return f(e);var n="";return 0==(4294965248&e)?n=f(e>>6&31|192):0==(4294901760&e)?(d(e,t)||(e=65533),n=f(e>>12&15|224),n+=h(e,6)):0==(4292870144&e)&&(n=f(e>>18&7|240),n+=h(e,12),n+=h(e,6)),n+=f(63&e|128)}function m(){if(l>=c)throw Error("Invalid byte index");var e=255&u[l];if(l++,128==(192&e))return 63&e;throw Error("Invalid continuation byte")}function g(e){var t,n;if(l>c)throw Error("Invalid byte index");if(l==c)return!1;if(t=255&u[l],l++,0==(128&t))return t;if(192==(224&t)){if((n=(31&t)<<6|m())>=128)return n;throw Error("Invalid continuation byte")}if(224==(240&t)){if((n=(15&t)<<12|m()<<6|m())>=2048)return d(n,e)?n:65533;throw Error("Invalid continuation byte")}if(240==(248&t)&&(n=(7&t)<<18|m()<<12|m()<<6|m())>=65536&&n<=1114111)return n;throw Error("Invalid UTF-8 detected")}var v={version:"2.1.2",encode:function(e,t){for(var n=!1!==(t=t||{}).strict,r=p(e),o=r.length,i=-1,a="";++i<o;)a+=y(r[i],n);return a},decode:function(e,t){var n=!1!==(t=t||{}).strict;u=p(e),c=u.length,l=0;for(var r,o=[];!1!==(r=g(n));)o.push(r);return function(e){for(var t,n=e.length,r=-1,o="";++r<n;)(t=e[r])>65535&&(o+=f((t-=65536)>>>10&1023|55296),t=56320|1023&t),o+=f(t);return o}(o)}};void 0===(o=function(){return v}.call(t,n,t,e))||(e.exports=o)}()}).call(this,n(59)(e),n(0))},function(e,t){function n(){}e.exports=function(e,t,r){var o=!1;return r=r||n,i.count=e,0===e?t():i;function i(e,n){if(i.count<=0)throw new Error("after called too many times");--i.count,e?(o=!0,t(e),t=r):0!==i.count||o||t(null,n)}}},function(e,t){e.exports=function(e,t,n){var r=e.byteLength;if(t=t||0,n=n||r,e.slice)return e.slice(t,n);if(t<0&&(t+=r),n<0&&(n+=r),n>r&&(n=r),t>=r||t>=n||0===r)return new ArrayBuffer(0);for(var o=new Uint8Array(e),i=new Uint8Array(n-t),a=t,s=0;a<n;a++,s++)i[s]=o[a];return i.buffer}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){t.read=function(e,t,n,r,o){var i,a,s=8*o-r-1,u=(1<<s)-1,c=u>>1,l=-7,f=n?o-1:0,p=n?-1:1,d=e[t+f];for(f+=p,i=d&(1<<-l)-1,d>>=-l,l+=s;l>0;i=256*i+e[t+f],f+=p,l-=8);for(a=i&(1<<-l)-1,i>>=-l,l+=r;l>0;a=256*a+e[t+f],f+=p,l-=8);if(0===i)i=1-c;else{if(i===u)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,r),i-=c}return(d?-1:1)*a*Math.pow(2,i-r)},t.write=function(e,t,n,r,o,i){var a,s,u,c=8*i-o-1,l=(1<<c)-1,f=l>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:i-1,h=r?1:-1,y=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=l):(a=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-a))<1&&(a--,u*=2),(t+=a+f>=1?p/u:p*Math.pow(2,1-f))*u>=2&&(a++,u/=2),a+f>=l?(s=0,a=l):a+f>=1?(s=(t*u-1)*Math.pow(2,o),a+=f):(s=t*Math.pow(2,f-1)*Math.pow(2,o),a=0));o>=8;e[n+d]=255&s,d+=h,s/=256,o-=8);for(a=a<<o|s,c+=o;c>0;e[n+d]=255&a,d+=h,a/=256,c-=8);e[n+d-h]|=128*y}},function(e,t,n){"use strict";t.byteLength=function(e){var t=c(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){for(var t,n=c(e),r=n[0],a=n[1],s=new i(function(e,t,n){return 3*(t+n)/4-n}(0,r,a)),u=0,l=a>0?r-4:r,f=0;f<l;f+=4)t=o[e.charCodeAt(f)]<<18|o[e.charCodeAt(f+1)]<<12|o[e.charCodeAt(f+2)]<<6|o[e.charCodeAt(f+3)],s[u++]=t>>16&255,s[u++]=t>>8&255,s[u++]=255&t;2===a&&(t=o[e.charCodeAt(f)]<<2|o[e.charCodeAt(f+1)]>>4,s[u++]=255&t);1===a&&(t=o[e.charCodeAt(f)]<<10|o[e.charCodeAt(f+1)]<<4|o[e.charCodeAt(f+2)]>>2,s[u++]=t>>8&255,s[u++]=255&t);return s},t.fromByteArray=function(e){for(var t,n=e.length,o=n%3,i=[],a=0,s=n-o;a<s;a+=16383)i.push(l(e,a,a+16383>s?s:a+16383));1===o?(t=e[n-1],i.push(r[t>>2]+r[t<<4&63]+"==")):2===o&&(t=(e[n-2]<<8)+e[n-1],i.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return i.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=a.length;s<u;++s)r[s]=a[s],o[a.charCodeAt(s)]=s;function c(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function l(e,t,n){for(var o,i,a=[],s=t;s<n;s+=3)o=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),a.push(r[(i=o)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return a.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(66),o=n(65),i=n(64);function a(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return f(this,e)}return c(this,e,t,n)}function c(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=p(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|h(t,n),o=(e=s(e,r)).write(t,n);o!==r&&(e=e.slice(0,o));return e}(e,t,n):function(e,t){if(u.isBuffer(t)){var n=0|d(t.length);return 0===(e=s(e,n)).length?e:(t.copy(e,0,0,n),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(r=t.length)!=r?s(e,0):p(e,t);if("Buffer"===t.type&&i(t.data))return p(e,t.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function l(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function f(e,t){if(l(t),e=s(e,t<0?0:0|d(t)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function p(e,t){var n=t.length<0?0:0|d(t.length);e=s(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function d(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function h(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return F(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return z(e).length;default:if(r)return F(e).length;t=(""+t).toLowerCase(),r=!0}}function y(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function m(e,t,n,r,o){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof t&&(t=u.from(t,r)),u.isBuffer(t))return 0===t.length?-1:g(e,t,n,r,o);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):g(e,[t],n,r,o);throw new TypeError("val must be string, number or Buffer")}function g(e,t,n,r,o){var i,a=1,s=e.length,u=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;a=2,s/=2,u/=2,n/=2}function c(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(o){var l=-1;for(i=n;i<s;i++)if(c(e,i)===c(t,-1===l?0:i-l)){if(-1===l&&(l=i),i-l+1===u)return l*a}else-1!==l&&(i-=i-l),l=-1}else for(n+u>s&&(n=s-u),i=n;i>=0;i--){for(var f=!0,p=0;p<u;p++)if(c(e,i+p)!==c(t,p)){f=!1;break}if(f)return i}return-1}function v(e,t,n,r){n=Number(n)||0;var o=e.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=t.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var a=0;a<r;++a){var s=parseInt(t.substr(2*a,2),16);if(isNaN(s))return a;e[n+a]=s}return a}function b(e,t,n,r){return q(F(t,e.length-n),e,n,r)}function w(e,t,n,r){return q(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function E(e,t,n,r){return w(e,t,n,r)}function _(e,t,n,r){return q(z(t),e,n,r)}function C(e,t,n,r){return q(function(e,t){for(var n,r,o,i=[],a=0;a<e.length&&!((t-=2)<0);++a)n=e.charCodeAt(a),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(t,e.length-n),e,n,r)}function S(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function k(e,t,n){n=Math.min(e.length,n);for(var r=[],o=t;o<n;){var i,a,s,u,c=e[o],l=null,f=c>239?4:c>223?3:c>191?2:1;if(o+f<=n)switch(f){case 1:c<128&&(l=c);break;case 2:128==(192&(i=e[o+1]))&&(u=(31&c)<<6|63&i)>127&&(l=u);break;case 3:i=e[o+1],a=e[o+2],128==(192&i)&&128==(192&a)&&(u=(15&c)<<12|(63&i)<<6|63&a)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:i=e[o+1],a=e[o+2],s=e[o+3],128==(192&i)&&128==(192&a)&&128==(192&s)&&(u=(15&c)<<18|(63&i)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(l=u)}null===l?(l=65533,f=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),o+=f}return function(e){var t=e.length;if(t<=x)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=x));return n}(r)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=a(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,n){return c(null,e,t,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,n){return function(e,t,n,r){return l(t),t<=0?s(e,t):void 0!==n?"string"==typeof r?s(e,t).fill(n,r):s(e,t).fill(n):s(e,t)}(null,e,t,n)},u.allocUnsafe=function(e){return f(null,e)},u.allocUnsafeSlow=function(e){return f(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,o=0,i=Math.min(n,r);o<i;++o)if(e[o]!==t[o]){n=e[o],r=t[o];break}return n<r?-1:r<n?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!i(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=u.allocUnsafe(t),o=0;for(n=0;n<e.length;++n){var a=e[n];if(!u.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,o),o+=a.length}return r},u.byteLength=h,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)y(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)y(this,t,t+3),y(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)y(this,t,t+7),y(this,t+1,t+6),y(this,t+2,t+5),y(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?k(this,0,e):function(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return P(this,t,n);case"utf8":case"utf-8":return k(this,t,n);case"ascii":return T(this,t,n);case"latin1":case"binary":return O(this,t,n);case"base64":return S(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,n,r,o){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),t<0||n>e.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&t>=n)return 0;if(r>=o)return-1;if(t>=n)return 1;if(t>>>=0,n>>>=0,r>>>=0,o>>>=0,this===e)return 0;for(var i=o-r,a=n-t,s=Math.min(i,a),c=this.slice(r,o),l=e.slice(t,n),f=0;f<s;++f)if(c[f]!==l[f]){i=c[f],a=l[f];break}return i<a?-1:a<i?1:0},u.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},u.prototype.indexOf=function(e,t,n){return m(this,e,t,n,!0)},u.prototype.lastIndexOf=function(e,t,n){return m(this,e,t,n,!1)},u.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-t;if((void 0===n||n>o)&&(n=o),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return v(this,e,t,n);case"utf8":case"utf-8":return b(this,e,t,n);case"ascii":return w(this,e,t,n);case"latin1":case"binary":return E(this,e,t,n);case"base64":return _(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return C(this,e,t,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var x=4096;function T(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(127&e[o]);return r}function O(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(e[o]);return r}function P(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=t;i<n;++i)o+=B(e[i]);return o}function R(e,t,n){for(var r=e.slice(t,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function A(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function N(e,t,n,r,o,i){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<i)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function U(e,t,n,r){t<0&&(t=65535+t+1);for(var o=0,i=Math.min(e.length-n,2);o<i;++o)e[n+o]=(t&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function I(e,t,n,r){t<0&&(t=4294967295+t+1);for(var o=0,i=Math.min(e.length-n,4);o<i;++o)e[n+o]=t>>>8*(r?o:3-o)&255}function M(e,t,n,r,o,i){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function D(e,t,n,r,i){return i||M(e,0,n,4),o.write(e,t,n,r,23,4),n+4}function L(e,t,n,r,i){return i||M(e,0,n,8),o.write(e,t,n,r,52,8),n+8}u.prototype.slice=function(e,t){var n,r=this.length;if(e=~~e,t=void 0===t?r:~~t,e<0?(e+=r)<0&&(e=0):e>r&&(e=r),t<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=u.prototype;else{var o=t-e;n=new u(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+e]}return n},u.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||A(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r},u.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||A(e,t,this.length);for(var r=this[e+--t],o=1;t>0&&(o*=256);)r+=this[e+--t]*o;return r},u.prototype.readUInt8=function(e,t){return t||A(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||A(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||A(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||A(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||A(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||A(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*t)),r},u.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||A(e,t,this.length);for(var r=t,o=1,i=this[e+--r];r>0&&(o*=256);)i+=this[e+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},u.prototype.readInt8=function(e,t){return t||A(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||A(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(e,t){t||A(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(e,t){return t||A(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||A(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||A(e,4,this.length),o.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||A(e,4,this.length),o.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||A(e,8,this.length),o.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||A(e,8,this.length),o.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||N(this,e,t,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[t]=255&e;++i<n&&(o*=256);)this[t+i]=e/o&255;return t+n},u.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||N(this,e,t,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+n},u.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):U(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):U(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):I(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):I(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);N(this,e,t,n,o-1,-o)}var i=0,a=1,s=0;for(this[t]=255&e;++i<n&&(a*=256);)e<0&&0===s&&0!==this[t+i-1]&&(s=1),this[t+i]=(e/a>>0)-s&255;return t+n},u.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);N(this,e,t,n,o-1,-o)}var i=n-1,a=1,s=0;for(this[t+i]=255&e;--i>=0&&(a*=256);)e<0&&0===s&&0!==this[t+i+1]&&(s=1),this[t+i]=(e/a>>0)-s&255;return t+n},u.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):U(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):U(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):I(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):I(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,n){return D(this,e,t,!0,n)},u.prototype.writeFloatBE=function(e,t,n){return D(this,e,t,!1,n)},u.prototype.writeDoubleLE=function(e,t,n){return L(this,e,t,!0,n)},u.prototype.writeDoubleBE=function(e,t,n){return L(this,e,t,!1,n)},u.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var o,i=r-n;if(this===e&&n<t&&t<r)for(o=i-1;o>=0;--o)e[o+t]=this[o+n];else if(i<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)e[o+t]=this[o+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+i),t);return i},u.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var i;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(i=t;i<n;++i)this[i]=e;else{var a=u.isBuffer(e)?e:F(new u(e,r).toString()),s=a.length;for(i=0;i<n-t;++i)this[i+t]=a[i%s]}return this};var j=/[^+\/0-9A-Za-z-_]/g;function B(e){return e<16?"0"+e.toString(16):e.toString(16)}function F(e,t){var n;t=t||1/0;for(var r=e.length,o=null,i=[],a=0;a<r;++a){if((n=e.charCodeAt(a))>55295&&n<57344){if(!o){if(n>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(a+1===r){(t-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(t-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((t-=1)<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function z(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(j,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function q(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}}).call(this,n(0))},function(e,t){e.exports=Object.keys||function(e){var t=[],n=Object.prototype.hasOwnProperty;for(var r in e)n.call(e,r)&&t.push(r);return t}},function(e,t,n){(function(t){var r=n(14),o=n(26),i=n(6),a=n(9),s=n(3)("engine.io-client:polling-xhr");function u(){}function c(e){if(o.call(this,e),this.requestTimeout=e.requestTimeout,this.extraHeaders=e.extraHeaders,t.location){var n="https:"===location.protocol,r=location.port;r||(r=n?443:80),this.xd=e.hostname!==t.location.hostname||r!==e.port,this.xs=e.secure!==n}}function l(e){this.method=e.method||"GET",this.uri=e.uri,this.xd=!!e.xd,this.xs=!!e.xs,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.agent=e.agent,this.isBinary=e.isBinary,this.supportsBinary=e.supportsBinary,this.enablesXDR=e.enablesXDR,this.requestTimeout=e.requestTimeout,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.extraHeaders=e.extraHeaders,this.create()}function f(){for(var e in l.requests)l.requests.hasOwnProperty(e)&&l.requests[e].abort()}e.exports=c,e.exports.Request=l,a(c,o),c.prototype.supportsBinary=!0,c.prototype.request=function(e){return(e=e||{}).uri=this.uri(),e.xd=this.xd,e.xs=this.xs,e.agent=this.agent||!1,e.supportsBinary=this.supportsBinary,e.enablesXDR=this.enablesXDR,e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized,e.requestTimeout=this.requestTimeout,e.extraHeaders=this.extraHeaders,new l(e)},c.prototype.doWrite=function(e,t){var n="string"!=typeof e&&void 0!==e,r=this.request({method:"POST",data:e,isBinary:n}),o=this;r.on("success",t),r.on("error",function(e){o.onError("xhr post error",e)}),this.sendXhr=r},c.prototype.doPoll=function(){s("xhr poll");var e=this.request(),t=this;e.on("data",function(e){t.onData(e)}),e.on("error",function(e){t.onError("xhr poll error",e)}),this.pollXhr=e},i(l.prototype),l.prototype.create=function(){var e={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized;var n=this.xhr=new r(e),o=this;try{s("xhr open %s: %s",this.method,this.uri),n.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var i in n.setDisableHeaderCheck&&n.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(i)&&n.setRequestHeader(i,this.extraHeaders[i])}catch(e){}if("POST"===this.method)try{this.isBinary?n.setRequestHeader("Content-type","application/octet-stream"):n.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{n.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in n&&(n.withCredentials=!0),this.requestTimeout&&(n.timeout=this.requestTimeout),this.hasXDR()?(n.onload=function(){o.onLoad()},n.onerror=function(){o.onError(n.responseText)}):n.onreadystatechange=function(){if(2===n.readyState)try{var e=n.getResponseHeader("Content-Type");o.supportsBinary&&"application/octet-stream"===e&&(n.responseType="arraybuffer")}catch(e){}4===n.readyState&&(200===n.status||1223===n.status?o.onLoad():setTimeout(function(){o.onError(n.status)},0))},s("xhr data %s",this.data),n.send(this.data)}catch(e){return void setTimeout(function(){o.onError(e)},0)}t.document&&(this.index=l.requestsCount++,l.requests[this.index]=this)},l.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},l.prototype.onData=function(e){this.emit("data",e),this.onSuccess()},l.prototype.onError=function(e){this.emit("error",e),this.cleanup(!0)},l.prototype.cleanup=function(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=u:this.xhr.onreadystatechange=u,e)try{this.xhr.abort()}catch(e){}t.document&&delete l.requests[this.index],this.xhr=null}},l.prototype.onLoad=function(){var e;try{var t;try{t=this.xhr.getResponseHeader("Content-Type")}catch(e){}e="application/octet-stream"===t&&this.xhr.response||this.xhr.responseText}catch(e){this.onError(e)}null!=e&&this.onData(e)},l.prototype.hasXDR=function(){return void 0!==t.XDomainRequest&&!this.xs&&this.enablesXDR},l.prototype.abort=function(){this.cleanup()},l.requestsCount=0,l.requests={},t.document&&(t.attachEvent?t.attachEvent("onunload",f):t.addEventListener&&t.addEventListener("beforeunload",f,!1))}).call(this,n(0))},function(e,t){try{e.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){e.exports=!1}},function(e,t,n){(function(t){var r=n(27),o=n(6),i=n(3)("engine.io-client:socket"),a=n(23),s=n(5),u=n(31),c=n(10);function l(e,n){if(!(this instanceof l))return new l(e,n);n=n||{},e&&"object"==typeof e&&(n=e,e=null),e?(e=u(e),n.hostname=e.host,n.secure="https"===e.protocol||"wss"===e.protocol,n.port=e.port,e.query&&(n.query=e.query)):n.host&&(n.hostname=u(n.host).host),this.secure=null!=n.secure?n.secure:t.location&&"https:"===location.protocol,n.hostname&&!n.port&&(n.port=this.secure?"443":"80"),this.agent=n.agent||!1,this.hostname=n.hostname||(t.location?location.hostname:"localhost"),this.port=n.port||(t.location&&location.port?location.port:this.secure?443:80),this.query=n.query||{},"string"==typeof this.query&&(this.query=c.decode(this.query)),this.upgrade=!1!==n.upgrade,this.path=(n.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!n.forceJSONP,this.jsonp=!1!==n.jsonp,this.forceBase64=!!n.forceBase64,this.enablesXDR=!!n.enablesXDR,this.timestampParam=n.timestampParam||"t",this.timestampRequests=n.timestampRequests,this.transports=n.transports||["polling","websocket"],this.transportOptions=n.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=n.policyPort||843,this.rememberUpgrade=n.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=n.onlyBinaryUpgrades,this.perMessageDeflate=!1!==n.perMessageDeflate&&(n.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=n.pfx||null,this.key=n.key||null,this.passphrase=n.passphrase||null,this.cert=n.cert||null,this.ca=n.ca||null,this.ciphers=n.ciphers||null,this.rejectUnauthorized=void 0===n.rejectUnauthorized||n.rejectUnauthorized,this.forceNode=!!n.forceNode;var r="object"==typeof t&&t;r.global===r&&(n.extraHeaders&&Object.keys(n.extraHeaders).length>0&&(this.extraHeaders=n.extraHeaders),n.localAddress&&(this.localAddress=n.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}e.exports=l,l.priorWebsocketSuccess=!1,o(l.prototype),l.protocol=s.protocol,l.Socket=l,l.Transport=n(13),l.transports=n(27),l.parser=n(5),l.prototype.createTransport=function(e){i('creating transport "%s"',e);var t=function(e){var t={};for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}(this.query);t.EIO=s.protocol,t.transport=e;var n=this.transportOptions[e]||{};return this.id&&(t.sid=this.id),new r[e]({query:t,socket:this,agent:n.agent||this.agent,hostname:n.hostname||this.hostname,port:n.port||this.port,secure:n.secure||this.secure,path:n.path||this.path,forceJSONP:n.forceJSONP||this.forceJSONP,jsonp:n.jsonp||this.jsonp,forceBase64:n.forceBase64||this.forceBase64,enablesXDR:n.enablesXDR||this.enablesXDR,timestampRequests:n.timestampRequests||this.timestampRequests,timestampParam:n.timestampParam||this.timestampParam,policyPort:n.policyPort||this.policyPort,pfx:n.pfx||this.pfx,key:n.key||this.key,passphrase:n.passphrase||this.passphrase,cert:n.cert||this.cert,ca:n.ca||this.ca,ciphers:n.ciphers||this.ciphers,rejectUnauthorized:n.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:n.perMessageDeflate||this.perMessageDeflate,extraHeaders:n.extraHeaders||this.extraHeaders,forceNode:n.forceNode||this.forceNode,localAddress:n.localAddress||this.localAddress,requestTimeout:n.requestTimeout||this.requestTimeout,protocols:n.protocols||void 0})},l.prototype.open=function(){var e;if(this.rememberUpgrade&&l.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length){var t=this;return void setTimeout(function(){t.emit("error","No transports available")},0)}e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return this.transports.shift(),void this.open()}e.open(),this.setTransport(e)},l.prototype.setTransport=function(e){i("setting transport %s",e.name);var t=this;this.transport&&(i("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",function(){t.onDrain()}).on("packet",function(e){t.onPacket(e)}).on("error",function(e){t.onError(e)}).on("close",function(){t.onClose("transport close")})},l.prototype.probe=function(e){i('probing transport "%s"',e);var t=this.createTransport(e,{probe:1}),n=!1,r=this;function o(){if(r.onlyBinaryUpgrades){var o=!this.supportsBinary&&r.transport.supportsBinary;n=n||o}n||(i('probe transport "%s" opened',e),t.send([{type:"ping",data:"probe"}]),t.once("packet",function(o){if(!n)if("pong"===o.type&&"probe"===o.data){if(i('probe transport "%s" pong',e),r.upgrading=!0,r.emit("upgrading",t),!t)return;l.priorWebsocketSuccess="websocket"===t.name,i('pausing current transport "%s"',r.transport.name),r.transport.pause(function(){n||"closed"!==r.readyState&&(i("changing transport and sending upgrade packet"),p(),r.setTransport(t),t.send([{type:"upgrade"}]),r.emit("upgrade",t),t=null,r.upgrading=!1,r.flush())})}else{i('probe transport "%s" failed',e);var a=new Error("probe error");a.transport=t.name,r.emit("upgradeError",a)}}))}function a(){n||(n=!0,p(),t.close(),t=null)}function s(n){var o=new Error("probe error: "+n);o.transport=t.name,a(),i('probe transport "%s" failed because of error: %s',e,n),r.emit("upgradeError",o)}function u(){s("transport closed")}function c(){s("socket closed")}function f(e){t&&e.name!==t.name&&(i('"%s" works - aborting "%s"',e.name,t.name),a())}function p(){t.removeListener("open",o),t.removeListener("error",s),t.removeListener("close",u),r.removeListener("close",c),r.removeListener("upgrading",f)}l.priorWebsocketSuccess=!1,t.once("open",o),t.once("error",s),t.once("close",u),this.once("close",c),this.once("upgrading",f),t.open()},l.prototype.onOpen=function(){if(i("socket open"),this.readyState="open",l.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){i("starting upgrade probes");for(var e=0,t=this.upgrades.length;e<t;e++)this.probe(this.upgrades[e])}},l.prototype.onPacket=function(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(i('socket receive: type "%s", data "%s"',e.type,e.data),this.emit("packet",e),this.emit("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emit("data",e.data),this.emit("message",e.data)}else i('packet received with socket readyState "%s"',this.readyState)},l.prototype.onHandshake=function(e){this.emit("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},l.prototype.onHeartbeat=function(e){clearTimeout(this.pingTimeoutTimer);var t=this;t.pingTimeoutTimer=setTimeout(function(){"closed"!==t.readyState&&t.onClose("ping timeout")},e||t.pingInterval+t.pingTimeout)},l.prototype.setPing=function(){var e=this;clearTimeout(e.pingIntervalTimer),e.pingIntervalTimer=setTimeout(function(){i("writing ping packet - expecting pong within %sms",e.pingTimeout),e.ping(),e.onHeartbeat(e.pingTimeout)},e.pingInterval)},l.prototype.ping=function(){var e=this;this.sendPacket("ping",function(){e.emit("ping")})},l.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},l.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(i("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},l.prototype.write=l.prototype.send=function(e,t,n){return this.sendPacket("message",e,t,n),this},l.prototype.sendPacket=function(e,t,n,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof n&&(r=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){(n=n||{}).compress=!1!==n.compress;var o={type:e,data:t,options:n};this.emit("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}},l.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var e=this;this.writeBuffer.length?this.once("drain",function(){this.upgrading?r():t()}):this.upgrading?r():t()}function t(){e.onClose("forced close"),i("socket closing - telling transport to close"),e.transport.close()}function n(){e.removeListener("upgrade",n),e.removeListener("upgradeError",n),t()}function r(){e.once("upgrade",n),e.once("upgradeError",n)}return this},l.prototype.onError=function(e){i("socket error %j",e),l.priorWebsocketSuccess=!1,this.emit("error",e),this.onClose("transport error",e)},l.prototype.onClose=function(e,t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){i('socket close with reason: "%s"',e);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",e,t),this.writeBuffer=[],this.prevBufferLen=0}},l.prototype.filterUpgrades=function(e){for(var t=[],n=0,r=e.length;n<r;n++)~a(this.transports,e[n])&&t.push(e[n]);return t}}).call(this,n(0))},function(e,t,n){e.exports=n(71),e.exports.parser=n(5)},function(e,t,n){(function(e){var r=n(30),o=n(29),i=Object.prototype.toString,a="function"==typeof e.Blob||"[object BlobConstructor]"===i.call(e.Blob),s="function"==typeof e.File||"[object FileConstructor]"===i.call(e.File);t.deconstructPacket=function(e){var t=[],n=e.data,i=e;return i.data=function e(t,n){if(!t)return t;if(o(t)){var i={_placeholder:!0,num:n.length};return n.push(t),i}if(r(t)){for(var a=new Array(t.length),s=0;s<t.length;s++)a[s]=e(t[s],n);return a}if("object"==typeof t&&!(t instanceof Date)){var a={};for(var u in t)a[u]=e(t[u],n);return a}return t}(n,t),i.attachments=t.length,{packet:i,buffers:t}},t.reconstructPacket=function(e,t){return e.data=function e(t,n){if(!t)return t;if(t&&t._placeholder)return n[t.num];if(r(t))for(var o=0;o<t.length;o++)t[o]=e(t[o],n);else if("object"==typeof t)for(var i in t)t[i]=e(t[i],n);return t}(e.data,t),e.attachments=void 0,e},t.removeBlobs=function(e,t){var n=0,i=e;!function e(u,c,l){if(!u)return u;if(a&&u instanceof Blob||s&&u instanceof File){n++;var f=new FileReader;f.onload=function(){l?l[c]=this.result:i=this.result,--n||t(i)},f.readAsArrayBuffer(u)}else if(r(u))for(var p=0;p<u.length;p++)e(u[p],p,u);else if("object"==typeof u&&!o(u))for(var d in u)e(u[d],d,u)}(i),n||t(i)}}).call(this,n(0))},function(e,t){var n=1e3,r=60*n,o=60*r,i=24*o,a=365.25*i;function s(e,t,n){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+n:Math.ceil(e/t)+" "+n+"s"}e.exports=function(e,t){t=t||{};var u,c=typeof e;if("string"===c&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var s=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return s*a;case"days":case"day":case"d":return s*i;case"hours":case"hour":case"hrs":case"hr":case"h":return s*o;case"minutes":case"minute":case"mins":case"min":case"m":return s*r;case"seconds":case"second":case"secs":case"sec":case"s":return s*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}(e);if("number"===c&&!1===isNaN(e))return t.long?s(u=e,i,"day")||s(u,o,"hour")||s(u,r,"minute")||s(u,n,"second")||u+" ms":function(e){if(e>=i)return Math.round(e/i)+"d";if(e>=o)return Math.round(e/o)+"h";if(e>=r)return Math.round(e/r)+"m";if(e>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){function r(e){var n;function r(){if(r.enabled){var e=r,o=+new Date,i=o-(n||o);e.diff=i,e.prev=n,e.curr=o,n=o;for(var a=new Array(arguments.length),s=0;s<a.length;s++)a[s]=arguments[s];a[0]=t.coerce(a[0]),"string"!=typeof a[0]&&a.unshift("%O");var u=0;a[0]=a[0].replace(/%([a-zA-Z%])/g,function(n,r){if("%%"===n)return n;u++;var o=t.formatters[r];if("function"==typeof o){var i=a[u];n=o.call(e,i),a.splice(u,1),u--}return n}),t.formatArgs.call(e,a),(r.log||t.log||console.log.bind(console)).apply(e,a)}}return r.namespace=e,r.enabled=t.enabled(e),r.useColors=t.useColors(),r.color=function(e){var n,r=0;for(n in e)r=(r<<5)-r+e.charCodeAt(n),r|=0;return t.colors[Math.abs(r)%t.colors.length]}(e),r.destroy=o,"function"==typeof t.init&&t.init(r),t.instances.push(r),r}function o(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var n;t.save(e),t.names=[],t.skips=[];var r=("string"==typeof e?e:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(n=0;n<t.instances.length;n++){var i=t.instances[n];i.enabled=t.enabled(i.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(74),t.instances=[],t.names=[],t.skips=[],t.formatters={}},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,c=[],l=!1,f=-1;function p(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&d())}function d(){if(!l){var e=s(p);l=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function y(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||l||s(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){(function(t){var r=n(31),o=n(3)("socket.io-client:url");e.exports=function(e,n){var i=e;n=n||t.location,null==e&&(e=n.protocol+"//"+n.host);"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?n.protocol+e:n.host+e),/^(https?|wss?):\/\//.test(e)||(o("protocol-less url %s",e),e=void 0!==n?n.protocol+"//"+e:"https://"+e),o("parse %s",e),i=r(e));i.port||(/^(http|ws)$/.test(i.protocol)?i.port="80":/^(http|ws)s$/.test(i.protocol)&&(i.port="443"));i.path=i.path||"/";var a=-1!==i.host.indexOf(":")?"["+i.host+"]":i.host;return i.id=i.protocol+"://"+a+":"+i.port,i.href=i.protocol+"://"+a+(n&&n.port===i.port?"":":"+i.port),i}}).call(this,n(0))},function(e,t,n){var r=n(77),o=n(15),i=n(28),a=n(3)("socket.io-client");e.exports=t=u;var s=t.managers={};function u(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,o=r(e),u=o.source,c=o.id,l=o.path,f=s[c]&&l in s[c].nsps;return t.forceNew||t["force new connection"]||!1===t.multiplex||f?(a("ignoring socket cache for %s",u),n=i(u,t)):(s[c]||(a("new io instance for %s",u),s[c]=i(u,t)),n=s[c]),o.query&&!t.query&&(t.query=o.query),n.socket(o.path,t)}t.protocol=o.protocol,t.connect=u,t.Manager=n(28),t.Socket=n(22)},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){(e.exports=n(8)(!1)).push([e.i,".rooms-list-item {\n  background-color: #f7f7f9;\n  display: flex;\n  flex-direction: row;\n  justify-content: start;\n  align-items: center;\n  cursor: pointer;\n  border-bottom: 1px solid #d7d7d7; }\n  .rooms-list-item img {\n    width: 50px;\n    height: 50px;\n    border-radius: 50px;\n    flex-grow: 0;\n    margin: 15px; }\n  .rooms-list-item div {\n    display: block; }\n    .rooms-list-item div h4 {\n      font-size: 14px;\n      color: #9f9f9d;\n      margin-top: 10px;\n      padding: 5px; }\n      .rooms-list-item div h4 strong {\n        color: #4d4d4e; }\n    .rooms-list-item div p {\n      font-size: 12px;\n      color: #a4a8a7;\n      padding: 5px; }\n    .rooms-list-item div .small-date {\n      font-size: 12px;\n      padding-bottom: 10px; }\n\n.rooms-list-item:hover {\n  opacity: 0.8; }\n\n.unread {\n  background-color: #c8c8cd; }\n  .unread div p {\n    color: #8e8e82; }\n",""])},function(e,t,n){var r=n(80);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(7)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(1),a=(r=i)&&r.__esModule?r:{default:r},s=n(4);n(81);var u=n(11);var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleCreateRoom=function(e){e.preventDefault(),n.props.showCreateRoomPanel()},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.PureComponent),o(t,[{key:"render",value:function(){var e=this.props,t=e.roomsList,n=e.requestRoomData;return t.length?a.default.createElement("div",null,a.default.createElement("a",{href:"#",onClick:this.handleCreateRoom},"Create room"),t.map(function(e){return a.default.createElement("div",{className:"rooms-list-item",onClick:function(){return n(e._id)}},a.default.createElement("img",{src:"https://picsum.photos/50/50/?random"}),a.default.createElement("div",null,a.default.createElement("h4",null,a.default.createElement("strong",null,e.title)),a.default.createElement("p",null,e.lastMessage.username,": ",e.lastMessage.content),a.default.createElement("p",{className:"small-date"},e.lastMessage.date)))})):a.default.createElement("div",null,a.default.createElement("p",null,"No rooms yet"),a.default.createElement("a",{href:"#",onClick:this.handleCreateRoom},"Create room"))}}]),t}();t.default=(0,s.connect)(function(e){return{roomsList:e.roomsList}},function(e){return{showCreateRoomPanel:function(){return e({type:u.SHOW_CREATE_ROOM_PANEL})},requestRoomData:function(t){return e((0,u.requestRoomData)(t))}}})(c)},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=n(16),o=n(17),i=n(84);e.exports=function(){function e(e,t,n,r,a,s){s!==i&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=d(n(1)),i=n(4),a=d(n(82)),s=d(n(51)),u=d(n(48)),c=d(n(47));n(44);var l=d(n(32)),f=n(11),p=d(n(42));function d(e){return e&&e.__esModule?e:{default:e}}var h=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"componentDidMount",value:function(){var e=this.props,t=e.requestRoomsList,n=e.receiveRoomsList,r=e.receiveUsersList,o=e.receiveMessage,i=e.currentUser;l.default.on("RECEIVE_ROOMS_LIST",function(e){n(JSON.parse(e))}),l.default.on("RECEIVE_USERS_LIST",function(e){r(JSON.parse(e))}),l.default.on("RECEIVE_MESSAGE",function(e){o(JSON.parse(e))}),t(i.id)}},{key:"render",value:function(){var e=this.props.isCreateRoomPanelOpen;return o.default.createElement("div",{id:"app-container"},e?o.default.createElement(p.default,null):null,o.default.createElement("h1",null,"Chat app"),o.default.createElement("div",{id:"body-container"},o.default.createElement("div",{id:"left-container"},o.default.createElement(s.default,null),o.default.createElement(a.default,null)),o.default.createElement("div",{id:"right-container"},o.default.createElement("div",{id:"conversation-container"},o.default.createElement(u.default,null)),o.default.createElement("div",{id:"input-container"},o.default.createElement(c.default,null)))))}}]),t}();t.default=(0,i.connect)(function(e){return{currentUser:e.currentUser,isCreateRoomPanelOpen:e.isCreateRoomPanelOpen}},function(e){return{requestRoomsList:function(t){return e((0,f.requestRoomsList)(t))},receiveRoomsList:function(t){return e((0,f.receiveRoomsList)(t))},receiveUsersList:function(t){return e((0,f.receiveUsersList)(t))},receiveMessage:function(t){return e((0,f.receiveMessage)(t))}}})(h)},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";var r=n(87);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";var r=n(88);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(var a=0;a<n.length;a++)if(!r.call(t,n[a])||!o(e[n[a]],t[n[a]]))return!1;return!0}},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";
/** @license React v16.4.0
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(17),o=n(1),i=n(92),a=n(34),s=n(16),u=n(91),c=n(90),l=n(89),f=n(33);function p(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);r(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}o||p("227");var d={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,i,a,s,u){(function(e,t,n,r,o,i,a,s,u){this._hasCaughtError=!1,this._caughtError=null;var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(d,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,i,a,s,u){if(d.invokeGuardedCallback.apply(this,arguments),d.hasCaughtError()){var c=d.clearCaughtError();d._hasRethrowError||(d._hasRethrowError=!0,d._rethrowError=c)}},rethrowCaughtError:function(){return function(){if(d._hasRethrowError){var e=d._rethrowError;throw d._rethrowError=null,d._hasRethrowError=!1,e}}.apply(d,arguments)},hasCaughtError:function(){return d._hasCaughtError},clearCaughtError:function(){if(d._hasCaughtError){var e=d._caughtError;return d._caughtError=null,d._hasCaughtError=!1,e}p("198")}};var h=null,y={};function m(){if(h)for(var e in y){var t=y[e],n=h.indexOf(e);if(-1<n||p("96",e),!v[n])for(var r in t.extractEvents||p("97",e),v[n]=t,n=t.eventTypes){var o=void 0,i=n[r],a=t,s=r;b.hasOwnProperty(s)&&p("99",s),b[s]=i;var u=i.phasedRegistrationNames;if(u){for(o in u)u.hasOwnProperty(o)&&g(u[o],a,s);o=!0}else i.registrationName?(g(i.registrationName,a,s),o=!0):o=!1;o||p("98",r,e)}}}function g(e,t,n){w[e]&&p("100",e),w[e]=t,E[e]=t.eventTypes[n].dependencies}var v=[],b={},w={},E={};function _(e){h&&p("101"),h=Array.prototype.slice.call(e),m()}function C(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];y.hasOwnProperty(t)&&y[t]===r||(y[t]&&p("102",t),y[t]=r,n=!0)}n&&m()}var S={plugins:v,eventNameDispatchConfigs:b,registrationNameModules:w,registrationNameDependencies:E,possibleRegistrationNames:null,injectEventPluginOrder:_,injectEventPluginsByName:C},k=null,x=null,T=null;function O(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=T(r),d.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function P(e,t){return null==t&&p("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function R(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var A=null;function N(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)O(e,t,n[o],r[o]);else n&&O(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function U(e){return N(e,!0)}function I(e){return N(e,!1)}var M={injectEventPluginOrder:_,injectEventPluginsByName:C};function D(e,t){var n=e.stateNode;if(!n)return null;var r=k(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&p("231",t,typeof n),n)}function L(e,t){null!==e&&(A=P(A,e)),e=A,A=null,e&&(R(e,t?U:I),A&&p("95"),d.rethrowCaughtError())}function j(e,t,n,r){for(var o=null,i=0;i<v.length;i++){var a=v[i];a&&(a=a.extractEvents(e,t,n,r))&&(o=P(o,a))}L(o,!1)}var B={injection:M,getListener:D,runEventsInBatch:L,runExtractedEventsInBatch:j},F=Math.random().toString(36).slice(2),z="__reactInternalInstance$"+F,q="__reactEventHandlers$"+F;function H(e){if(e[z])return e[z];for(;!e[z];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[z]).tag||6===e.tag?e:null}function W(e){if(5===e.tag||6===e.tag)return e.stateNode;p("33")}function V(e){return e[q]||null}var Y={precacheFiberNode:function(e,t){t[z]=e},getClosestInstanceFromNode:H,getInstanceFromNode:function(e){return!(e=e[z])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:W,getFiberCurrentPropsFromNode:V,updateFiberProps:function(e,t){e[q]=t}};function Q(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function $(e,t,n){for(var r=[];e;)r.push(e),e=Q(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function G(e,t,n){(t=D(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=P(n._dispatchListeners,t),n._dispatchInstances=P(n._dispatchInstances,e))}function K(e){e&&e.dispatchConfig.phasedRegistrationNames&&$(e._targetInst,G,e)}function X(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;$(t=t?Q(t):null,G,e)}}function J(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=D(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=P(n._dispatchListeners,t),n._dispatchInstances=P(n._dispatchInstances,e))}function Z(e){e&&e.dispatchConfig.registrationName&&J(e._targetInst,null,e)}function ee(e){R(e,K)}function te(e,t,n,r){if(n&&r)e:{for(var o=n,i=r,a=0,s=o;s;s=Q(s))a++;s=0;for(var u=i;u;u=Q(u))s++;for(;0<a-s;)o=Q(o),a--;for(;0<s-a;)i=Q(i),s--;for(;a--;){if(o===i||o===i.alternate)break e;o=Q(o),i=Q(i)}o=null}else o=null;for(i=o,o=[];n&&n!==i&&(null===(a=n.alternate)||a!==i);)o.push(n),n=Q(n);for(n=[];r&&r!==i&&(null===(a=r.alternate)||a!==i);)n.push(r),r=Q(r);for(r=0;r<o.length;r++)J(o[r],"bubbled",e);for(e=n.length;0<e--;)J(n[e],"captured",t)}var ne={accumulateTwoPhaseDispatches:ee,accumulateTwoPhaseDispatchesSkipTarget:function(e){R(e,X)},accumulateEnterLeaveDispatches:te,accumulateDirectDispatches:function(e){R(e,Z)}};function re(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var oe={animationend:re("Animation","AnimationEnd"),animationiteration:re("Animation","AnimationIteration"),animationstart:re("Animation","AnimationStart"),transitionend:re("Transition","TransitionEnd")},ie={},ae={};function se(e){if(ie[e])return ie[e];if(!oe[e])return e;var t,n=oe[e];for(t in n)if(n.hasOwnProperty(t)&&t in ae)return ie[e]=n[t];return e}i.canUseDOM&&(ae=document.createElement("div").style,"AnimationEvent"in window||(delete oe.animationend.animation,delete oe.animationiteration.animation,delete oe.animationstart.animation),"TransitionEvent"in window||delete oe.transitionend.transition);var ue=se("animationend"),ce=se("animationiteration"),le=se("animationstart"),fe=se("transitionend"),pe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),de=null;function he(){return!de&&i.canUseDOM&&(de="textContent"in document.documentElement?"textContent":"innerText"),de}var ye={_root:null,_startText:null,_fallbackText:null};function me(){if(ye._fallbackText)return ye._fallbackText;var e,t,n=ye._startText,r=n.length,o=ge(),i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return ye._fallbackText=o.slice(e,1<t?1-t:void 0),ye._fallbackText}function ge(){return"value"in ye._root?ye._root.value:ye._root[he()]}var ve="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),be={type:null,target:null,currentTarget:s.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function we(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?s.thatReturnsTrue:s.thatReturnsFalse,this.isPropagationStopped=s.thatReturnsFalse,this}function Ee(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function _e(e){e instanceof this||p("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Ce(e){e.eventPool=[],e.getPooled=Ee,e.release=_e}a(we.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=s.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=s.thatReturnsTrue)},persist:function(){this.isPersistent=s.thatReturnsTrue},isPersistent:s.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<ve.length;t++)this[ve[t]]=null}}),we.Interface=be,we.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return a(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=a({},r.Interface,e),n.extend=r.extend,Ce(n),n},Ce(we);var Se=we.extend({data:null}),ke=we.extend({data:null}),xe=[9,13,27,32],Te=i.canUseDOM&&"CompositionEvent"in window,Oe=null;i.canUseDOM&&"documentMode"in document&&(Oe=document.documentMode);var Pe=i.canUseDOM&&"TextEvent"in window&&!Oe,Re=i.canUseDOM&&(!Te||Oe&&8<Oe&&11>=Oe),Ae=String.fromCharCode(32),Ne={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Ue=!1;function Ie(e,t){switch(e){case"keyup":return-1!==xe.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Me(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var De=!1;var Le={eventTypes:Ne,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(Te)e:{switch(e){case"compositionstart":o=Ne.compositionStart;break e;case"compositionend":o=Ne.compositionEnd;break e;case"compositionupdate":o=Ne.compositionUpdate;break e}o=void 0}else De?Ie(e,n)&&(o=Ne.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=Ne.compositionStart);return o?(Re&&(De||o!==Ne.compositionStart?o===Ne.compositionEnd&&De&&(i=me()):(ye._root=r,ye._startText=ge(),De=!0)),o=Se.getPooled(o,t,n,r),i?o.data=i:null!==(i=Me(n))&&(o.data=i),ee(o),i=o):i=null,(e=Pe?function(e,t){switch(e){case"compositionend":return Me(t);case"keypress":return 32!==t.which?null:(Ue=!0,Ae);case"textInput":return(e=t.data)===Ae&&Ue?null:e;default:return null}}(e,n):function(e,t){if(De)return"compositionend"===e||!Te&&Ie(e,t)?(e=me(),ye._root=null,ye._startText=null,ye._fallbackText=null,De=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Re?null:t.data;default:return null}}(e,n))?((t=ke.getPooled(Ne.beforeInput,t,n,r)).data=e,ee(t)):t=null,null===i?t:null===t?i:[i,t]}},je=null,Be={injectFiberControlledHostComponent:function(e){je=e}},Fe=null,ze=null;function qe(e){if(e=x(e)){je&&"function"==typeof je.restoreControlledState||p("194");var t=k(e.stateNode);je.restoreControlledState(e.stateNode,e.type,t)}}function He(e){Fe?ze?ze.push(e):ze=[e]:Fe=e}function We(){return null!==Fe||null!==ze}function Ve(){if(Fe){var e=Fe,t=ze;if(ze=Fe=null,qe(e),t)for(e=0;e<t.length;e++)qe(t[e])}}var Ye={injection:Be,enqueueStateRestore:He,needsStateRestore:We,restoreStateIfNeeded:Ve};function Qe(e,t){return e(t)}function $e(e,t,n){return e(t,n)}function Ge(){}var Ke=!1;function Xe(e,t){if(Ke)return e(t);Ke=!0;try{return Qe(e,t)}finally{Ke=!1,We()&&(Ge(),Ve())}}var Je={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Ze(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Je[e.type]:"textarea"===t}function et(e){return(e=e.target||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function tt(e,t){return!(!i.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function nt(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function rt(e){e._valueTracker||(e._valueTracker=function(e){var t=nt(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function ot(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=nt(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var it=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,at="function"==typeof Symbol&&Symbol.for,st=at?Symbol.for("react.element"):60103,ut=at?Symbol.for("react.portal"):60106,ct=at?Symbol.for("react.fragment"):60107,lt=at?Symbol.for("react.strict_mode"):60108,ft=at?Symbol.for("react.profiler"):60114,pt=at?Symbol.for("react.provider"):60109,dt=at?Symbol.for("react.context"):60110,ht=at?Symbol.for("react.async_mode"):60111,yt=at?Symbol.for("react.forward_ref"):60112,mt=at?Symbol.for("react.timeout"):60113,gt="function"==typeof Symbol&&Symbol.iterator;function vt(e){return null===e||void 0===e?null:"function"==typeof(e=gt&&e[gt]||e["@@iterator"])?e:null}function bt(e){var t=e.type;if("function"==typeof t)return t.displayName||t.name;if("string"==typeof t)return t;switch(t){case ht:return"AsyncMode";case dt:return"Context.Consumer";case ct:return"ReactFragment";case ut:return"ReactPortal";case ft:return"Profiler("+e.pendingProps.id+")";case pt:return"Context.Provider";case lt:return"StrictMode";case mt:return"Timeout"}if("object"==typeof t&&null!==t)switch(t.$$typeof){case yt:return""!==(e=t.render.displayName||t.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function wt(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,o=bt(e),i=null;n&&(i=bt(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":i?" (created by "+i+")":"");break e;default:o=""}t+=o,e=e.return}while(e);return t}var Et=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,_t={},Ct={};function St(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var kt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){kt[e]=new St(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];kt[t]=new St(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){kt[e]=new St(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){kt[e]=new St(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){kt[e]=new St(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){kt[e]=new St(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){kt[e]=new St(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){kt[e]=new St(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){kt[e]=new St(e,5,!1,e.toLowerCase(),null)});var xt=/[\-:]([a-z])/g;function Tt(e){return e[1].toUpperCase()}function Ot(e,t,n,r){var o=kt.hasOwnProperty(t)?kt[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!Ct.hasOwnProperty(e)||!_t.hasOwnProperty(e)&&(Et.test(e)?Ct[e]=!0:(_t[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function Pt(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Rt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Mt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function At(e,t){null!=(t=t.checked)&&Ot(e,"checked",t,!1)}function Nt(e,t){At(e,t);var n=Mt(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?It(e,t.type,n):t.hasOwnProperty("defaultValue")&&It(e,t.type,Mt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Ut(e,t){(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue"))&&(""===e.value&&(e.value=""+e._wrapperState.initialValue),e.defaultValue=""+e._wrapperState.initialValue),""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function It(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Mt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(xt,Tt);kt[t]=new St(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(xt,Tt);kt[t]=new St(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(xt,Tt);kt[t]=new St(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),kt.tabIndex=new St("tabIndex",1,!1,"tabindex",null);var Dt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Lt(e,t,n){return(e=we.getPooled(Dt.change,e,t,n)).type="change",He(n),ee(e),e}var jt=null,Bt=null;function Ft(e){L(e,!1)}function zt(e){if(ot(W(e)))return e}function qt(e,t){if("change"===e)return t}var Ht=!1;function Wt(){jt&&(jt.detachEvent("onpropertychange",Vt),Bt=jt=null)}function Vt(e){"value"===e.propertyName&&zt(Bt)&&Xe(Ft,e=Lt(Bt,e,et(e)))}function Yt(e,t,n){"focus"===e?(Wt(),Bt=n,(jt=t).attachEvent("onpropertychange",Vt)):"blur"===e&&Wt()}function Qt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return zt(Bt)}function $t(e,t){if("click"===e)return zt(t)}function Gt(e,t){if("input"===e||"change"===e)return zt(t)}i.canUseDOM&&(Ht=tt("input")&&(!document.documentMode||9<document.documentMode));var Kt={eventTypes:Dt,_isInputEventSupported:Ht,extractEvents:function(e,t,n,r){var o=t?W(t):window,i=void 0,a=void 0,s=o.nodeName&&o.nodeName.toLowerCase();if("select"===s||"input"===s&&"file"===o.type?i=qt:Ze(o)?Ht?i=Gt:(i=Qt,a=Yt):(s=o.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=$t),i&&(i=i(e,t)))return Lt(i,n,r);a&&a(e,o,t),"blur"===e&&null!=t&&(e=t._wrapperState||o._wrapperState)&&e.controlled&&"number"===o.type&&It(o,"number",o.value)}},Xt=we.extend({view:null,detail:null}),Jt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Zt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Jt[e])&&!!t[e]}function en(){return Zt}var tn=Xt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:en,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),nn=tn.extend({pointerId:null,width:null,height:null,pressure:null,tiltX:null,tiltY:null,pointerType:null,isPrimary:null}),rn={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},on={eventTypes:rn,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,t=(t=n.relatedTarget||n.toElement)?H(t):null):i=null,i===t)return null;var a=void 0,s=void 0,u=void 0,c=void 0;return"mouseout"===e||"mouseover"===e?(a=tn,s=rn.mouseLeave,u=rn.mouseEnter,c="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=nn,s=rn.pointerLeave,u=rn.pointerEnter,c="pointer"),e=null==i?o:W(i),o=null==t?o:W(t),(s=a.getPooled(s,i,n,r)).type=c+"leave",s.target=e,s.relatedTarget=o,(n=a.getPooled(u,t,n,r)).type=c+"enter",n.target=o,n.relatedTarget=e,te(s,n,i,t),[s,n]}};function an(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function sn(e){2!==an(e)&&p("188")}function un(e){var t=e.alternate;if(!t)return 3===(t=an(e))&&p("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var a=o.child;a;){if(a===n)return sn(o),e;if(a===r)return sn(o),t;a=a.sibling}p("188")}if(n.return!==r.return)n=o,r=i;else{a=!1;for(var s=o.child;s;){if(s===n){a=!0,n=o,r=i;break}if(s===r){a=!0,r=o,n=i;break}s=s.sibling}if(!a){for(s=i.child;s;){if(s===n){a=!0,n=i,r=o;break}if(s===r){a=!0,r=i,n=o;break}s=s.sibling}a||p("189")}}n.alternate!==r&&p("190")}return 3!==n.tag&&p("188"),n.stateNode.current===n?e:t}function cn(e){if(!(e=un(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var ln=we.extend({animationName:null,elapsedTime:null,pseudoElement:null}),fn=we.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),pn=Xt.extend({relatedTarget:null});function dn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var hn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},yn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},mn=Xt.extend({key:function(e){if(e.key){var t=hn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=dn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?yn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:en,charCode:function(e){return"keypress"===e.type?dn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?dn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),gn=tn.extend({dataTransfer:null}),vn=Xt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:en}),bn=we.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),wn=tn.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),En=[["abort","abort"],[ue,"animationEnd"],[ce,"animationIteration"],[le,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[fe,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],_n={},Cn={};function Sn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},_n[e]=t,Cn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){Sn(e,!0)}),En.forEach(function(e){Sn(e,!1)});var kn={eventTypes:_n,isInteractiveTopLevelEventType:function(e){return void 0!==(e=Cn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=Cn[e];if(!o)return null;switch(e){case"keypress":if(0===dn(n))return null;case"keydown":case"keyup":e=mn;break;case"blur":case"focus":e=pn;break;case"click":if(2===n.button)return null;case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=tn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=vn;break;case ue:case ce:case le:e=ln;break;case fe:e=bn;break;case"scroll":e=Xt;break;case"wheel":e=wn;break;case"copy":case"cut":case"paste":e=fn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=nn;break;default:e=we}return ee(t=e.getPooled(o,t,n,r)),t}},xn=kn.isInteractiveTopLevelEventType,Tn=[];function On(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=H(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],j(e.topLevelType,t,e.nativeEvent,et(e.nativeEvent))}var Pn=!0;function Rn(e){Pn=!!e}function An(e,t){if(!t)return null;var n=(xn(e)?Un:In).bind(null,e);t.addEventListener(e,n,!1)}function Nn(e,t){if(!t)return null;var n=(xn(e)?Un:In).bind(null,e);t.addEventListener(e,n,!0)}function Un(e,t){$e(In,e,t)}function In(e,t){if(Pn){var n=et(t);if(null===(n=H(n))||"number"!=typeof n.tag||2===an(n)||(n=null),Tn.length){var r=Tn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Xe(On,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Tn.length&&Tn.push(e)}}}var Mn={get _enabled(){return Pn},setEnabled:Rn,isEnabled:function(){return Pn},trapBubbledEvent:An,trapCapturedEvent:Nn,dispatchEvent:In},Dn={},Ln=0,jn="_reactListenersID"+(""+Math.random()).slice(2);function Bn(e){return Object.prototype.hasOwnProperty.call(e,jn)||(e[jn]=Ln++,Dn[e[jn]]={}),Dn[e[jn]]}function Fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function zn(e,t){var n,r=Fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Fn(r)}}function qn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}var Hn=i.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Wn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Vn=null,Yn=null,Qn=null,$n=!1;function Gn(e,t){if($n||null==Vn||Vn!==u())return null;var n=Vn;return"selectionStart"in n&&qn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,Qn&&c(Qn,n)?null:(Qn=n,(e=we.getPooled(Wn.select,Yn,e,t)).type="select",e.target=Vn,ee(e),e)}var Kn={eventTypes:Wn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=Bn(i),o=E.onSelect;for(var a=0;a<o.length;a++){var s=o[a];if(!i.hasOwnProperty(s)||!i[s]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?W(t):window,e){case"focus":(Ze(i)||"true"===i.contentEditable)&&(Vn=i,Yn=t,Qn=null);break;case"blur":Qn=Yn=Vn=null;break;case"mousedown":$n=!0;break;case"contextmenu":case"mouseup":return $n=!1,Gn(n,r);case"selectionchange":if(Hn)break;case"keydown":case"keyup":return Gn(n,r)}return null}};M.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),k=Y.getFiberCurrentPropsFromNode,x=Y.getInstanceFromNode,T=Y.getNodeFromInstance,M.injectEventPluginsByName({SimpleEventPlugin:kn,EnterLeaveEventPlugin:on,ChangeEventPlugin:Kt,SelectEventPlugin:Kn,BeforeInputEventPlugin:Le});var Xn=void 0;Xn="object"==typeof performance&&"function"==typeof performance.now?function(){return performance.now()}:function(){return Date.now()};var Jn=void 0,Zn=void 0;if(i.canUseDOM){var er=[],tr=0,nr={},rr=-1,or=!1,ir=!1,ar=0,sr=33,ur=33,cr={didTimeout:!1,timeRemaining:function(){var e=ar-Xn();return 0<e?e:0}},lr=function(e,t){if(nr[t])try{e(cr)}finally{delete nr[t]}},fr="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===fr&&(or=!1,0!==er.length)){if(0!==er.length&&(e=Xn(),!(-1===rr||rr>e))){rr=-1,cr.didTimeout=!0;for(var t=0,n=er.length;t<n;t++){var r=er[t],o=r.timeoutTime;-1!==o&&o<=e?lr(r.scheduledCallback,r.callbackId):-1!==o&&(-1===rr||o<rr)&&(rr=o)}}for(e=Xn();0<ar-e&&0<er.length;)e=er.shift(),cr.didTimeout=!1,lr(e.scheduledCallback,e.callbackId),e=Xn();0<er.length&&!ir&&(ir=!0,requestAnimationFrame(pr))}},!1);var pr=function(e){ir=!1;var t=e-ar+ur;t<ur&&sr<ur?(8>t&&(t=8),ur=t<sr?sr:t):sr=t,ar=e+ur,or||(or=!0,window.postMessage(fr,"*"))};Jn=function(e,t){var n=-1;return null!=t&&"number"==typeof t.timeout&&(n=Xn()+t.timeout),(-1===rr||-1!==n&&n<rr)&&(rr=n),t=++tr,er.push({scheduledCallback:e,callbackId:t,timeoutTime:n}),nr[t]=!0,ir||(ir=!0,requestAnimationFrame(pr)),t},Zn=function(e){delete nr[e]}}else{var dr=0,hr={};Jn=function(e){var t=dr++,n=setTimeout(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})});return hr[t]=n,t},Zn=function(e){var t=hr[e];delete hr[e],clearTimeout(t)}}function yr(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return o.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function mr(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function gr(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function vr(e,t){return null!=t.dangerouslySetInnerHTML&&p("91"),a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function br(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&p("92"),Array.isArray(t)&&(1>=t.length||p("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function wr(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function Er(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var _r={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Cr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Sr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Cr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var kr,xr=void 0,Tr=(kr=function(e,t){if(e.namespaceURI!==_r.svg||"innerHTML"in e)e.innerHTML=t;else{for((xr=xr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=xr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return kr(e,t)})}:kr);function Or(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var Pr={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Rr=["Webkit","ms","Moz","O"];function Ar(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,i=t[n];o=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||Pr.hasOwnProperty(o)&&Pr[o]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Pr).forEach(function(e){Rr.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Pr[t]=Pr[e]})});var Nr=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Ur(e,t,n){t&&(Nr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&p("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&p("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||p("61")),null!=t.style&&"object"!=typeof t.style&&p("62",n()))}function Ir(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Mr=s.thatReturns("");function Dr(e,t){var n=Bn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=E[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Nn("scroll",e);break;case"focus":case"blur":Nn("focus",e),Nn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":tt(o,!0)&&Nn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===pe.indexOf(o)&&An(o,e)}n[o]=!0}}}function Lr(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===_r.html&&(r=Cr(e)),r===_r.html?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function jr(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function Br(e,t,n,r){var o=Ir(t,n);switch(t){case"iframe":case"object":An("load",e);var i=n;break;case"video":case"audio":for(i=0;i<pe.length;i++)An(pe[i],e);i=n;break;case"source":An("error",e),i=n;break;case"img":case"image":case"link":An("error",e),An("load",e),i=n;break;case"form":An("reset",e),An("submit",e),i=n;break;case"details":An("toggle",e),i=n;break;case"input":Rt(e,n),i=Pt(e,n),An("invalid",e),Dr(r,"onChange");break;case"option":i=yr(e,n);break;case"select":gr(e,n),i=a({},n,{value:void 0}),An("invalid",e),Dr(r,"onChange");break;case"textarea":br(e,n),i=vr(e,n),An("invalid",e),Dr(r,"onChange");break;default:i=n}Ur(t,i,Mr);var u,c=i;for(u in c)if(c.hasOwnProperty(u)){var l=c[u];"style"===u?Ar(e,l):"dangerouslySetInnerHTML"===u?null!=(l=l?l.__html:void 0)&&Tr(e,l):"children"===u?"string"==typeof l?("textarea"!==t||""!==l)&&Or(e,l):"number"==typeof l&&Or(e,""+l):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(w.hasOwnProperty(u)?null!=l&&Dr(r,u):null!=l&&Ot(e,u,l,o))}switch(t){case"input":rt(e),Ut(e,n);break;case"textarea":rt(e),Er(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?mr(e,!!n.multiple,t,!1):null!=n.defaultValue&&mr(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=s)}}function Fr(e,t,n,r,o){var i=null;switch(t){case"input":n=Pt(e,n),r=Pt(e,r),i=[];break;case"option":n=yr(e,n),r=yr(e,r),i=[];break;case"select":n=a({},n,{value:void 0}),r=a({},r,{value:void 0}),i=[];break;case"textarea":n=vr(e,n),r=vr(e,r),i=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=s)}Ur(t,r,Mr),t=e=void 0;var u=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var c=n[e];for(t in c)c.hasOwnProperty(t)&&(u||(u={}),u[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(w.hasOwnProperty(e)?i||(i=[]):(i=i||[]).push(e,null));for(e in r){var l=r[e];if(c=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&l!==c&&(null!=l||null!=c))if("style"===e)if(c){for(t in c)!c.hasOwnProperty(t)||l&&l.hasOwnProperty(t)||(u||(u={}),u[t]="");for(t in l)l.hasOwnProperty(t)&&c[t]!==l[t]&&(u||(u={}),u[t]=l[t])}else u||(i||(i=[]),i.push(e,u)),u=l;else"dangerouslySetInnerHTML"===e?(l=l?l.__html:void 0,c=c?c.__html:void 0,null!=l&&c!==l&&(i=i||[]).push(e,""+l)):"children"===e?c===l||"string"!=typeof l&&"number"!=typeof l||(i=i||[]).push(e,""+l):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(w.hasOwnProperty(e)?(null!=l&&Dr(o,e),i||c===l||(i=[])):(i=i||[]).push(e,l))}return u&&(i=i||[]).push("style",u),i}function zr(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&At(e,o),Ir(n,r),r=Ir(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],s=t[i+1];"style"===a?Ar(e,s):"dangerouslySetInnerHTML"===a?Tr(e,s):"children"===a?Or(e,s):Ot(e,a,s,r)}switch(n){case"input":Nt(e,o);break;case"textarea":wr(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?mr(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?mr(e,!!o.multiple,o.defaultValue,!0):mr(e,!!o.multiple,o.multiple?[]:"",!1))}}function qr(e,t,n,r,o){switch(t){case"iframe":case"object":An("load",e);break;case"video":case"audio":for(r=0;r<pe.length;r++)An(pe[r],e);break;case"source":An("error",e);break;case"img":case"image":case"link":An("error",e),An("load",e);break;case"form":An("reset",e),An("submit",e);break;case"details":An("toggle",e);break;case"input":Rt(e,n),An("invalid",e),Dr(o,"onChange");break;case"select":gr(e,n),An("invalid",e),Dr(o,"onChange");break;case"textarea":br(e,n),An("invalid",e),Dr(o,"onChange")}for(var i in Ur(t,n,Mr),r=null,n)if(n.hasOwnProperty(i)){var a=n[i];"children"===i?"string"==typeof a?e.textContent!==a&&(r=["children",a]):"number"==typeof a&&e.textContent!==""+a&&(r=["children",""+a]):w.hasOwnProperty(i)&&null!=a&&Dr(o,i)}switch(t){case"input":rt(e),Ut(e,n);break;case"textarea":rt(e),Er(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=s)}return r}function Hr(e,t){return e.nodeValue!==t}var Wr={createElement:Lr,createTextNode:jr,setInitialProperties:Br,diffProperties:Fr,updateProperties:zr,diffHydratedProperties:qr,diffHydratedText:Hr,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(Nt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=V(r);o||p("90"),ot(r),Nt(r,o)}}}break;case"textarea":wr(e,n);break;case"select":null!=(t=n.value)&&mr(e,!!n.multiple,t,!1)}}},Vr=null,Yr=null;function Qr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function $r(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html}var Gr=Xn,Kr=Jn,Xr=Zn;function Jr(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function Zr(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var eo=[],to=-1;function no(e){return{current:e}}function ro(e){0>to||(e.current=eo[to],eo[to]=null,to--)}function oo(e,t){eo[++to]=e.current,e.current=t}var io=no(f),ao=no(!1),so=f;function uo(e){return lo(e)?so:io.current}function co(e,t){var n=e.type.contextTypes;if(!n)return f;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function lo(e){return 2===e.tag&&null!=e.type.childContextTypes}function fo(e){lo(e)&&(ro(ao),ro(io))}function po(e){ro(ao),ro(io)}function ho(e,t,n){io.current!==f&&p("168"),oo(io,t),oo(ao,n)}function yo(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||p("108",bt(e)||"Unknown",o);return a({},t,n)}function mo(e){if(!lo(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||f,so=io.current,oo(io,t),oo(ao,ao.current),!0}function go(e,t){var n=e.stateNode;if(n||p("169"),t){var r=yo(e,so);n.__reactInternalMemoizedMergedChildContext=r,ro(ao),ro(io),oo(io,r)}else ro(ao);oo(ao,t)}function vo(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function bo(e,t,n){var r=e.alternate;return null===r?((r=new vo(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function wo(e,t,n){var r=e.type,o=e.key;if(e=e.props,"function"==typeof r)var i=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)i=5;else switch(r){case ct:return Eo(e.children,t,n,o);case ht:i=11,t|=3;break;case lt:i=11,t|=2;break;case ft:return(r=new vo(15,e,o,4|t)).type=ft,r.expirationTime=n,r;case mt:i=16,t|=2;break;default:e:{switch("object"==typeof r&&null!==r?r.$$typeof:null){case pt:i=13;break e;case dt:i=12;break e;case yt:i=14;break e;default:p("130",null==r?r:typeof r,"")}i=void 0}}return(t=new vo(i,e,o,t)).type=r,t.expirationTime=n,t}function Eo(e,t,n,r){return(e=new vo(10,e,r,t)).expirationTime=n,e}function _o(e,t,n){return(e=new vo(6,e,null,t)).expirationTime=n,e}function Co(e,t,n){return(t=new vo(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function So(e,t,n){return e={current:t=new vo(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e}var ko=null,xo=null;function To(e){return function(t){try{return e(t)}catch(e){}}}function Oo(e){"function"==typeof ko&&ko(e)}function Po(e){"function"==typeof xo&&xo(e)}var Ro=!1;function Ao(e){return{expirationTime:0,baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function No(e){return{expirationTime:e.expirationTime,baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Uo(e){return{expirationTime:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function Io(e,t,n){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t),(0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n)}function Mo(e,t,n){var r=e.alternate;if(null===r){var o=e.updateQueue,i=null;null===o&&(o=e.updateQueue=Ao(e.memoizedState))}else o=e.updateQueue,i=r.updateQueue,null===o?null===i?(o=e.updateQueue=Ao(e.memoizedState),i=r.updateQueue=Ao(r.memoizedState)):o=e.updateQueue=No(i):null===i&&(i=r.updateQueue=No(o));null===i||o===i?Io(o,t,n):null===o.lastUpdate||null===i.lastUpdate?(Io(o,t,n),Io(i,t,n)):(Io(o,t,n),i.lastUpdate=t)}function Do(e,t,n){var r=e.updateQueue;null===(r=null===r?e.updateQueue=Ao(e.memoizedState):Lo(e,r)).lastCapturedUpdate?r.firstCapturedUpdate=r.lastCapturedUpdate=t:(r.lastCapturedUpdate.next=t,r.lastCapturedUpdate=t),(0===r.expirationTime||r.expirationTime>n)&&(r.expirationTime=n)}function Lo(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=No(t)),t}function jo(e,t,n,r,o,i){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(i,r,o):e;case 3:e.effectTag=-1025&e.effectTag|64;case 0:if(null===(o="function"==typeof(e=n.payload)?e.call(i,r,o):e)||void 0===o)break;return a({},r,o);case 2:Ro=!0}return r}function Bo(e,t,n,r,o){if(Ro=!1,!(0===t.expirationTime||t.expirationTime>o)){for(var i=(t=Lo(e,t)).baseState,a=null,s=0,u=t.firstUpdate,c=i;null!==u;){var l=u.expirationTime;l>o?(null===a&&(a=u,i=c),(0===s||s>l)&&(s=l)):(c=jo(e,0,u,c,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=u:(t.lastEffect.nextEffect=u,t.lastEffect=u))),u=u.next}for(l=null,u=t.firstCapturedUpdate;null!==u;){var f=u.expirationTime;f>o?(null===l&&(l=u,null===a&&(i=c)),(0===s||s>f)&&(s=f)):(c=jo(e,0,u,c,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=u:(t.lastCapturedEffect.nextEffect=u,t.lastCapturedEffect=u))),u=u.next}null===a&&(t.lastUpdate=null),null===l?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===l&&(i=c),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=l,t.expirationTime=s,e.memoizedState=c}}function Fo(e,t){"function"!=typeof e&&p("191",e),e.call(t)}function zo(e,t,n){for(null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),e=t.firstEffect,t.firstEffect=t.lastEffect=null;null!==e;){var r=e.callback;null!==r&&(e.callback=null,Fo(r,n)),e=e.nextEffect}for(e=t.firstCapturedEffect,t.firstCapturedEffect=t.lastCapturedEffect=null;null!==e;)null!==(t=e.callback)&&(e.callback=null,Fo(t,n)),e=e.nextEffect}function qo(e,t){return{value:e,source:t,stack:wt(t)}}var Ho=no(null),Wo=no(null),Vo=no(0);function Yo(e){var t=e.type._context;oo(Vo,t._changedBits),oo(Wo,t._currentValue),oo(Ho,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode}function Qo(e){var t=Vo.current,n=Wo.current;ro(Ho),ro(Wo),ro(Vo),(e=e.type._context)._currentValue=n,e._changedBits=t}var $o={},Go=no($o),Ko=no($o),Xo=no($o);function Jo(e){return e===$o&&p("174"),e}function Zo(e,t){oo(Xo,t),oo(Ko,e),oo(Go,$o);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Sr(null,"");break;default:t=Sr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}ro(Go),oo(Go,t)}function ei(e){ro(Go),ro(Ko),ro(Xo)}function ti(e){Ko.current===e&&(ro(Go),ro(Ko))}function ni(e,t,n){var r=e.memoizedState;r=null===(t=t(n,r))||void 0===t?r:a({},r,t),e.memoizedState=r,null!==(e=e.updateQueue)&&0===e.expirationTime&&(e.baseState=r)}var ri={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===an(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=ya(),o=Uo(r=da(r,e));o.payload=t,void 0!==n&&null!==n&&(o.callback=n),Mo(e,o,r),ha(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=ya(),o=Uo(r=da(r,e));o.tag=1,o.payload=t,void 0!==n&&null!==n&&(o.callback=n),Mo(e,o,r),ha(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=ya(),r=Uo(n=da(n,e));r.tag=2,void 0!==t&&null!==t&&(r.callback=t),Mo(e,r,n),ha(e,n)}};function oi(e,t,n,r,o,i){var a=e.stateNode;return e=e.type,"function"==typeof a.shouldComponentUpdate?a.shouldComponentUpdate(n,o,i):!e.prototype||!e.prototype.isPureReactComponent||(!c(t,n)||!c(r,o))}function ii(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ri.enqueueReplaceState(t,t.state,null)}function ai(e,t){var n=e.type,r=e.stateNode,o=e.pendingProps,i=uo(e);r.props=o,r.state=e.memoizedState,r.refs=f,r.context=co(e,i),null!==(i=e.updateQueue)&&(Bo(e,i,o,r,t),r.state=e.memoizedState),"function"==typeof(i=e.type.getDerivedStateFromProps)&&(ni(e,i,o),r.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(n=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),n!==r.state&&ri.enqueueReplaceState(r,r.state,null),null!==(i=e.updateQueue)&&(Bo(e,i,o,r,t),r.state=e.memoizedState)),"function"==typeof r.componentDidMount&&(e.effectTag|=4)}var si=Array.isArray;function ui(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&p("110"),r=n.stateNode),r||p("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs===f?r.refs={}:r.refs;null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&p("148"),n._owner||p("254",e)}return e}function ci(e,t){"textarea"!==e.type&&p("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function li(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=bo(e,t,n)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function a(t){return e&&null===t.alternate&&(t.effectTag=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=_o(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function u(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=ui(e,t,n),r.return=e,r):((r=wo(n,e.mode,r)).ref=ui(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Co(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function l(e,t,n,r,i){return null===t||10!==t.tag?((t=Eo(n,e.mode,r,i)).return=e,t):((t=o(t,n,r)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=_o(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case st:return(n=wo(t,e.mode,n)).ref=ui(e,null,t),n.return=e,n;case ut:return(t=Co(t,e.mode,n)).return=e,t}if(si(t)||vt(t))return(t=Eo(t,e.mode,n,null)).return=e,t;ci(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case st:return n.key===o?n.type===ct?l(e,t,n.props.children,r,o):u(e,t,n,r):null;case ut:return n.key===o?c(e,t,n,r):null}if(si(n)||vt(n))return null!==o?null:l(e,t,n,r,null);ci(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case st:return e=e.get(null===r.key?n:r.key)||null,r.type===ct?l(t,e,r.props.children,o,r.key):u(t,e,r,o);case ut:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(si(r)||vt(r))return l(t,e=e.get(n)||null,r,o,null);ci(t,r)}return null}function y(o,a,s,u){for(var c=null,l=null,p=a,y=a=0,m=null;null!==p&&y<s.length;y++){p.index>y?(m=p,p=null):m=p.sibling;var g=d(o,p,s[y],u);if(null===g){null===p&&(p=m);break}e&&p&&null===g.alternate&&t(o,p),a=i(g,a,y),null===l?c=g:l.sibling=g,l=g,p=m}if(y===s.length)return n(o,p),c;if(null===p){for(;y<s.length;y++)(p=f(o,s[y],u))&&(a=i(p,a,y),null===l?c=p:l.sibling=p,l=p);return c}for(p=r(o,p);y<s.length;y++)(m=h(p,o,y,s[y],u))&&(e&&null!==m.alternate&&p.delete(null===m.key?y:m.key),a=i(m,a,y),null===l?c=m:l.sibling=m,l=m);return e&&p.forEach(function(e){return t(o,e)}),c}function m(o,a,s,u){var c=vt(s);"function"!=typeof c&&p("150"),null==(s=c.call(s))&&p("151");for(var l=c=null,y=a,m=a=0,g=null,v=s.next();null!==y&&!v.done;m++,v=s.next()){y.index>m?(g=y,y=null):g=y.sibling;var b=d(o,y,v.value,u);if(null===b){y||(y=g);break}e&&y&&null===b.alternate&&t(o,y),a=i(b,a,m),null===l?c=b:l.sibling=b,l=b,y=g}if(v.done)return n(o,y),c;if(null===y){for(;!v.done;m++,v=s.next())null!==(v=f(o,v.value,u))&&(a=i(v,a,m),null===l?c=v:l.sibling=v,l=v);return c}for(y=r(o,y);!v.done;m++,v=s.next())null!==(v=h(y,o,m,v.value,u))&&(e&&null!==v.alternate&&y.delete(null===v.key?m:v.key),a=i(v,a,m),null===l?c=v:l.sibling=v,l=v);return e&&y.forEach(function(e){return t(o,e)}),c}return function(e,r,i,s){"object"==typeof i&&null!==i&&i.type===ct&&null===i.key&&(i=i.props.children);var u="object"==typeof i&&null!==i;if(u)switch(i.$$typeof){case st:e:{var c=i.key;for(u=r;null!==u;){if(u.key===c){if(10===u.tag?i.type===ct:u.type===i.type){n(e,u.sibling),(r=o(u,i.type===ct?i.props.children:i.props,s)).ref=ui(e,u,i),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}i.type===ct?((r=Eo(i.props.children,e.mode,s,i.key)).return=e,e=r):((s=wo(i,e.mode,s)).ref=ui(e,r,i),s.return=e,e=s)}return a(e);case ut:e:{for(u=i.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[],s)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Co(i,e.mode,s)).return=e,e=r}return a(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i,s)).return=e,e=r):(n(e,r),(r=_o(i,e.mode,s)).return=e,e=r),a(e);if(si(i))return y(e,r,i,s);if(vt(i))return m(e,r,i,s);if(u&&ci(e,i),void 0===i)switch(e.tag){case 2:case 1:p("152",(s=e.type).displayName||s.name||"Component")}return n(e,r)}}var fi=li(!0),pi=li(!1),di=null,hi=null,yi=!1;function mi(e,t){var n=new vo(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function gi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function vi(e){if(yi){var t=hi;if(t){var n=t;if(!gi(e,t)){if(!(t=Jr(n))||!gi(e,t))return e.effectTag|=2,yi=!1,void(di=e);mi(di,n)}di=e,hi=Zr(t)}else e.effectTag|=2,yi=!1,di=e}}function bi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;di=e}function wi(e){if(e!==di)return!1;if(!yi)return bi(e),yi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!$r(t,e.memoizedProps))for(t=hi;t;)mi(e,t),t=Jr(t);return bi(e),hi=di?Jr(e.stateNode):null,!0}function Ei(){hi=di=null,yi=!1}function _i(e,t,n){Ci(e,t,n,t.expirationTime)}function Ci(e,t,n,r){t.child=null===e?pi(t,null,n,r):fi(t,e.child,n,r)}function Si(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function ki(e,t,n,r,o){Si(e,t);var i=0!=(64&t.effectTag);if(!n&&!i)return r&&go(t,!1),Oi(e,t);n=t.stateNode,it.current=t;var a=i?null:n.render();return t.effectTag|=1,i&&(Ci(e,t,null,o),t.child=null),Ci(e,t,a,o),t.memoizedState=n.state,t.memoizedProps=n.props,r&&go(t,!0),t.child}function xi(e){var t=e.stateNode;t.pendingContext?ho(0,t.pendingContext,t.pendingContext!==t.context):t.context&&ho(0,t.context,!1),Zo(e,t.containerInfo)}function Ti(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){switch(o.tag){case 12:var i=0|o.stateNode;if(o.type===t&&0!=(i&n)){for(i=o;null!==i;){var a=i.alternate;if(0===i.expirationTime||i.expirationTime>r)i.expirationTime=r,null!==a&&(0===a.expirationTime||a.expirationTime>r)&&(a.expirationTime=r);else{if(null===a||!(0===a.expirationTime||a.expirationTime>r))break;a.expirationTime=r}i=i.return}i=null}else i=o.child;break;case 13:i=o.type===e.type?null:o.child;break;default:i=o.child}if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===e){i=null;break}if(null!==(o=i.sibling)){o.return=i.return,i=o;break}i=i.return}o=i}}function Oi(e,t){if(null!==e&&t.child!==e.child&&p("153"),null!==t.child){var n=bo(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=bo(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Pi(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:xi(t);break;case 2:mo(t);break;case 4:Zo(t,t.stateNode.containerInfo);break;case 13:Yo(t)}return null}switch(t.tag){case 0:null!==e&&p("155");var r=t.type,o=t.pendingProps,i=uo(t);return r=r(o,i=co(t,i)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(i=t.type,t.tag=2,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof(i=i.getDerivedStateFromProps)&&ni(t,i,o),o=mo(t),r.updater=ri,t.stateNode=r,r._reactInternalFiber=t,ai(t,n),e=ki(e,t,!0,o,n)):(t.tag=1,_i(e,t,r),t.memoizedProps=o,e=t.child),e;case 1:return o=t.type,n=t.pendingProps,ao.current||t.memoizedProps!==n?(o=o(n,r=co(t,r=uo(t))),t.effectTag|=1,_i(e,t,o),t.memoizedProps=n,e=t.child):e=Oi(e,t),e;case 2:if(o=mo(t),null===e)if(null===t.stateNode){var a=t.pendingProps,s=t.type;r=uo(t);var u=2===t.tag&&null!=t.type.contextTypes;a=new s(a,i=u?co(t,r):f),t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,a.updater=ri,t.stateNode=a,a._reactInternalFiber=t,u&&((u=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,u.__reactInternalMemoizedMaskedChildContext=i),ai(t,n),r=!0}else{s=t.type,r=t.stateNode,u=t.memoizedProps,i=t.pendingProps,r.props=u;var c=r.context;a=co(t,a=uo(t));var l=s.getDerivedStateFromProps;(s="function"==typeof l||"function"==typeof r.getSnapshotBeforeUpdate)||"function"!=typeof r.UNSAFE_componentWillReceiveProps&&"function"!=typeof r.componentWillReceiveProps||(u!==i||c!==a)&&ii(t,r,i,a),Ro=!1;var d=t.memoizedState;c=r.state=d;var h=t.updateQueue;null!==h&&(Bo(t,h,i,r,n),c=t.memoizedState),u!==i||d!==c||ao.current||Ro?("function"==typeof l&&(ni(t,l,i),c=t.memoizedState),(u=Ro||oi(t,u,i,d,c,a))?(s||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||("function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount()),"function"==typeof r.componentDidMount&&(t.effectTag|=4)):("function"==typeof r.componentDidMount&&(t.effectTag|=4),t.memoizedProps=i,t.memoizedState=c),r.props=i,r.state=c,r.context=a,r=u):("function"==typeof r.componentDidMount&&(t.effectTag|=4),r=!1)}else s=t.type,r=t.stateNode,i=t.memoizedProps,u=t.pendingProps,r.props=i,c=r.context,a=co(t,a=uo(t)),(s="function"==typeof(l=s.getDerivedStateFromProps)||"function"==typeof r.getSnapshotBeforeUpdate)||"function"!=typeof r.UNSAFE_componentWillReceiveProps&&"function"!=typeof r.componentWillReceiveProps||(i!==u||c!==a)&&ii(t,r,u,a),Ro=!1,c=t.memoizedState,d=r.state=c,null!==(h=t.updateQueue)&&(Bo(t,h,u,r,n),d=t.memoizedState),i!==u||c!==d||ao.current||Ro?("function"==typeof l&&(ni(t,l,u),d=t.memoizedState),(l=Ro||oi(t,i,u,c,d,a))?(s||"function"!=typeof r.UNSAFE_componentWillUpdate&&"function"!=typeof r.componentWillUpdate||("function"==typeof r.componentWillUpdate&&r.componentWillUpdate(u,d,a),"function"==typeof r.UNSAFE_componentWillUpdate&&r.UNSAFE_componentWillUpdate(u,d,a)),"function"==typeof r.componentDidUpdate&&(t.effectTag|=4),"function"==typeof r.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof r.componentDidUpdate||i===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof r.getSnapshotBeforeUpdate||i===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),t.memoizedProps=u,t.memoizedState=d),r.props=u,r.state=d,r.context=a,r=l):("function"!=typeof r.componentDidUpdate||i===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof r.getSnapshotBeforeUpdate||i===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),r=!1);return ki(e,t,r,o,n);case 3:return xi(t),null!==(o=t.updateQueue)?(r=null!==(r=t.memoizedState)?r.element:null,Bo(t,o,t.pendingProps,null,n),(o=t.memoizedState.element)===r?(Ei(),e=Oi(e,t)):(r=t.stateNode,(r=(null===e||null===e.child)&&r.hydrate)&&(hi=Zr(t.stateNode.containerInfo),di=t,r=yi=!0),r?(t.effectTag|=2,t.child=pi(t,null,o,n)):(Ei(),_i(e,t,o)),e=t.child)):(Ei(),e=Oi(e,t)),e;case 5:return Jo(Xo.current),(o=Jo(Go.current))!==(r=Sr(o,t.type))&&(oo(Ko,t),oo(Go,r)),null===e&&vi(t),o=t.type,u=t.memoizedProps,r=t.pendingProps,i=null!==e?e.memoizedProps:null,ao.current||u!==r||((u=1&t.mode&&!!r.hidden)&&(t.expirationTime=1073741823),u&&1073741823===n)?(u=r.children,$r(o,r)?u=null:i&&$r(o,i)&&(t.effectTag|=16),Si(e,t),1073741823!==n&&1&t.mode&&r.hidden?(t.expirationTime=1073741823,t.memoizedProps=r,e=null):(_i(e,t,u),t.memoizedProps=r,e=t.child)):e=Oi(e,t),e;case 6:return null===e&&vi(t),t.memoizedProps=t.pendingProps,null;case 16:return null;case 4:return Zo(t,t.stateNode.containerInfo),o=t.pendingProps,ao.current||t.memoizedProps!==o?(null===e?t.child=fi(t,null,o,n):_i(e,t,o),t.memoizedProps=o,e=t.child):e=Oi(e,t),e;case 14:return o=t.type.render,n=t.pendingProps,r=t.ref,ao.current||t.memoizedProps!==n||r!==(null!==e?e.ref:null)?(_i(e,t,o=o(n,r)),t.memoizedProps=n,e=t.child):e=Oi(e,t),e;case 10:return n=t.pendingProps,ao.current||t.memoizedProps!==n?(_i(e,t,n),t.memoizedProps=n,e=t.child):e=Oi(e,t),e;case 11:return n=t.pendingProps.children,ao.current||null!==n&&t.memoizedProps!==n?(_i(e,t,n),t.memoizedProps=n,e=t.child):e=Oi(e,t),e;case 15:return n=t.pendingProps,t.memoizedProps===n?e=Oi(e,t):(_i(e,t,n.children),t.memoizedProps=n,e=t.child),e;case 13:return function(e,t,n){var r=t.type._context,o=t.pendingProps,i=t.memoizedProps,a=!0;if(ao.current)a=!1;else if(i===o)return t.stateNode=0,Yo(t),Oi(e,t);var s=o.value;if(t.memoizedProps=o,null===i)s=1073741823;else if(i.value===o.value){if(i.children===o.children&&a)return t.stateNode=0,Yo(t),Oi(e,t);s=0}else{var u=i.value;if(u===s&&(0!==u||1/u==1/s)||u!=u&&s!=s){if(i.children===o.children&&a)return t.stateNode=0,Yo(t),Oi(e,t);s=0}else if(s="function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,s):1073741823,0==(s|=0)){if(i.children===o.children&&a)return t.stateNode=0,Yo(t),Oi(e,t)}else Ti(t,r,s,n)}return t.stateNode=s,Yo(t),_i(e,t,o.children),t.child}(e,t,n);case 12:e:if(r=t.type,i=t.pendingProps,u=t.memoizedProps,o=r._currentValue,a=r._changedBits,ao.current||0!==a||u!==i){if(t.memoizedProps=i,void 0!==(s=i.unstable_observedBits)&&null!==s||(s=1073741823),t.stateNode=s,0!=(a&s))Ti(t,r,a,n);else if(u===i){e=Oi(e,t);break e}n=(n=i.children)(o),t.effectTag|=1,_i(e,t,n),e=t.child}else e=Oi(e,t);return e;default:p("156")}}function Ri(e){e.effectTag|=4}var Ai=void 0,Ni=void 0,Ui=void 0;function Ii(e,t){var n=t.pendingProps;switch(t.tag){case 1:return null;case 2:return fo(t),null;case 3:ei(),po();var r=t.stateNode;return r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(wi(t),t.effectTag&=-3),Ai(t),null;case 5:ti(t),r=Jo(Xo.current);var o=t.type;if(null!==e&&null!=t.stateNode){var i=e.memoizedProps,a=t.stateNode,s=Jo(Go.current);a=Fr(a,o,i,n,r),Ni(e,t,a,o,i,n,r,s),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!n)return null===t.stateNode&&p("166"),null;if(e=Jo(Go.current),wi(t))n=t.stateNode,o=t.type,i=t.memoizedProps,n[z]=t,n[q]=i,r=qr(n,o,i,e,r),t.updateQueue=r,null!==r&&Ri(t);else{(e=Lr(o,n,r,e))[z]=t,e[q]=n;e:for(i=t.child;null!==i;){if(5===i.tag||6===i.tag)e.appendChild(i.stateNode);else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)break e;i=i.return}i.sibling.return=i.return,i=i.sibling}Br(e,o,n,r),Qr(o,n)&&Ri(t),t.stateNode=e}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Ui(e,t,e.memoizedProps,n);else{if("string"!=typeof n)return null===t.stateNode&&p("166"),null;r=Jo(Xo.current),Jo(Go.current),wi(t)?(r=t.stateNode,n=t.memoizedProps,r[z]=t,Hr(r,n)&&Ri(t)):((r=jr(n,r))[z]=t,t.stateNode=r)}return null;case 14:case 16:case 10:case 11:case 15:return null;case 4:return ei(),Ai(t),null;case 13:return Qo(t),null;case 12:return null;case 0:p("167");default:p("156")}}function Mi(e,t){var n=t.source;null===t.stack&&null!==n&&wt(n),null!==n&&bt(n),t=t.value,null!==e&&2===e.tag&&bt(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}function Di(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){fa(e,t)}else t.current=null}function Li(e){switch(Po(e),e.tag){case 2:Di(e);var t=e.stateNode;if("function"==typeof t.componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){fa(e,t)}break;case 5:Di(e);break;case 4:Fi(e)}}function ji(e){return 5===e.tag||3===e.tag||4===e.tag}function Bi(e){e:{for(var t=e.return;null!==t;){if(ji(t)){var n=t;break e}t=t.return}p("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:p("161")}16&n.effectTag&&(Or(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ji(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var i=t,a=o.stateNode,s=n;8===i.nodeType?i.parentNode.insertBefore(a,s):i.insertBefore(a,s)}else t.insertBefore(o.stateNode,n);else r?(i=t,a=o.stateNode,8===i.nodeType?i.parentNode.insertBefore(a,i):i.appendChild(a)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function Fi(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&p("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var i=t,a=i;;)if(Li(a),null!==a.child&&4!==a.tag)a.child.return=a,a=a.child;else{if(a===i)break;for(;null===a.sibling;){if(null===a.return||a.return===i)break e;a=a.return}a.sibling.return=a.return,a=a.sibling}o?(i=r,a=t.stateNode,8===i.nodeType?i.parentNode.removeChild(a):i.removeChild(a)):r.removeChild(t.stateNode)}else if(4===t.tag?r=t.stateNode.containerInfo:Li(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function zi(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&(n[q]=r,zr(n,i,o,e,r))}break;case 6:null===t.stateNode&&p("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 15:case 16:break;default:p("163")}}function qi(e,t,n){(n=Uo(n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){$a(r),Mi(e,t)},n}function Hi(e,t,n){(n=Uo(n)).tag=3;var r=e.stateNode;return null!==r&&"function"==typeof r.componentDidCatch&&(n.callback=function(){null===aa?aa=new Set([this]):aa.add(this);var n=t.value,r=t.stack;Mi(e,t),this.componentDidCatch(n,{componentStack:null!==r?r:""})}),n}function Wi(e,t,n,r,o,i){n.effectTag|=512,n.firstEffect=n.lastEffect=null,r=qo(r,n),e=t;do{switch(e.tag){case 3:return e.effectTag|=1024,void Do(e,r=qi(e,r,i),i);case 2:if(t=r,n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&(null===aa||!aa.has(n)))return e.effectTag|=1024,void Do(e,r=Hi(e,t,i),i)}e=e.return}while(null!==e)}function Vi(e){switch(e.tag){case 2:fo(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return ei(),po(),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return ti(e),null;case 16:return 1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 4:return ei(),null;case 13:return Qo(e),null;default:return null}}Ai=function(){},Ni=function(e,t,n){(t.updateQueue=n)&&Ri(t)},Ui=function(e,t,n,r){n!==r&&Ri(t)};var Yi=Gr(),Qi=2,$i=Yi,Gi=0,Ki=0,Xi=!1,Ji=null,Zi=null,ea=0,ta=-1,na=!1,ra=null,oa=!1,ia=!1,aa=null;function sa(){if(null!==Ji)for(var e=Ji.return;null!==e;){var t=e;switch(t.tag){case 2:fo(t);break;case 3:ei(),po();break;case 5:ti(t);break;case 4:ei();break;case 13:Qo(t)}e=e.return}Zi=null,ea=0,ta=-1,na=!1,Ji=null,ia=!1}function ua(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=Ii(t,e);var o=e;if(1073741823===ea||1073741823!==o.expirationTime){var i=0;switch(o.tag){case 3:case 2:var a=o.updateQueue;null!==a&&(i=a.expirationTime)}for(a=o.child;null!==a;)0!==a.expirationTime&&(0===i||i>a.expirationTime)&&(i=a.expirationTime),a=a.sibling;o.expirationTime=i}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){ia=!0;break}e=n}else{if(null!==(e=Vi(e)))return e.effectTag&=511,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function ca(e){var t=Pi(e.alternate,e,ea);return null===t&&(t=ua(e)),it.current=null,t}function la(e,t,n){Xi&&p("243"),Xi=!0,t===ea&&e===Zi&&null!==Ji||(sa(),ea=t,ta=-1,Ji=bo((Zi=e).current,null,ea),e.pendingCommitExpirationTime=0);var r=!1;for(na=!n||ea<=Qi;;){try{if(n)for(;null!==Ji&&!Qa();)Ji=ca(Ji);else for(;null!==Ji;)Ji=ca(Ji)}catch(t){if(null===Ji)r=!0,$a(t);else{null===Ji&&p("271");var o=(n=Ji).return;if(null===o){r=!0,$a(t);break}Wi(e,o,n,t,0,ea),Ji=ua(n)}}break}if(Xi=!1,r)return null;if(null===Ji){if(ia)return e.pendingCommitExpirationTime=t,e.current.alternate;na&&p("262"),0<=ta&&setTimeout(function(){var t=e.current.expirationTime;0!==t&&(0===e.remainingExpirationTime||e.remainingExpirationTime<t)&&ja(e,t)},ta),function(e){null===Ca&&p("246"),Ca.remainingExpirationTime=e}(e.current.expirationTime)}return null}function fa(e,t){var n;e:{for(Xi&&!oa&&p("263"),n=e.return;null!==n;){switch(n.tag){case 2:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromCatch||"function"==typeof r.componentDidCatch&&(null===aa||!aa.has(r))){Mo(n,e=Hi(n,e=qo(t,e),1),1),ha(n,1),n=void 0;break e}break;case 3:Mo(n,e=qi(n,e=qo(t,e),1),1),ha(n,1),n=void 0;break e}n=n.return}3===e.tag&&(Mo(e,n=qi(e,n=qo(t,e),1),1),ha(e,1)),n=void 0}return n}function pa(){var e=2+25*(1+((ya()-2+500)/25|0));return e<=Gi&&(e=Gi+1),Gi=e}function da(e,t){return e=0!==Ki?Ki:Xi?oa?1:ea:1&t.mode?Na?2+10*(1+((e-2+15)/10|0)):2+25*(1+((e-2+500)/25|0)):1,Na&&(0===ka||e>ka)&&(ka=e),e}function ha(e,t){for(;null!==e;){if((0===e.expirationTime||e.expirationTime>t)&&(e.expirationTime=t),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>t)&&(e.alternate.expirationTime=t),null===e.return){if(3!==e.tag)break;var n=e.stateNode;!Xi&&0!==ea&&t<ea&&sa();var r=n.current.expirationTime;Xi&&!oa&&Zi===n||ja(n,r),Ma>Ia&&p("185")}e=e.return}}function ya(){return $i=Gr()-Yi,Qi=2+($i/10|0)}function ma(e){var t=Ki;Ki=2+25*(1+((ya()-2+500)/25|0));try{return e()}finally{Ki=t}}function ga(e,t,n,r,o){var i=Ki;Ki=1;try{return e(t,n,r,o)}finally{Ki=i}}var va=null,ba=null,wa=0,Ea=-1,_a=!1,Ca=null,Sa=0,ka=0,xa=!1,Ta=!1,Oa=null,Pa=null,Ra=!1,Aa=!1,Na=!1,Ua=null,Ia=1e3,Ma=0,Da=1;function La(e){if(0!==wa){if(e>wa)return;Xr(Ea)}var t=Gr()-Yi;wa=e,Ea=Kr(Fa,{timeout:10*(e-2)-t})}function ja(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===ba?(va=ba=e,e.nextScheduledRoot=e):(ba=ba.nextScheduledRoot=e).nextScheduledRoot=va;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}_a||(Ra?Aa&&(Ca=e,Sa=1,Va(e,1,!1)):1===t?za():La(t))}function Ba(){var e=0,t=null;if(null!==ba)for(var n=ba,r=va;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===ba)&&p("244"),r===r.nextScheduledRoot){va=ba=r.nextScheduledRoot=null;break}if(r===va)va=o=r.nextScheduledRoot,ba.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===ba){(ba=n).nextScheduledRoot=va,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===ba)break;n=r,r=r.nextScheduledRoot}}null!==(n=Ca)&&n===t&&1===e?Ma++:Ma=0,Ca=t,Sa=e}function Fa(e){qa(0,!0,e)}function za(){qa(1,!1,null)}function qa(e,t,n){if(Pa=n,Ba(),t)for(;null!==Ca&&0!==Sa&&(0===e||e>=Sa)&&(!xa||ya()>=Sa);)ya(),Va(Ca,Sa,!xa),Ba();else for(;null!==Ca&&0!==Sa&&(0===e||e>=Sa);)Va(Ca,Sa,!1),Ba();null!==Pa&&(wa=0,Ea=-1),0!==Sa&&La(Sa),Pa=null,xa=!1,Wa()}function Ha(e,t){_a&&p("253"),Ca=e,Sa=t,Va(e,t,!1),za(),Wa()}function Wa(){if(Ma=0,null!==Ua){var e=Ua;Ua=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){Ta||(Ta=!0,Oa=e)}}}if(Ta)throw e=Oa,Oa=null,Ta=!1,e}function Va(e,t,n){_a&&p("245"),_a=!0,n?null!==(n=e.finishedWork)?Ya(e,n,t):(e.finishedWork=null,null!==(n=la(e,t,!0))&&(Qa()?e.finishedWork=n:Ya(e,n,t))):null!==(n=e.finishedWork)?Ya(e,n,t):(e.finishedWork=null,null!==(n=la(e,t,!1))&&Ya(e,n,t)),_a=!1}function Ya(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Ua?Ua=[r]:Ua.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);if(e.finishedWork=null,oa=Xi=!0,(n=t.stateNode).current===t&&p("177"),0===(r=n.pendingCommitExpirationTime)&&p("261"),n.pendingCommitExpirationTime=0,ya(),it.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var o=t.firstEffect}else o=t;else o=t.firstEffect;Vr=Pn;var i=u();if(qn(i)){if("selectionStart"in i)var a={start:i.selectionStart,end:i.selectionEnd};else e:{var s=window.getSelection&&window.getSelection();if(s&&0!==s.rangeCount){a=s.anchorNode;var c=s.anchorOffset,f=s.focusNode;s=s.focusOffset;try{a.nodeType,f.nodeType}catch(e){a=null;break e}var d=0,h=-1,y=-1,m=0,g=0,v=i,b=null;t:for(;;){for(var w;v!==a||0!==c&&3!==v.nodeType||(h=d+c),v!==f||0!==s&&3!==v.nodeType||(y=d+s),3===v.nodeType&&(d+=v.nodeValue.length),null!==(w=v.firstChild);)b=v,v=w;for(;;){if(v===i)break t;if(b===a&&++m===c&&(h=d),b===f&&++g===s&&(y=d),null!==(w=v.nextSibling))break;b=(v=b).parentNode}v=w}a=-1===h||-1===y?null:{start:h,end:y}}else a=null}a=a||{start:0,end:0}}else a=null;for(Yr={focusedElem:i,selectionRange:a},Rn(!1),ra=o;null!==ra;){i=!1,a=void 0;try{for(;null!==ra;){if(256&ra.effectTag){var E=ra.alternate;switch((c=ra).tag){case 2:if(256&c.effectTag&&null!==E){var _=E.memoizedProps,C=E.memoizedState,S=c.stateNode;S.props=c.memoizedProps,S.state=c.memoizedState;var k=S.getSnapshotBeforeUpdate(_,C);S.__reactInternalSnapshotBeforeUpdate=k}break;case 3:case 5:case 6:case 4:break;default:p("163")}}ra=ra.nextEffect}}catch(e){i=!0,a=e}i&&(null===ra&&p("178"),fa(ra,a),null!==ra&&(ra=ra.nextEffect))}for(ra=o;null!==ra;){E=!1,_=void 0;try{for(;null!==ra;){var x=ra.effectTag;if(16&x&&Or(ra.stateNode,""),128&x){var T=ra.alternate;if(null!==T){var O=T.ref;null!==O&&("function"==typeof O?O(null):O.current=null)}}switch(14&x){case 2:Bi(ra),ra.effectTag&=-3;break;case 6:Bi(ra),ra.effectTag&=-3,zi(ra.alternate,ra);break;case 4:zi(ra.alternate,ra);break;case 8:Fi(C=ra),C.return=null,C.child=null,C.alternate&&(C.alternate.child=null,C.alternate.return=null)}ra=ra.nextEffect}}catch(e){E=!0,_=e}E&&(null===ra&&p("178"),fa(ra,_),null!==ra&&(ra=ra.nextEffect))}if(O=Yr,T=u(),x=O.focusedElem,E=O.selectionRange,T!==x&&l(document.documentElement,x)){qn(x)&&(T=E.start,void 0===(O=E.end)&&(O=T),"selectionStart"in x?(x.selectionStart=T,x.selectionEnd=Math.min(O,x.value.length)):window.getSelection&&(T=window.getSelection(),_=x[he()].length,O=Math.min(E.start,_),E=void 0===E.end?O:Math.min(E.end,_),!T.extend&&O>E&&(_=E,E=O,O=_),_=zn(x,O),C=zn(x,E),_&&C&&(1!==T.rangeCount||T.anchorNode!==_.node||T.anchorOffset!==_.offset||T.focusNode!==C.node||T.focusOffset!==C.offset)&&((S=document.createRange()).setStart(_.node,_.offset),T.removeAllRanges(),O>E?(T.addRange(S),T.extend(C.node,C.offset)):(S.setEnd(C.node,C.offset),T.addRange(S))))),T=[];for(O=x;O=O.parentNode;)1===O.nodeType&&T.push({element:O,left:O.scrollLeft,top:O.scrollTop});for(x.focus(),x=0;x<T.length;x++)(O=T[x]).element.scrollLeft=O.left,O.element.scrollTop=O.top}for(Yr=null,Rn(Vr),Vr=null,n.current=t,ra=o;null!==ra;){o=!1,x=void 0;try{for(T=r;null!==ra;){var P=ra.effectTag;if(36&P){var R=ra.alternate;switch(E=T,(O=ra).tag){case 2:var A=O.stateNode;if(4&O.effectTag)if(null===R)A.props=O.memoizedProps,A.state=O.memoizedState,A.componentDidMount();else{var N=R.memoizedProps,U=R.memoizedState;A.props=O.memoizedProps,A.state=O.memoizedState,A.componentDidUpdate(N,U,A.__reactInternalSnapshotBeforeUpdate)}var I=O.updateQueue;null!==I&&(A.props=O.memoizedProps,A.state=O.memoizedState,zo(O,I,A));break;case 3:var M=O.updateQueue;if(null!==M){if(_=null,null!==O.child)switch(O.child.tag){case 5:_=O.child.stateNode;break;case 2:_=O.child.stateNode}zo(O,M,_)}break;case 5:var D=O.stateNode;null===R&&4&O.effectTag&&Qr(O.type,O.memoizedProps)&&D.focus();break;case 6:case 4:case 15:case 16:break;default:p("163")}}if(128&P){O=void 0;var L=ra.ref;if(null!==L){var j=ra.stateNode;switch(ra.tag){case 5:O=j;break;default:O=j}"function"==typeof L?L(O):L.current=O}}var B=ra.nextEffect;ra.nextEffect=null,ra=B}}catch(e){o=!0,x=e}o&&(null===ra&&p("178"),fa(ra,x),null!==ra&&(ra=ra.nextEffect))}Xi=oa=!1,Oo(t.stateNode),0===(t=n.current.expirationTime)&&(aa=null),e.remainingExpirationTime=t}function Qa(){return!(null===Pa||Pa.timeRemaining()>Da)&&(xa=!0)}function $a(e){null===Ca&&p("246"),Ca.remainingExpirationTime=0,Ta||(Ta=!0,Oa=e)}function Ga(e,t){var n=Ra;Ra=!0;try{return e(t)}finally{(Ra=n)||_a||za()}}function Ka(e,t){if(Ra&&!Aa){Aa=!0;try{return e(t)}finally{Aa=!1}}return e(t)}function Xa(e,t){_a&&p("187");var n=Ra;Ra=!0;try{return ga(e,t)}finally{Ra=n,za()}}function Ja(e){var t=Ra;Ra=!0;try{ga(e)}finally{(Ra=t)||_a||qa(1,!1,null)}}function Za(e,t,n,r,o){var i=t.current;if(n){var a;n=n._reactInternalFiber;e:{for(2===an(n)&&2===n.tag||p("170"),a=n;3!==a.tag;){if(lo(a)){a=a.stateNode.__reactInternalMemoizedMergedChildContext;break e}(a=a.return)||p("171")}a=a.stateNode.context}n=lo(n)?yo(n,a):a}else n=f;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=Uo(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),Mo(i,o,r),ha(i,r),r}function es(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?p("188"):p("268",Object.keys(e))),null===(e=cn(t))?null:e.stateNode}function ts(e,t,n,r){var o=t.current;return Za(e,t,n,o=da(ya(),o),r)}function ns(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function rs(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);ko=To(function(e){return t.onCommitFiberRoot(n,e)}),xo=To(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(a({},e,{findHostInstanceByFiber:function(e){return null===(e=cn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}var os=Ga,is=function(e,t,n){if(Na)return e(t,n);Ra||_a||0===ka||(qa(ka,!1,null),ka=0);var r=Na,o=Ra;Ra=Na=!0;try{return e(t,n)}finally{Na=r,(Ra=o)||_a||za()}},as=function(){_a||0===ka||(qa(ka,!1,null),ka=0)};function ss(e){this._expirationTime=pa(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function us(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function cs(e,t,n){this._internalRoot=So(e,t,n)}function ls(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function fs(e,t,n,r,o){ls(n)||p("200");var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var e=ns(i._internalRoot);a.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new cs(e,!1,t)}(n,r),"function"==typeof o){var s=o;o=function(){var e=ns(i._internalRoot);s.call(e)}}Ka(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return ns(i._internalRoot)}function ps(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return ls(t)||p("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:ut,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Be.injectFiberControlledHostComponent(Wr),ss.prototype.render=function(e){this._defer||p("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new us;return Za(e,t,null,n,r._onCommit),r},ss.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},ss.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||p("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&p("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Ha(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},ss.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},us.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},us.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&p("191",n),n()}}},cs.prototype.render=function(e,t){var n=this._internalRoot,r=new us;return null!==(t=void 0===t?null:t)&&r.then(t),ts(e,n,null,r._onCommit),r},cs.prototype.unmount=function(e){var t=this._internalRoot,n=new us;return null!==(e=void 0===e?null:e)&&n.then(e),ts(null,t,null,n._onCommit),n},cs.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new us;return null!==(n=void 0===n?null:n)&&o.then(n),ts(t,r,e,o._onCommit),o},cs.prototype.createBatch=function(){var e=new ss(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Qe=os,$e=is,Ge=as;var ds={createPortal:ps,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:es(e)},hydrate:function(e,t,n){return fs(null,e,t,!0,n)},render:function(e,t,n){return fs(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&p("38"),fs(e,t,n,!1,r)},unmountComponentAtNode:function(e){return ls(e)||p("40"),!!e._reactRootContainer&&(Ka(function(){fs(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return ps.apply(void 0,arguments)},unstable_batchedUpdates:Ga,unstable_deferredUpdates:ma,flushSync:Xa,unstable_flushControlled:Ja,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:B,EventPluginRegistry:S,EventPropagators:ne,ReactControlledComponent:Ye,ReactDOMComponentTree:Y,ReactDOMEventListener:Mn},unstable_createRoot:function(e,t){return new cs(e,!0,null!=t&&!0===t.hydrate)}};rs({findFiberByHostInstance:H,bundleType:0,version:"16.4.0",rendererPackageName:"react-dom"});var hs={default:ds},ys=hs&&ds||hs;e.exports=ys.default?ys.default:ys},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(93)},function(e,t,n){"use strict";
/** @license React v16.4.0
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(34),o=n(17),i=n(33),a=n(16),s="function"==typeof Symbol&&Symbol.for,u=s?Symbol.for("react.element"):60103,c=s?Symbol.for("react.portal"):60106,l=s?Symbol.for("react.fragment"):60107,f=s?Symbol.for("react.strict_mode"):60108,p=s?Symbol.for("react.profiler"):60114,d=s?Symbol.for("react.provider"):60109,h=s?Symbol.for("react.context"):60110,y=s?Symbol.for("react.async_mode"):60111,m=s?Symbol.for("react.forward_ref"):60112;s&&Symbol.for("react.timeout");var g="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function w(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||b}function E(){}function _(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||b}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&v("85"),this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},E.prototype=w.prototype;var C=_.prototype=new E;C.constructor=_,r(C,w.prototype),C.isPureReactComponent=!0;var S={current:null},k=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function T(e,t,n){var r=void 0,o={},i=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,r)&&!x.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){for(var c=Array(s),l=0;l<s;l++)c[l]=arguments[l+2];o.children=c}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===o[r]&&(o[r]=s[r]);return{$$typeof:u,type:e,key:i,ref:a,props:o,_owner:S.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===u}var P=/\/+/g,R=[];function A(e,t,n,r){if(R.length){var o=R.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function N(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>R.length&&R.push(e)}function U(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var i=!1;if(null===e)i=!0;else switch(o){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case u:case c:i=!0}}if(i)return n(r,e,""===t?"."+I(e,0):t),1;if(i=0,t=""===t?".":t+":",Array.isArray(e))for(var a=0;a<e.length;a++){var s=t+I(o=e[a],a);i+=U(o,s,n,r)}else if(null===e||void 0===e?s=null:s="function"==typeof(s=g&&e[g]||e["@@iterator"])?s:null,"function"==typeof s)for(e=s.call(e),a=0;!(o=e.next()).done;)i+=U(o=o.value,s=t+I(o,a++),n,r);else"object"===o&&v("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return i}function I(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function M(e,t){e.func.call(e.context,t,e.count++)}function D(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?L(e,r,n,a.thatReturnsArgument):null!=e&&(O(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(P,"$&/")+"/")+n,e={$$typeof:u,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function L(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(P,"$&/")+"/"),t=A(t,i,r,o),null==e||U(e,"",D,t),N(t)}var j={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return L(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=A(null,null,t,n),null==e||U(e,"",M,t),N(t)},count:function(e){return null==e?0:U(e,"",a.thatReturnsNull,null)},toArray:function(e){var t=[];return L(e,t,null,a.thatReturnsArgument),t},only:function(e){return O(e)||v("143"),e}},createRef:function(){return{current:null}},Component:w,PureComponent:_,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:h,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_currentValue2:e,_changedBits:0,_changedBits2:0,Provider:null,Consumer:null}).Provider={$$typeof:d,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:m,render:e}},Fragment:l,StrictMode:f,unstable_AsyncMode:y,unstable_Profiler:p,createElement:T,cloneElement:function(e,t,n){(null===e||void 0===e)&&v("267",e);var o=void 0,i=r({},e.props),a=e.key,s=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(s=t.ref,c=S.current),void 0!==t.key&&(a=""+t.key);var l=void 0;for(o in e.type&&e.type.defaultProps&&(l=e.type.defaultProps),t)k.call(t,o)&&!x.hasOwnProperty(o)&&(i[o]=void 0===t[o]&&void 0!==l?l[o]:t[o])}if(1===(o=arguments.length-2))i.children=n;else if(1<o){l=Array(o);for(var f=0;f<o;f++)l[f]=arguments[f+2];i.children=l}return{$$typeof:u,type:e.type,key:a,ref:s,props:i,_owner:c}},createFactory:function(e){var t=T.bind(null,e);return t.type=e,t},isValidElement:O,version:"16.4.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:S,assign:r}},B={default:j},F=B&&j||B;e.exports=F.default?F.default:F},function(e,t,n){"use strict";var r=l(n(1)),o=l(n(94)),i=l(n(86)),a=l(n(38)),s=n(4),u=l(n(37)),c=n(18);function l(e){return e&&e.__esModule?e:{default:e}}var f=(0,c.createStore)(a.default,(0,c.applyMiddleware)(u.default));o.default.render(r.default.createElement(s.Provider,{store:f},r.default.createElement(i.default,null)),document.getElementById("root"))},function(e,t,n){"use strict";(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.a=n}).call(this,n(0))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9Qcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19yb290LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc1BsYWluT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3dyYXBNYXBUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcERpc3BhdGNoVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBTdGF0ZVRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWVyZ2VQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9zZWxlY3RvckZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvY29ubmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWVtaXR0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWluaGVyaXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcnNlcXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvYWN0aW9ucy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW52YXJpYW50L2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIveG1saHR0cHJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2ludmFyaWFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtYmluZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL3NvY2tldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5kZXhvZi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveWVhc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhcy1iaW5hcnkyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL21hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvaXMtYnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXJzZXVyaS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9Tb2NrZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5T2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9wb255ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXRodW5rL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9yZWR1Y2Vycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9jb21wb25lbnRzL2Nsb3NlLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9jb21wb25lbnRzL0NyZWF0ZVJvb21QYW5lbC5zY3NzIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2NvbXBvbmVudHMvQ3JlYXRlUm9vbVBhbmVsLnNjc3M/MjdlNyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9jb21wb25lbnRzL0NyZWF0ZVJvb21QYW5lbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9jb21wb25lbnRzL0FwcC5zY3NzIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2NvbXBvbmVudHMvQXBwLnNjc3M/OGY2NSIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9jb21wb25lbnRzL0lucHV0Q29tcG9uZW50LnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvY29tcG9uZW50cy9JbnB1dENvbXBvbmVudC5zY3NzP2M3MWMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvY29tcG9uZW50cy9JbnB1dENvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9jb21wb25lbnRzL1Jvb21Db21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvY29tcG9uZW50cy9TZWFyY2hSb29tc0xpc3RDb21wb25lbnQuc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9jb21wb25lbnRzL1NlYXJjaFJvb21zTGlzdENvbXBvbmVudC5zY3NzP2UyOGMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvY29tcG9uZW50cy9TZWFyY2hSb29tc0xpc3RDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhY2tvMi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdG8tYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvd2Vic29ja2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmctanNvbnAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jsb2IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1hcnJheWJ1ZmZlci9saWIvYmFzZTY0LWFycmF5YnVmZmVyLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvbGliL3V0ZjguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FmdGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcnJheWJ1ZmZlci5zbGljZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLWJpbmFyeTIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmcteGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMtY29ycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvc29ja2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9iaW5hcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvZGVidWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvdXJsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2NvbXBvbmVudHMvUm9vbXNMaXN0Q29tcG9uZW50LnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvY29tcG9uZW50cy9Sb29tc0xpc3RDb21wb25lbnQuc2Nzcz82YWVmIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2NvbXBvbmVudHMvUm9vbXNMaXN0Q29tcG9uZW50LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2NvbXBvbmVudHMvQXBwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pc05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzVGV4dE5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2NvbnRhaW5zTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2ZyZWVHbG9iYWwuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwidmFsdWUiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImciLCJ0aGlzIiwiRnVuY3Rpb24iLCJldmFsIiwiZSIsIndpbmRvdyIsInByb2Nlc3MiLCJsb2FkIiwic3RvcmFnZSIsImRlYnVnIiwiZW52IiwiREVCVUciLCJsb2ciLCJjb25zb2xlIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJmb3JtYXRBcmdzIiwiYXJncyIsInVzZUNvbG9ycyIsIm5hbWVzcGFjZSIsImh1bWFuaXplIiwiZGlmZiIsImNvbG9yIiwic3BsaWNlIiwiaW5kZXgiLCJsYXN0QyIsInJlcGxhY2UiLCJtYXRjaCIsInNhdmUiLCJuYW1lc3BhY2VzIiwicmVtb3ZlSXRlbSIsInR5cGUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ0b0xvd2VyQ2FzZSIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJXZWJraXRBcHBlYXJhbmNlIiwiZmlyZWJ1ZyIsImV4Y2VwdGlvbiIsInRhYmxlIiwicGFyc2VJbnQiLCJSZWdFeHAiLCIkMSIsImNocm9tZSIsImxvY2FsIiwibG9jYWxTdG9yYWdlIiwibG9jYWxzdG9yYWdlIiwiY29sb3JzIiwiZm9ybWF0dGVycyIsImoiLCJ2IiwiSlNPTiIsInN0cmluZ2lmeSIsImVyciIsIm1lc3NhZ2UiLCJlbmFibGUiLCJzdWJzY3JpcHRpb25TaGFwZSIsInByb3BfdHlwZXNfZGVmYXVsdCIsImEiLCJzaGFwZSIsInRyeVN1YnNjcmliZSIsImZ1bmMiLCJpc1JlcXVpcmVkIiwidHJ5VW5zdWJzY3JpYmUiLCJub3RpZnlOZXN0ZWRTdWJzIiwiaXNTdWJzY3JpYmVkIiwic3RvcmVTaGFwZSIsInN1YnNjcmliZSIsImRpc3BhdGNoIiwiZ2V0U3RhdGUiLCJjcmVhdGVQcm92aWRlciIsIl9Qcm92aWRlciRjaGlsZENvbnRleCIsInN0b3JlS2V5IiwibGVuZ3RoIiwidW5kZWZpbmVkIiwic3Vic2NyaXB0aW9uS2V5IiwiUHJvdmlkZXIiLCJfQ29tcG9uZW50IiwicHJvcHMiLCJjb250ZXh0IiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9jbGFzc0NhbGxDaGVjayIsIl90aGlzIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzdG9yZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwid3JpdGFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9pbmhlcml0cyIsImdldENoaWxkQ29udGV4dCIsIl9yZWYiLCJyZW5kZXIiLCJyZWFjdCIsIm9ubHkiLCJjaGlsZHJlbiIsInByb3BUeXBlcyIsImVsZW1lbnQiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbXBvbmVudHNfUHJvdmlkZXIiLCJDTEVBUkVEIiwibnVsbExpc3RlbmVycyIsIm5vdGlmeSIsIlN1YnNjcmlwdGlvbiIsInBhcmVudFN1YiIsIm9uU3RhdGVDaGFuZ2UiLCJTdWJzY3JpcHRpb25fY2xhc3NDYWxsQ2hlY2siLCJ1bnN1YnNjcmliZSIsImxpc3RlbmVycyIsImFkZE5lc3RlZFN1YiIsImxpc3RlbmVyIiwiQm9vbGVhbiIsImN1cnJlbnQiLCJuZXh0IiwiY2xlYXIiLCJzbGljZSIsInB1c2giLCJpbmRleE9mIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJzb3VyY2UiLCJrZXkiLCJob3RSZWxvYWRpbmdWZXJzaW9uIiwiZHVtbXlTdGF0ZSIsIm5vb3AiLCJjb25uZWN0QWR2YW5jZWQiLCJzZWxlY3RvckZhY3RvcnkiLCJfY29udGV4dFR5cGVzIiwiX2NoaWxkQ29udGV4dFR5cGVzIiwiX3JlZiRnZXREaXNwbGF5TmFtZSIsImdldERpc3BsYXlOYW1lIiwiX3JlZiRtZXRob2ROYW1lIiwibWV0aG9kTmFtZSIsIl9yZWYkcmVuZGVyQ291bnRQcm9wIiwicmVuZGVyQ291bnRQcm9wIiwiX3JlZiRzaG91bGRIYW5kbGVTdGF0Iiwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzIiwiX3JlZiRzdG9yZUtleSIsIl9yZWYkd2l0aFJlZiIsIndpdGhSZWYiLCJjb25uZWN0T3B0aW9ucyIsIm9iaiIsImtleXMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJ2ZXJzaW9uIiwiY29udGV4dFR5cGVzIiwiV3JhcHBlZENvbXBvbmVudCIsImJyb3dzZXJfZGVmYXVsdCIsIndyYXBwZWRDb21wb25lbnROYW1lIiwiZGlzcGxheU5hbWUiLCJzZWxlY3RvckZhY3RvcnlPcHRpb25zIiwiQ29ubmVjdCIsImNvbm5lY3RBZHZhbmNlZF9jbGFzc0NhbGxDaGVjayIsImNvbm5lY3RBZHZhbmNlZF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic3RhdGUiLCJyZW5kZXJDb3VudCIsInByb3BzTW9kZSIsInNldFdyYXBwZWRJbnN0YW5jZSIsImJpbmQiLCJpbml0U2VsZWN0b3IiLCJpbml0U3Vic2NyaXB0aW9uIiwiY29ubmVjdEFkdmFuY2VkX2luaGVyaXRzIiwiX3JlZjIiLCJzdWJzY3JpcHRpb24iLCJjb21wb25lbnREaWRNb3VudCIsInNlbGVjdG9yIiwicnVuIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiZm9yY2VVcGRhdGUiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJnZXRXcmFwcGVkSW5zdGFuY2UiLCJ3cmFwcGVkSW5zdGFuY2UiLCJyZWYiLCJzb3VyY2VTZWxlY3RvciIsImVycm9yIiwibWFrZVNlbGVjdG9yU3RhdGVmdWwiLCJjb21wb25lbnREaWRVcGRhdGUiLCJub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGUiLCJzZXRTdGF0ZSIsImFkZEV4dHJhUHJvcHMiLCJ3aXRoRXh0cmFzIiwiaG9pc3Rfbm9uX3JlYWN0X3N0YXRpY3NfZGVmYXVsdCIsImhhc093biIsImlzIiwieCIsInkiLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJmcmVlU2VsZiIsIl9TeW1ib2wiLCJfZnJlZUdsb2JhbCIsIlN5bWJvbCIsIm9iamVjdFByb3RvIiwidG9TdHJpbmciLCJ0b1N0cmluZ1RhZyIsImdldFByb3RvdHlwZU9mIiwiZnVuY1Byb3RvIiwiaXNQbGFpbk9iamVjdF9vYmplY3RQcm90byIsImZ1bmNUb1N0cmluZyIsIndyYXBNYXBUb1Byb3BzQ29uc3RhbnQiLCJnZXRDb25zdGFudCIsIm9wdGlvbnMiLCJjb25zdGFudCIsImNvbnN0YW50U2VsZWN0b3IiLCJkZXBlbmRzT25Pd25Qcm9wcyIsImdldERlcGVuZHNPbk93blByb3BzIiwibWFwVG9Qcm9wcyIsIndyYXBNYXBUb1Byb3BzRnVuYyIsInByb3h5Iiwic3RhdGVPckRpc3BhdGNoIiwib3duUHJvcHMiLCJjb25uZWN0X21hcERpc3BhdGNoVG9Qcm9wcyIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsInJlZHV4IiwiY29ubmVjdF9tYXBTdGF0ZVRvUHJvcHMiLCJtYXBTdGF0ZVRvUHJvcHMiLCJtZXJnZVByb3BzX2V4dGVuZHMiLCJkZWZhdWx0TWVyZ2VQcm9wcyIsInN0YXRlUHJvcHMiLCJkaXNwYXRjaFByb3BzIiwiY29ubmVjdF9tZXJnZVByb3BzIiwibWVyZ2VQcm9wcyIsInB1cmUiLCJhcmVNZXJnZWRQcm9wc0VxdWFsIiwiaGFzUnVuT25jZSIsIm1lcmdlZFByb3BzIiwibmV4dE1lcmdlZFByb3BzIiwid3JhcE1lcmdlUHJvcHNGdW5jIiwiaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsInB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiYXJlU3RhdGVzRXF1YWwiLCJhcmVPd25Qcm9wc0VxdWFsIiwiYXJlU3RhdGVQcm9wc0VxdWFsIiwiaGFzUnVuQXRMZWFzdE9uY2UiLCJoYW5kbGVTdWJzZXF1ZW50Q2FsbHMiLCJuZXh0U3RhdGUiLCJuZXh0T3duUHJvcHMiLCJuZXh0U3RhdGVQcm9wcyIsInN0YXRlUHJvcHNDaGFuZ2VkIiwicHJvcHNDaGFuZ2VkIiwic3RhdGVDaGFuZ2VkIiwiZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImluaXRNYXBTdGF0ZVRvUHJvcHMiLCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzIiwiaW5pdE1lcmdlUHJvcHMiLCJzZWxlY3RvckZhY3Rvcnlfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJjb25uZWN0X2V4dGVuZHMiLCJhcmciLCJmYWN0b3JpZXMiLCJyZXN1bHQiLCJFcnJvciIsInN0cmljdEVxdWFsIiwiYiIsImNvbm5lY3RfY29ubmVjdCIsIl9yZWYkY29ubmVjdEhPQyIsImNvbm5lY3RIT0MiLCJfcmVmJG1hcFN0YXRlVG9Qcm9wc0YiLCJtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1hcERpc3BhdGNoVG9Qcm8iLCJtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1lcmdlUHJvcHNGYWN0b3IiLCJtZXJnZVByb3BzRmFjdG9yaWVzIiwiX3JlZiRzZWxlY3RvckZhY3RvcnkiLCJfcmVmMiRwdXJlIiwiX3JlZjIkYXJlU3RhdGVzRXF1YWwiLCJfcmVmMiRhcmVPd25Qcm9wc0VxdWEiLCJfcmVmMiRhcmVTdGF0ZVByb3BzRXEiLCJfcmVmMiRhcmVNZXJnZWRQcm9wc0UiLCJleHRyYU9wdGlvbnMiLCJjb25uZWN0X29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZ2xvYmFsIiwiYmFzZTY0ZW5jb2RlciIsImhhc0JpbmFyeSIsInNsaWNlQnVmZmVyIiwiYWZ0ZXIiLCJ1dGY4IiwiQXJyYXlCdWZmZXIiLCJpc0FuZHJvaWQiLCJ0ZXN0IiwiaXNQaGFudG9tSlMiLCJkb250U2VuZEJsb2JzIiwicHJvdG9jb2wiLCJwYWNrZXRzIiwib3BlbiIsImNsb3NlIiwicGluZyIsInBvbmciLCJ1cGdyYWRlIiwicGFja2V0c2xpc3QiLCJkYXRhIiwiQmxvYiIsIm1hcCIsImFyeSIsImVhY2giLCJkb25lIiwiQXJyYXkiLCJlYWNoV2l0aEluZGV4IiwiZWwiLCJjYiIsIm1zZyIsImVuY29kZVBhY2tldCIsInBhY2tldCIsInN1cHBvcnRzQmluYXJ5IiwidXRmOGVuY29kZSIsImNhbGxiYWNrIiwiYnVmZmVyIiwiZW5jb2RlQmFzZTY0UGFja2V0IiwiY29udGVudEFycmF5IiwiVWludDhBcnJheSIsInJlc3VsdEJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJlbmNvZGVBcnJheUJ1ZmZlciIsImZyIiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsInJlYWRBc0FycmF5QnVmZmVyIiwiZW5jb2RlQmxvYkFzQXJyYXlCdWZmZXIiLCJibG9iIiwiZW5jb2RlQmxvYiIsImJhc2U2NCIsImVuY29kZUJhc2U2NE9iamVjdCIsImVuY29kZWQiLCJlbmNvZGUiLCJTdHJpbmciLCJzdHJpY3QiLCJiNjRkYXRhIiwiYjY0Iiwic3BsaXQiLCJyZWFkQXNEYXRhVVJMIiwiZnJvbUNoYXJDb2RlIiwidHlwZWQiLCJiYXNpYyIsImJ0b2EiLCJkZWNvZGVQYWNrZXQiLCJiaW5hcnlUeXBlIiwidXRmOGRlY29kZSIsImNoYXJBdCIsImRlY29kZUJhc2U2NFBhY2tldCIsInN1YnN0ciIsImRlY29kZSIsInRyeURlY29kZSIsIk51bWJlciIsInN1YnN0cmluZyIsInJlc3QiLCJlbmNvZGVQYXlsb2FkIiwiaXNCaW5hcnkiLCJlbmNvZGVQYXlsb2FkQXNCbG9iIiwiZW5jb2RlUGF5bG9hZEFzQXJyYXlCdWZmZXIiLCJkb25lQ2FsbGJhY2siLCJzZXRMZW5ndGhIZWFkZXIiLCJyZXN1bHRzIiwiam9pbiIsImRlY29kZVBheWxvYWQiLCJkZWNvZGVQYXlsb2FkQXNCaW5hcnkiLCJjaHIiLCJlbmNvZGVkUGFja2V0cyIsInRvdGFsTGVuZ3RoIiwicmVkdWNlIiwiYWNjIiwibGVuIiwicmVzdWx0QXJyYXkiLCJidWZmZXJJbmRleCIsImZvckVhY2giLCJpc1N0cmluZyIsImFiIiwidmlldyIsImNoYXJDb2RlQXQiLCJsZW5TdHIiLCJiaW5hcnlJZGVudGlmaWVyIiwic2l6ZSIsImxlbmd0aEFyeSIsImJ1ZmZlclRhaWwiLCJidWZmZXJzIiwidGFpbEFycmF5IiwibXNnTGVuZ3RoIiwidG90YWwiLCJFbWl0dGVyIiwibWl4aW4iLCJvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsImZuIiwiX2NhbGxiYWNrcyIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjYWxsYmFja3MiLCJlbWl0IiwiaGFzTGlzdGVuZXJzIiwibWVtbyIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsImFsbCIsImF0b2IiLCJnZXRFbGVtZW50Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJmaXhVcmxzIiwiYWRkU3R5bGVzVG9Eb20iLCJzdHlsZXMiLCJpdGVtIiwiZG9tU3R5bGUiLCJpZCIsInJlZnMiLCJwYXJ0cyIsImFkZFN0eWxlIiwibGlzdFRvU3R5bGVzIiwibGlzdCIsIm5ld1N0eWxlcyIsImJhc2UiLCJwYXJ0IiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJpbnNlcnRJbnRvIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJmaXJzdENoaWxkIiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiaWR4IiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImF0dHJzIiwiYWRkQXR0cnMiLCJzZXRBdHRyaWJ1dGUiLCJ1cGRhdGUiLCJyZW1vdmUiLCJ0cmFuc2Zvcm0iLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsImxpbmsiLCJyZWwiLCJjcmVhdGVMaW5rRWxlbWVudCIsImF1dG9GaXhVcmxzIiwiY29udmVydFRvQWJzb2x1dGVVcmxzIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJvbGRTcmMiLCJocmVmIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjcmVhdGVUZXh0Tm9kZSIsIm5ld09iaiIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiY3NzTm9kZSIsImNoaWxkTm9kZXMiLCJ1c2VTb3VyY2VNYXAiLCJjb250ZW50IiwiY3NzTWFwcGluZyIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZVJvb3QiLCJjb25jYXQiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJzdHIiLCJxcyIsInFyeSIsInBhaXJzIiwicGFpciIsImRlY29kZVVSSUNvbXBvbmVudCIsIl9Tb2NrZXQiLCJTRVRfUk9PTVNfTElTVF9GSUxURVIiLCJSRVFVRVNUX1VTRVJTX0xJU1RfUEVORElORyIsIlNIT1dfQ1JFQVRFX1JPT01fUEFORUwiLCJISURFX0NSRUFURV9ST09NX1BBTkVMIiwiUkVRVUVTVF9VU0VSU19MSVNUX1NVQ0NFU1MiLCJSRVFVRVNUX1JPT01TX0xJU1RfUEVORElORyIsIlJFUVVFU1RfVVNFUlNfTElTVF9GQUlMRUQiLCJSRVFVRVNUX1JPT01TX0xJU1RfU1VDQ0VTUyIsIlJFUVVFU1RfUk9PTV9EQVRBX1BFTkRJTkciLCJSRVFVRVNUX1JPT01TX0xJU1RfRkFJTEVEIiwiUkVRVUVTVF9ST09NX0RBVEFfU1VDQ0VTUyIsIlJFUVVFU1RfUk9PTV9EQVRBX0ZBSUxFRCIsIlNFTkRfTUVTU0FHRV9QRU5ESU5HIiwiU0VORF9NRVNTQUdFX1NVQ0NFU1MiLCJDUkVBVEVfUk9PTV9QRU5ESU5HIiwiU0VORF9NRVNTQUdFX0ZBSUxFRCIsIkNSRUFURV9ST09NX1NVQ0NFU1MiLCJDUkVBVEVfUk9PTV9GQUlMRUQiLCJzZXRSb29tc0xpc3RGaWx0ZXIiLCJyZXF1ZXN0VXNlcnNMaXN0Iiwic29ja2V0IiwicmVjZWl2ZVVzZXJzTGlzdCIsInVzZXJzTGlzdCIsInJlcXVlc3RSb29tc0xpc3QiLCJyZWNlaXZlUm9vbXNMaXN0Iiwicm9vbXNMaXN0IiwicmVxdWVzdFJvb21EYXRhIiwiZmV0Y2giLCJoZWFkZXJzIiwiQWNjZXB0IiwiQ29udGVudC1UeXBlIiwibWV0aG9kIiwiY3JlZGVudGlhbHMiLCJib2R5IiwidGhlbiIsImpzb24iLCJyb29tRGF0YSIsInNlbmRNZXNzYWdlIiwidXNlciIsInJvb21JZCIsInJlY2VpdmVNZXNzYWdlIiwiY3JlYXRlUm9vbSIsInRpdGxlIiwicGFydGljaXBhbnRzIiwiY29uZGl0aW9uIiwiZm9ybWF0IiwiZiIsImFyZ0luZGV4IiwiZnJhbWVzVG9Qb3AiLCJwYXJzZXIiLCJUcmFuc3BvcnQiLCJvcHRzIiwicGF0aCIsImhvc3RuYW1lIiwicG9ydCIsInNlY3VyZSIsInF1ZXJ5IiwidGltZXN0YW1wUGFyYW0iLCJ0aW1lc3RhbXBSZXF1ZXN0cyIsInJlYWR5U3RhdGUiLCJhZ2VudCIsImVuYWJsZXNYRFIiLCJwZngiLCJwYXNzcGhyYXNlIiwiY2VydCIsImNhIiwiY2lwaGVycyIsInJlamVjdFVuYXV0aG9yaXplZCIsImZvcmNlTm9kZSIsImV4dHJhSGVhZGVycyIsImxvY2FsQWRkcmVzcyIsIm9uRXJyb3IiLCJkZXNjIiwiZGVzY3JpcHRpb24iLCJkb09wZW4iLCJkb0Nsb3NlIiwib25DbG9zZSIsInNlbmQiLCJ3cml0ZSIsIm9uT3BlbiIsIm9uRGF0YSIsIm9uUGFja2V0IiwiaGFzQ09SUyIsInhkb21haW4iLCJ4c2NoZW1lIiwiWE1MSHR0cFJlcXVlc3QiLCJYRG9tYWluUmVxdWVzdCIsImJpbmFyeSIsImlzQXJyYXkiLCJpc0J1ZiIsIkVuY29kZXIiLCJ0eXBlcyIsIkNPTk5FQ1QiLCJESVNDT05ORUNUIiwiRVZFTlQiLCJBQ0siLCJFUlJPUiIsIkJJTkFSWV9FVkVOVCIsIkJJTkFSWV9BQ0siLCJEZWNvZGVyIiwiRVJST1JfUEFDS0VUIiwiZW5jb2RlQXNTdHJpbmciLCJhdHRhY2htZW50cyIsIm5zcCIsInBheWxvYWQiLCJ0cnlTdHJpbmdpZnkiLCJyZWNvbnN0cnVjdG9yIiwiQmluYXJ5UmVjb25zdHJ1Y3RvciIsInJlY29uUGFjayIsInJlbW92ZUJsb2JzIiwiYmxvYmxlc3NEYXRhIiwiZGVjb25zdHJ1Y3Rpb24iLCJkZWNvbnN0cnVjdFBhY2tldCIsInBhY2siLCJ1bnNoaWZ0IiwiZW5jb2RlQXNCaW5hcnkiLCJhZGQiLCJidWYiLCJwYXJzZSIsInRyeVBhcnNlIiwiaXNQYXlsb2FkVmFsaWQiLCJkZWNvZGVTdHJpbmciLCJ0YWtlQmluYXJ5RGF0YSIsImRlc3Ryb3kiLCJmaW5pc2hlZFJlY29uc3RydWN0aW9uIiwiYmluRGF0YSIsInJlY29uc3RydWN0UGFja2V0IiwibWFrZUVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uIiwidGhhdFJldHVybnMiLCJ0aGF0UmV0dXJuc0ZhbHNlIiwidGhhdFJldHVybnNUcnVlIiwidGhhdFJldHVybnNOdWxsIiwidGhhdFJldHVybnNUaGlzIiwidGhhdFJldHVybnNBcmd1bWVudCIsInZhbGlkYXRlRm9ybWF0IiwiQWN0aW9uVHlwZXMiLCJJTklUIiwiTWF0aCIsInJhbmRvbSIsIlJFUExBQ0UiLCJfdHlwZW9mIiwiaXRlcmF0b3IiLCJpc1BsYWluT2JqZWN0IiwicHJvdG8iLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwiYWN0aW9uIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsInN5bWJvbF9vYnNlcnZhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwib2JzZXJ2ZVN0YXRlIiwiZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UiLCJhY3Rpb25UeXBlIiwiY29tYmluZVJlZHVjZXJzIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJmaW5hbFJlZHVjZXJLZXlzIiwic2hhcGVBc3NlcnRpb25FcnJvciIsImFzc2VydFJlZHVjZXJTaGFwZSIsImhhc0NoYW5nZWQiLCJfaSIsIl9rZXkiLCJwcmV2aW91c1N0YXRlRm9yS2V5IiwibmV4dFN0YXRlRm9yS2V5IiwiZXJyb3JNZXNzYWdlIiwiYmluZEFjdGlvbkNyZWF0b3IiLCJhY3Rpb25DcmVhdG9yIiwiYmluZEFjdGlvbkNyZWF0b3JzIiwiYWN0aW9uQ3JlYXRvcnMiLCJib3VuZEFjdGlvbkNyZWF0b3JzIiwiY29tcG9zZSIsIl9sZW4iLCJmdW5jcyIsImFwcGx5TWlkZGxld2FyZSIsIm1pZGRsZXdhcmVzIiwiX2xlbjIiLCJfa2V5MiIsIl9kaXNwYXRjaCIsIm1pZGRsZXdhcmVBUEkiLCJjaGFpbiIsIm1pZGRsZXdhcmUiLCJyb290IiwiX3BvbnlmaWxsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiZXYiLCJ0b0FycmF5IiwicGFyc2VxcyIsImhhc0JpbiIsIlNvY2tldCIsImV2ZW50cyIsImNvbm5lY3QiLCJjb25uZWN0X2Vycm9yIiwiY29ubmVjdF90aW1lb3V0IiwiY29ubmVjdGluZyIsImRpc2Nvbm5lY3QiLCJyZWNvbm5lY3QiLCJyZWNvbm5lY3RfYXR0ZW1wdCIsInJlY29ubmVjdF9mYWlsZWQiLCJyZWNvbm5lY3RfZXJyb3IiLCJyZWNvbm5lY3RpbmciLCJpbyIsImlkcyIsImFja3MiLCJyZWNlaXZlQnVmZmVyIiwic2VuZEJ1ZmZlciIsImNvbm5lY3RlZCIsImRpc2Nvbm5lY3RlZCIsImZsYWdzIiwiYXV0b0Nvbm5lY3QiLCJzdWJFdmVudHMiLCJzdWJzIiwib25vcGVuIiwiY29tcHJlc3MiLCJwb3AiLCJvbmNsb3NlIiwicmVhc29uIiwib25wYWNrZXQiLCJzYW1lTmFtZXNwYWNlIiwicm9vdE5hbWVzcGFjZUVycm9yIiwib25jb25uZWN0Iiwib25ldmVudCIsIm9uYWNrIiwib25kaXNjb25uZWN0IiwiYWNrIiwic2VudCIsImVtaXRCdWZmZXJlZCIsImFyciIsInByZXYiLCJhbHBoYWJldCIsInNlZWQiLCJudW0iLCJmbG9vciIsInllYXN0Iiwibm93IiwiRGF0ZSIsImRlY29kZWQiLCJCdWZmZXIiLCJ3aXRoTmF0aXZlQmxvYiIsIndpdGhOYXRpdmVGaWxlIiwiRmlsZSIsImlzQnVmZmVyIiwidG9KU09OIiwiaW5oZXJpdCIsIlBvbGxpbmciLCJoYXNYSFIyIiwicmVzcG9uc2VUeXBlIiwiZm9yY2VCYXNlNjQiLCJwb2xsIiwicGF1c2UiLCJvblBhdXNlIiwicG9sbGluZyIsImRvUG9sbCIsImNhbGxiYWNrZm4iLCJkb1dyaXRlIiwidXJpIiwic2NoZW1hIiwic2lkIiwiWEhSIiwiSlNPTlAiLCJ3ZWJzb2NrZXQiLCJ4ZCIsInhzIiwianNvbnAiLCJsb2NhdGlvbiIsImlzU1NMIiwiZm9yY2VKU09OUCIsImVpbyIsIkJhY2tvZmYiLCJoYXMiLCJNYW5hZ2VyIiwibnNwcyIsInJlY29ubmVjdGlvbiIsInJlY29ubmVjdGlvbkF0dGVtcHRzIiwiSW5maW5pdHkiLCJyZWNvbm5lY3Rpb25EZWxheSIsInJlY29ubmVjdGlvbkRlbGF5TWF4IiwicmFuZG9taXphdGlvbkZhY3RvciIsImJhY2tvZmYiLCJtaW4iLCJtYXgiLCJqaXR0ZXIiLCJ0aW1lb3V0IiwibGFzdFBpbmciLCJlbmNvZGluZyIsInBhY2tldEJ1ZmZlciIsIl9wYXJzZXIiLCJlbmNvZGVyIiwiZGVjb2RlciIsImVtaXRBbGwiLCJ1cGRhdGVTb2NrZXRJZHMiLCJnZW5lcmF0ZUlkIiwiZW5naW5lIiwiX3JlY29ubmVjdGlvbiIsIl9yZWNvbm5lY3Rpb25BdHRlbXB0cyIsIl9yZWNvbm5lY3Rpb25EZWxheSIsInNldE1pbiIsIl9yYW5kb21pemF0aW9uRmFjdG9yIiwic2V0Sml0dGVyIiwiX3JlY29ubmVjdGlvbkRlbGF5TWF4Iiwic2V0TWF4IiwiX3RpbWVvdXQiLCJtYXliZVJlY29ubmVjdE9uT3BlbiIsImF0dGVtcHRzIiwic2tpcFJlY29ubmVjdCIsIm9wZW5TdWIiLCJlcnJvclN1YiIsImNsZWFudXAiLCJ0aW1lciIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJvbnBpbmciLCJvbnBvbmciLCJvbmRhdGEiLCJvbmRlY29kZWQiLCJvbmVycm9yIiwib25Db25uZWN0aW5nIiwicHJvY2Vzc1BhY2tldFF1ZXVlIiwic2hpZnQiLCJzdWJzTGVuZ3RoIiwicmVzZXQiLCJkZWxheSIsImR1cmF0aW9uIiwib25yZWNvbm5lY3QiLCJhdHRlbXB0Iiwid2l0aE5hdGl2ZUJ1ZmZlciIsIndpdGhOYXRpdmVBcnJheUJ1ZmZlciIsImlzVmlldyIsInJlIiwic3JjIiwiZXhlYyIsImhvc3QiLCJhdXRob3JpdHkiLCJpcHY2dXJpIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidGVzdDEiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidGVzdDIiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsImZyb20iLCJzeW1ib2xzIiwidG8iLCJ2YWwiLCJ0b09iamVjdCIsInN5bWJvbE9ic2VydmFibGVQb255ZmlsbCIsIm9ic2VydmFibGUiLCJSRUFDVF9TVEFUSUNTIiwiZGVmYXVsdFByb3BzIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJkZXNjcmlwdG9yIiwiZmFjdG9yeSIsImNyZWF0ZVRodW5rTWlkZGxld2FyZSIsImV4dHJhQXJndW1lbnQiLCJ0aHVuayIsIndpdGhFeHRyYUFyZ3VtZW50IiwiX3JlZHV4IiwiX2luZGV4IiwiY3VycmVudFVzZXJJbml0aWFsU3RhdGUiLCJ1c2VybmFtZSIsImN1cnJlbnRVc2VyIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiaXNDcmVhdGVSb29tUGFuZWxPcGVuIiwiY3VycmVudFJvb20iLCJtZXNzYWdlcyIsImhtciIsImxvY2FscyIsIl9yZWFjdFJlZHV4IiwiQ3JlYXRlUm9vbVBhbmVsIiwiaGFuZGxlU3VibWl0IiwicHJldmVudERlZmF1bHQiLCJfdGhpcyRwcm9wcyIsIl90aGlzJHN0YXRlIiwiaGFuZGxlQ2hhbmdlIiwiYWRkUGFydGljaXBhbnQiLCJuZXdQYXJ0aWNpcGFudCIsInJlbmRlclVzZXJzTGlzdExlZnQiLCJ1IiwiaW5jbHVkZXMiLCJfcmVhY3QyIiwiZGVmYXVsdCIsIm9uQ2xpY2siLCJSZWFjdCIsIkNvbXBvbmVudCIsIl9wcm9wcyIsIl9wcm9wczIiLCJoaWRlQ3JlYXRlUm9vbVBhbmVsIiwiX3N0YXRlIiwib25TdWJtaXQiLCJwbGFjZWhvbGRlciIsIm9uQ2hhbmdlIiwiX3JlYWN0IiwiSW5wdXRDb21wb25lbnQiLCJfaWQiLCJpbnB1dFJlZiIsImNyZWF0ZVJlZiIsIlB1cmVDb21wb25lbnQiLCJmb2N1cyIsIlJvb21Db21wb25lbnQiLCJfcHJvcHMkY3VycmVudFJvb20iLCJzZWVuQnkiLCJTZWFyY2hSb29tc0xpc3RDb21wb25lbnQiLCJtcyIsImZhY3RvciIsInBvdyIsInJhbmQiLCJkZXZpYXRpb24iLCJhcnJheSIsIk5vZGVXZWJTb2NrZXQiLCJCcm93c2VyV2ViU29ja2V0IiwiV2ViU29ja2V0IiwiTW96V2ViU29ja2V0IiwiV1MiLCJwZXJNZXNzYWdlRGVmbGF0ZSIsInVzaW5nQnJvd3NlcldlYlNvY2tldCIsInByb3RvY29scyIsImNoZWNrIiwid3MiLCJzdXBwb3J0cyIsImFkZEV2ZW50TGlzdGVuZXJzIiwib25tZXNzYWdlIiwidGhyZXNob2xkIiwiSlNPTlBQb2xsaW5nIiwick5ld2xpbmUiLCJyRXNjYXBlZE5ld2xpbmUiLCJlbXB0eSIsIl9fX2VpbyIsInNjcmlwdCIsImZvcm0iLCJpZnJhbWUiLCJhc3luYyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYXJlYSIsImlmcmFtZUlkIiwiY2xhc3NOYW1lIiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0IiwiY29tcGxldGUiLCJpbml0SWZyYW1lIiwiaHRtbCIsInN1Ym1pdCIsImF0dGFjaEV2ZW50Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwiQmxvYkJ1aWxkZXIiLCJXZWJLaXRCbG9iQnVpbGRlciIsIk1TQmxvYkJ1aWxkZXIiLCJNb3pCbG9iQnVpbGRlciIsImJsb2JTdXBwb3J0ZWQiLCJibG9iU3VwcG9ydHNBcnJheUJ1ZmZlclZpZXciLCJibG9iQnVpbGRlclN1cHBvcnRlZCIsImFwcGVuZCIsImdldEJsb2IiLCJtYXBBcnJheUJ1ZmZlclZpZXdzIiwiY2h1bmsiLCJjb3B5Iiwic2V0IiwiYnl0ZU9mZnNldCIsIkJsb2JCdWlsZGVyQ29uc3RydWN0b3IiLCJiYiIsIkJsb2JDb25zdHJ1Y3RvciIsImNoYXJzIiwibG9va3VwIiwiYXJyYXlidWZmZXIiLCJieXRlcyIsImVuY29kZWQxIiwiZW5jb2RlZDIiLCJlbmNvZGVkMyIsImVuY29kZWQ0IiwiYnVmZmVyTGVuZ3RoIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImZyZWVFeHBvcnRzIiwiZnJlZUdsb2JhbCIsImJ5dGVBcnJheSIsImJ5dGVDb3VudCIsImJ5dGVJbmRleCIsInN0cmluZ0Zyb21DaGFyQ29kZSIsInVjczJkZWNvZGUiLCJzdHJpbmciLCJleHRyYSIsIm91dHB1dCIsImNvdW50ZXIiLCJjaGVja1NjYWxhclZhbHVlIiwiY29kZVBvaW50IiwidG9VcHBlckNhc2UiLCJjcmVhdGVCeXRlIiwiZW5jb2RlQ29kZVBvaW50Iiwic3ltYm9sIiwicmVhZENvbnRpbnVhdGlvbkJ5dGUiLCJjb250aW51YXRpb25CeXRlIiwiZGVjb2RlU3ltYm9sIiwiYnl0ZTEiLCJjb2RlUG9pbnRzIiwiYnl0ZVN0cmluZyIsInRtcCIsInVjczJlbmNvZGUiLCJjb3VudCIsImVycl9jYiIsImJhaWwiLCJzdGFydCIsImVuZCIsImFidiIsImlpIiwicmVhZCIsIm9mZnNldCIsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwiTmFOIiwicnQiLCJhYnMiLCJpc05hTiIsIkxOMiIsImxlbnMiLCJnZXRMZW5zIiwidmFsaWRMZW4iLCJwbGFjZUhvbGRlcnNMZW4iLCJ0b0J5dGVBcnJheSIsIkFyciIsIl9ieXRlTGVuZ3RoIiwiY3VyQnl0ZSIsInJldkxvb2t1cCIsImZyb21CeXRlQXJyYXkiLCJ1aW50OCIsImV4dHJhQnl0ZXMiLCJsZW4yIiwiZW5jb2RlQ2h1bmsiLCJjb2RlIiwiaWVlZTc1NCIsImtNYXhMZW5ndGgiLCJUWVBFRF9BUlJBWV9TVVBQT1JUIiwiY3JlYXRlQnVmZmVyIiwidGhhdCIsIlJhbmdlRXJyb3IiLCJlbmNvZGluZ09yT2Zmc2V0IiwiYWxsb2NVbnNhZmUiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5QnVmZmVyIiwiaXNFbmNvZGluZyIsImFjdHVhbCIsImZyb21TdHJpbmciLCJjaGVja2VkIiwiZnJvbU9iamVjdCIsImFzc2VydFNpemUiLCJsb3dlcmVkQ2FzZSIsInV0ZjhUb0J5dGVzIiwiYmFzZTY0VG9CeXRlcyIsInN3YXAiLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsImRpciIsImFycmF5SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwicmVhZFVJbnQxNkJFIiwiZm91bmRJbmRleCIsImZvdW5kIiwiaGV4V3JpdGUiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZWQiLCJ1dGY4V3JpdGUiLCJibGl0QnVmZmVyIiwiYXNjaWlXcml0ZSIsImFzY2lpVG9CeXRlcyIsImxhdGluMVdyaXRlIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1bml0cyIsImhpIiwibG8iLCJ1dGYxNmxlVG9CeXRlcyIsImJhc2U2NFNsaWNlIiwidXRmOFNsaWNlIiwicmVzIiwic2Vjb25kQnl0ZSIsInRoaXJkQnl0ZSIsImZvdXJ0aEJ5dGUiLCJ0ZW1wQ29kZVBvaW50IiwiZmlyc3RCeXRlIiwiYnl0ZXNQZXJTZXF1ZW5jZSIsIk1BWF9BUkdVTUVOVFNfTEVOR1RIIiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiU2xvd0J1ZmZlciIsImFsbG9jIiwiSU5TUEVDVF9NQVhfQllURVMiLCJmb28iLCJzdWJhcnJheSIsInR5cGVkQXJyYXlTdXBwb3J0IiwicG9vbFNpemUiLCJfYXVnbWVudCIsInNwZWNpZXMiLCJmaWxsIiwiYWxsb2NVbnNhZmVTbG93IiwiX2lzQnVmZmVyIiwiY29tcGFyZSIsInBvcyIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImhleFNsaWNlIiwiYXNjaWlTbGljZSIsImxhdGluMVNsaWNlIiwidXRmMTZsZVNsaWNlIiwiZXF1YWxzIiwiaW5zcGVjdCIsInRoaXNTdGFydCIsInRoaXNFbmQiLCJ0aGlzQ29weSIsInRhcmdldENvcHkiLCJpc0Zpbml0ZSIsIl9hcnIiLCJyZXQiLCJvdXQiLCJ0b0hleCIsImNoZWNrT2Zmc2V0IiwiZXh0IiwiY2hlY2tJbnQiLCJvYmplY3RXcml0ZVVJbnQxNiIsImxpdHRsZUVuZGlhbiIsIm9iamVjdFdyaXRlVUludDMyIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsIm5vQXNzZXJ0Iiwid3JpdGVEb3VibGUiLCJuZXdCdWYiLCJzbGljZUxlbiIsInJlYWRVSW50TEUiLCJtdWwiLCJyZWFkVUludEJFIiwicmVhZFVJbnQ4IiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludExFIiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVJbnRMRSIsIndyaXRlVUludEJFIiwid3JpdGVVSW50OCIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludExFIiwibGltaXQiLCJzdWIiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsIklOVkFMSURfQkFTRTY0X1JFIiwibGVhZFN1cnJvZ2F0ZSIsInRyaW0iLCJzdHJpbmd0cmltIiwiYmFzZTY0Y2xlYW4iLCJkc3QiLCJyZXF1ZXN0VGltZW91dCIsIlJlcXVlc3QiLCJ1bmxvYWRIYW5kbGVyIiwicmVxdWVzdHMiLCJhYm9ydCIsInJlcXVlc3QiLCJyZXEiLCJzZW5kWGhyIiwicG9sbFhociIsInhociIsInNldERpc2FibGVIZWFkZXJDaGVjayIsInNldFJlcXVlc3RIZWFkZXIiLCJ3aXRoQ3JlZGVudGlhbHMiLCJoYXNYRFIiLCJvbkxvYWQiLCJyZXNwb25zZVRleHQiLCJjb250ZW50VHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwic3RhdHVzIiwicmVxdWVzdHNDb3VudCIsIm9uU3VjY2VzcyIsImZyb21FcnJvciIsInJlc3BvbnNlIiwidHJhbnNwb3J0cyIsInBhcnNldXJpIiwidHJhbnNwb3J0T3B0aW9ucyIsIndyaXRlQnVmZmVyIiwicHJldkJ1ZmZlckxlbiIsInBvbGljeVBvcnQiLCJyZW1lbWJlclVwZ3JhZGUiLCJvbmx5QmluYXJ5VXBncmFkZXMiLCJ1cGdyYWRlcyIsInBpbmdJbnRlcnZhbCIsInBpbmdUaW1lb3V0IiwicGluZ0ludGVydmFsVGltZXIiLCJwaW5nVGltZW91dFRpbWVyIiwicHJpb3JXZWJzb2NrZXRTdWNjZXNzIiwiY3JlYXRlVHJhbnNwb3J0IiwiY2xvbmUiLCJFSU8iLCJ0cmFuc3BvcnQiLCJzZXRUcmFuc3BvcnQiLCJvbkRyYWluIiwicHJvYmUiLCJmYWlsZWQiLCJvblRyYW5zcG9ydE9wZW4iLCJ1cGdyYWRlTG9zZXNCaW5hcnkiLCJ1cGdyYWRpbmciLCJmbHVzaCIsImZyZWV6ZVRyYW5zcG9ydCIsIm9uVHJhbnNwb3J0Q2xvc2UiLCJvbnVwZ3JhZGUiLCJvbkhhbmRzaGFrZSIsInNldFBpbmciLCJmaWx0ZXJVcGdyYWRlcyIsIm9uSGVhcnRiZWF0Iiwic2VuZFBhY2tldCIsIndhaXRGb3JVcGdyYWRlIiwiY2xlYW51cEFuZENsb3NlIiwiZmlsdGVyZWRVcGdyYWRlcyIsInBhY2tldERhdGEiLCJfZGVjb25zdHJ1Y3RQYWNrZXQiLCJfcGxhY2Vob2xkZXIiLCJuZXdEYXRhIiwiX3JlY29uc3RydWN0UGFja2V0IiwicGVuZGluZ0Jsb2JzIiwiX3JlbW92ZUJsb2JzIiwiY3VyS2V5IiwiY29udGFpbmluZ09iamVjdCIsImZpbGVSZWFkZXIiLCJoIiwicGx1cmFsIiwiY2VpbCIsInBhcnNlRmxvYXQiLCJsb25nIiwicm91bmQiLCJmbXRTaG9ydCIsImNyZWF0ZURlYnVnIiwicHJldlRpbWUiLCJlbmFibGVkIiwiY3VyciIsImNvZXJjZSIsImZvcm1hdHRlciIsImhhc2giLCJzZWxlY3RDb2xvciIsImluaXQiLCJpbnN0YW5jZXMiLCJzdGFjayIsImRpc2FibGUiLCJuYW1lcyIsInNraXBzIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJuZXh0VGljayIsImJyb3dzZXIiLCJhcmd2IiwidmVyc2lvbnMiLCJhZGRMaXN0ZW5lciIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsImxvYyIsInVybCIsImNhY2hlIiwibWFuYWdlcnMiLCJmb3JjZU5ldyIsIm11bHRpcGxleCIsImJhc2VVcmwiLCJjdXJyZW50RGlyIiwicGF0aG5hbWUiLCJmdWxsTWF0Y2giLCJvcmlnVXJsIiwibmV3VXJsIiwidW5xdW90ZWRPcmlnVXJsIiwiUm9vbXNMaXN0Q29tcG9uZW50IiwiaGFuZGxlQ3JlYXRlUm9vbSIsInNob3dDcmVhdGVSb29tUGFuZWwiLCJsYXN0TWVzc2FnZSIsImRhdGUiLCJvcmlnaW5hbE1vZHVsZSIsImludmFyaWFudCIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0Iiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJSZWFjdFByb3BUeXBlcyIsImJvb2wiLCJudW1iZXIiLCJhbnkiLCJhcnJheU9mIiwiaW5zdGFuY2VPZiIsIm5vZGUiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsIkFwcCIsIl9DcmVhdGVSb29tUGFuZWwyIiwiX1NlYXJjaFJvb21zTGlzdENvbXBvbmVudDIiLCJfUm9vbXNMaXN0Q29tcG9uZW50MiIsIl9Sb29tQ29tcG9uZW50MiIsIl9JbnB1dENvbXBvbmVudDIiLCJkZWZhdWx0VmlldyIsIm93bmVyRG9jdW1lbnQiLCJOb2RlIiwibm9kZVR5cGUiLCJub2RlTmFtZSIsImlzTm9kZSIsImlzVGV4dE5vZGUiLCJjb250YWluc05vZGUiLCJvdXRlck5vZGUiLCJpbm5lck5vZGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiZG9jIiwiYWN0aXZlRWxlbWVudCIsImNhblVzZURPTSIsIkV4ZWN1dGlvbkVudmlyb25tZW50IiwiY2FuVXNlV29ya2VycyIsIldvcmtlciIsImNhblVzZUV2ZW50TGlzdGVuZXJzIiwiY2FuVXNlVmlld3BvcnQiLCJzY3JlZW4iLCJpc0luV29ya2VyIiwiYWEiLCJkYSIsImVhIiwiZmEiLCJoYSIsIkEiLCJCIiwiX2NhdWdodEVycm9yIiwiX2hhc0NhdWdodEVycm9yIiwiX3JldGhyb3dFcnJvciIsIl9oYXNSZXRocm93RXJyb3IiLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2siLCJrIiwiaW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yIiwiaGFzQ2F1Z2h0RXJyb3IiLCJjbGVhckNhdWdodEVycm9yIiwicmV0aHJvd0NhdWdodEVycm9yIiwibGEiLCJtYSIsIm5hIiwib2EiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsInBhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJxYSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJyYSIsInNhIiwiZGVwZW5kZW5jaWVzIiwidGEiLCJ1YSIsInZhIiwicGx1Z2lucyIsImV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyIsInJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzIiwicmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llcyIsInBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMiLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwid2EiLCJ4YSIsInlhIiwiemEiLCJjdXJyZW50VGFyZ2V0IiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJFYSIsIkZhIiwiR2EiLCJIYSIsInN0YXRlTm9kZSIsImRpc2FibGVkIiwiSWEiLCJKYSIsIkthIiwiaW5qZWN0aW9uIiwiZ2V0TGlzdGVuZXIiLCJydW5FdmVudHNJbkJhdGNoIiwicnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaCIsIkxhIiwiQyIsIk1hIiwiTmEiLCJ0YWciLCJPYSIsIlBhIiwiUWEiLCJwcmVjYWNoZUZpYmVyTm9kZSIsImdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0SW5zdGFuY2VGcm9tTm9kZSIsImdldE5vZGVGcm9tSW5zdGFuY2UiLCJnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlIiwidXBkYXRlRmliZXJQcm9wcyIsIkYiLCJyZXR1cm4iLCJSYSIsIlNhIiwiZGlzcGF0Y2hDb25maWciLCJUYSIsIl90YXJnZXRJbnN0IiwiVWEiLCJWYSIsIlhhIiwiWWEiLCJaYSIsImFsdGVybmF0ZSIsIiRhIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyIsImFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0IiwiYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzIiwiYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJkYiIsImViIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsImZiIiwiZ2IiLCJoYiIsImliIiwiamIiLCJrYiIsImxiIiwiRyIsIl9yb290IiwiX3N0YXJ0VGV4dCIsIl9mYWxsYmFja1RleHQiLCJtYiIsIm5iIiwib2IiLCJwYiIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJpc1RydXN0ZWQiLCJIIiwibmF0aXZlRXZlbnQiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsInJiIiwiZXZlbnRQb29sIiwic2IiLCJkZXN0cnVjdG9yIiwicWIiLCJnZXRQb29sZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXh0ZW5kIiwidGIiLCJ1YiIsInZiIiwid2IiLCJ4YiIsImRvY3VtZW50TW9kZSIsInliIiwiemIiLCJBYiIsIkJiIiwiYmVmb3JlSW5wdXQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsIkNiIiwiRGIiLCJrZXlDb2RlIiwiRWIiLCJkZXRhaWwiLCJGYiIsIkliIiwid2hpY2giLCJHYiIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiY2hhciIsIkhiIiwiSmIiLCJLYiIsImluamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQiLCJMYiIsIk1iIiwiTmIiLCJyZXN0b3JlQ29udHJvbGxlZFN0YXRlIiwiT2IiLCJQYiIsIlFiIiwiUmIiLCJlbnF1ZXVlU3RhdGVSZXN0b3JlIiwibmVlZHNTdGF0ZVJlc3RvcmUiLCJyZXN0b3JlU3RhdGVJZk5lZWRlZCIsIlNiIiwiVGIiLCJVYiIsIlZiIiwiV2IiLCJYYiIsImRhdGV0aW1lIiwiZGF0ZXRpbWUtbG9jYWwiLCJlbWFpbCIsIm1vbnRoIiwicGFzc3dvcmQiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsInRleHQiLCJ0aW1lIiwid2VlayIsIlliIiwiWmIiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsIiRiIiwiYWMiLCJjYyIsIl92YWx1ZVRyYWNrZXIiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiYmMiLCJkYyIsImVjIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJSZWFjdEN1cnJlbnRPd25lciIsIkkiLCJmb3IiLCJmYyIsImdjIiwiaGMiLCJpYyIsImpjIiwibWMiLCJuYyIsIm9jIiwicGMiLCJxYyIsInJjIiwic2MiLCJ0YyIsInBlbmRpbmdQcm9wcyIsIiQkdHlwZW9mIiwidmMiLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsIndjIiwieGMiLCJ5YyIsIkoiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwiSyIsIkNjIiwiRGMiLCJFYyIsIkFjIiwiQmMiLCJ6YyIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwiRmMiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIkdjIiwiSGMiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJ0YWJJbmRleCIsIk1jIiwiY2hhbmdlIiwiTmMiLCJPYyIsIlBjIiwiUWMiLCJSYyIsIlNjIiwiVGMiLCJVYyIsImRldGFjaEV2ZW50IiwiVmMiLCJXYyIsIlhjIiwiWWMiLCJaYyIsIiRjIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsImFkIiwiYmQiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiY2QiLCJnZXRNb2RpZmllclN0YXRlIiwiZGQiLCJlZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50Iiwic3JjRWxlbWVudCIsInRvRWxlbWVudCIsImZkIiwicG9pbnRlcklkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsImdkIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJoZCIsInBhcmVudFdpbmRvdyIsImVmZmVjdFRhZyIsImpkIiwia2QiLCJjaGlsZCIsInNpYmxpbmciLCJsZCIsIm5kIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIm9kIiwiY2xpcGJvYXJkRGF0YSIsInBkIiwicWQiLCJjaGFyQ29kZSIsInJkIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsInNkIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsInRkIiwicmVwZWF0IiwibG9jYWxlIiwidWQiLCJkYXRhVHJhbnNmZXIiLCJ2ZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJ3ZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwieWQiLCJ6ZCIsIkFkIiwiQmQiLCJpc0ludGVyYWN0aXZlIiwiQ2QiLCJpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUiLCJEZCIsIkVkIiwiRmQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiY29udGFpbmVySW5mbyIsInRvcExldmVsVHlwZSIsIkdkIiwiSWQiLCJMIiwiSmQiLCJLZCIsIkxkIiwiTWQiLCJfZW5hYmxlZCIsInNldEVuYWJsZWQiLCJpc0VuYWJsZWQiLCJ0cmFwQnViYmxlZEV2ZW50IiwidHJhcENhcHR1cmVkRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiTmQiLCJPZCIsIlBkIiwiUWQiLCJSZCIsIlNkIiwidGV4dENvbnRlbnQiLCJUZCIsImNvbnRlbnRFZGl0YWJsZSIsIlVkIiwiVmQiLCJzZWxlY3QiLCJXZCIsIlhkIiwiWWQiLCJaZCIsIiRkIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJhZSIsIm9uU2VsZWN0IiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsImJlIiwicGVyZm9ybWFuY2UiLCJjZSIsImRlIiwiZWUiLCJmZSIsImdlIiwiaGUiLCJpZSIsImplIiwia2UiLCJsZSIsIm1lIiwibmUiLCJkaWRUaW1lb3V0IiwidGltZVJlbWFpbmluZyIsIm9lIiwicGUiLCJ0aW1lb3V0VGltZSIsInNjaGVkdWxlZENhbGxiYWNrIiwiY2FsbGJhY2tJZCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInFlIiwicG9zdE1lc3NhZ2UiLCJzZSIsInVlIiwiQ2hpbGRyZW4iLCJ0ZSIsInZlIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJ3ZSIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJ4ZSIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwieWUiLCJ6ZSIsIkFlIiwiQmUiLCJtYXRobWwiLCJzdmciLCJDZSIsIkRlIiwiRWUiLCJGZSIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJHZSIsImxhc3RDaGlsZCIsIm5vZGVWYWx1ZSIsIkhlIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwiSWUiLCJKZSIsInNldFByb3BlcnR5IiwiS2UiLCJtZW51aXRlbSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJMZSIsIk1lIiwiTmUiLCJPZSIsImJsdXIiLCJQZSIsImNyZWF0ZUVsZW1lbnROUyIsIlFlIiwiUmUiLCJfX2h0bWwiLCJvbmNsaWNrIiwiU2UiLCJUZSIsIlVlIiwiVmUiLCJXZSIsInNldEluaXRpYWxQcm9wZXJ0aWVzIiwiZGlmZlByb3BlcnRpZXMiLCJ1cGRhdGVQcm9wZXJ0aWVzIiwiZGlmZkh5ZHJhdGVkUHJvcGVydGllcyIsImRpZmZIeWRyYXRlZFRleHQiLCJ3YXJuRm9yVW5tYXRjaGVkVGV4dCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQiLCJ3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRUZXh0IiwicXVlcnlTZWxlY3RvckFsbCIsIlhlIiwiWWUiLCJaZSIsImF1dG9Gb2N1cyIsIiRlIiwiYWYiLCJiZiIsImNmIiwiZGYiLCJlZiIsIlNldCIsImZmIiwiZ2YiLCJoZiIsIk0iLCJOIiwiamYiLCJPIiwia2YiLCJsZiIsIm1mIiwibmYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJvZiIsInBmIiwicWYiLCJyZiIsInNmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJ0ZiIsInVmIiwibWVtb2l6ZWRTdGF0ZSIsInVwZGF0ZVF1ZXVlIiwibWVtb2l6ZWRQcm9wcyIsIm1vZGUiLCJsYXN0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZXhwaXJhdGlvblRpbWUiLCJ2ZiIsIndmIiwiaXNSZWFjdENvbXBvbmVudCIsInhmIiwieWYiLCJ6ZiIsInBlbmRpbmdDaGlsZHJlbiIsImltcGxlbWVudGF0aW9uIiwiQWYiLCJlYXJsaWVzdFBlbmRpbmdUaW1lIiwibGF0ZXN0UGVuZGluZ1RpbWUiLCJlYXJsaWVzdFN1c3BlbmRlZFRpbWUiLCJsYXRlc3RTdXNwZW5kZWRUaW1lIiwibGF0ZXN0UGluZ2VkVGltZSIsInBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZSIsImZpbmlzaGVkV29yayIsInBlbmRpbmdDb250ZXh0IiwiaHlkcmF0ZSIsInJlbWFpbmluZ0V4cGlyYXRpb25UaW1lIiwiZmlyc3RCYXRjaCIsIm5leHRTY2hlZHVsZWRSb290IiwiQmYiLCJDZiIsIkRmIiwiRmYiLCJHZiIsIkhmIiwiSWYiLCJiYXNlU3RhdGUiLCJmaXJzdFVwZGF0ZSIsImxhc3RVcGRhdGUiLCJmaXJzdENhcHR1cmVkVXBkYXRlIiwibGFzdENhcHR1cmVkVXBkYXRlIiwiZmlyc3RDYXB0dXJlZEVmZmVjdCIsImxhc3RDYXB0dXJlZEVmZmVjdCIsIkpmIiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJPZiIsIlBmIiwiUWYiLCJ3IiwiUmYiLCJTZiIsIlRmIiwiVWYiLCJWZiIsIldmIiwiWGYiLCJfY29udGV4dCIsIl9jaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJZZiIsIlpmIiwiJGYiLCJhZyIsImJnIiwiY2ciLCJkZyIsInRhZ05hbWUiLCJlZyIsImZnIiwiaGciLCJsZyIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFsRmliZXIiLCJlbnF1ZXVlU2V0U3RhdGUiLCJpZyIsImpnIiwia2ciLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwibWciLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIm5nIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJvZyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsInBnIiwicWciLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwicmciLCJzZyIsIk1hcCIsIlAiLCJrYyIsIkhkIiwidCIsInEiLCJkZWxldGUiLCJFIiwidGciLCJ1ZyIsInZnIiwid2ciLCJ4ZyIsInlnIiwiemciLCJBZyIsIkJnIiwiQ2ciLCJEZyIsIlEiLCJFZyIsIkZnIiwiR2ciLCJSIiwiSGciLCJJZyIsIktnIiwidXBkYXRlciIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImhpZGRlbiIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIkpnIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwiTGciLCJQZyIsIlFnIiwiUmciLCJTZyIsIlRnIiwic3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZyIsIlVnIiwiVmciLCJXZyIsIlhnIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJiaCIsImNoIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJkaCIsImNvbXBvbmVudFN0YWNrIiwiZWgiLCJmaCIsImdoIiwiaGgiLCJpaCIsImpoIiwia2giLCJsaCIsIlMiLCJtaCIsIlQiLCJuaCIsIm9oIiwiVSIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsInZoIiwid2giLCJYIiwieGgiLCJnZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2giLCJ5aCIsInpoIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiViIsIkdoIiwiSGgiLCJXIiwiWSIsIkloIiwiSmgiLCJLaCIsIkxoIiwiWiIsIk1oIiwiTmgiLCJPaCIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiV2giLCJfb25Db21wbGV0ZSIsIlhoIiwiX2V4cGlyYXRpb25UaW1lIiwiX2RlZmVyIiwicmFuZ2VDb3VudCIsIldhIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsIkQiLCJqYSIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwieiIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJnZyIsImxjIiwiYmEiLCJyaSIsInNpIiwiTWciLCJOZyIsInRpIiwidWMiLCJPZyIsInVpIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiZGkiLCJlaSIsImZpIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJFZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZ2kiLCJqaSIsIl9uZXh0IiwiX2hhc0NoaWxkcmVuIiwiX2RpZENvbXBsZXRlIiwiX2NoaWxkcmVuIiwia2kiLCJfZGlkQ29tbWl0IiwiX29uQ29tbWl0IiwibGkiLCJfaW50ZXJuYWxSb290IiwibWkiLCJvaSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJsZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJoYXNBdHRyaWJ1dGUiLCJuaSIsInBpIiwiY29tbWl0IiwidW5tb3VudCIsImNyZWF0ZUJhdGNoIiwicWkiLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfZGVmZXJyZWRVcGRhdGVzIiwiZmx1c2hTeW5jIiwidW5zdGFibGVfZmx1c2hDb250cm9sbGVkIiwiRXZlbnRQbHVnaW5IdWIiLCJFdmVudFBsdWdpblJlZ2lzdHJ5IiwiRXZlbnRQcm9wYWdhdG9ycyIsIlJlYWN0Q29udHJvbGxlZENvbXBvbmVudCIsIlJlYWN0RE9NQ29tcG9uZW50VHJlZSIsIlJlYWN0RE9NRXZlbnRMaXN0ZW5lciIsInVuc3RhYmxlX2NyZWF0ZVJvb3QiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInZpIiwid2kiLCJjaGVja0RDRSIsIl9fc2VsZiIsIl9fc291cmNlIiwia2V5UHJlZml4IiwiPSIsIjoiLCJlc2NhcGUiLCJjcmVhdGVDb250ZXh0IiwiX2RlZmF1bHRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX2NoYW5nZWRCaXRzMiIsIkNvbnN1bWVyIiwiZm9yd2FyZFJlZiIsIkZyYWdtZW50IiwiU3RyaWN0TW9kZSIsInVuc3RhYmxlX0FzeW5jTW9kZSIsInVuc3RhYmxlX1Byb2ZpbGVyIiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlRmFjdG9yeSIsImlzVmFsaWRFbGVtZW50Iiwicm9vdFJlZHVjZXIiLCJSZWFjdERPTSIsIl9BcHAyIiwiZ2V0RWxlbWVudEJ5SWQiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxHQUNBSyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFB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LE9BQVQrTSxFQUFBNU8sS0FBQTZCLEVBQVMrTSxHQUFTZ2lFLGVBQUExVSxFQUFBdjBELFFBQUEsU0FBQWk3QyxvREFBdUZDLGtCQUFBMEIsRUFDNWZ0K0MsT0FBQTh2QyxJQUFVK3lCLEdBQUloeUMsUUFBQWl4QyxHQUFVb0IsRUFBQUwsR0FBQWYsR0FBQWUsRUFBV3ZzRSxFQUFBRCxRQUFBNnNFLEVBQUFyeUMsUUFBQXF5QyxFQUFBcnlDLFFBQUFxeUMsZ0NDckJuQyxRQUFBL3NFLEVBQUEsUUFDQUEsRUFBQSxTQUNBQSxFQUFBLFNBQ0FBLEVBQUEsS0FDQTY1QixFQUFBNzVCLEVBQUEsT0FDQUEsRUFBQSxLQUNBazVCLEVBQUFsNUIsRUFBQSx1REFLQSxJQUFNdUgsR0FBUSxFQUFBMnhCLEVBQUE5TyxhQUNacXFELFdBQ0EsRUFBQXY3QyxFQUFBdE0saUJBQWdCb00sWUFHbEIwN0MsVUFBU3hzRSxPQUNQdXlCLEVBQUFDLFFBQUExYyxjQUFDNmIsRUFBQWx6QixVQUFTWSxNQUFPQSxHQUNma3pCLEVBQUFDLFFBQUExYyxjQUFDMjJELEVBQUFqNkMsUUFBRCxPQUVGMTJCLFNBQVM0d0UsZUFBZSx3Q0NwQjFCLFNBQUFsaEUsR0FDQSxJQUFBK3NCLEVBQUEsaUJBQUEvc0IsUUFBQTVTLGlCQUFBNFMsRUFFQTRaLEVBQUEiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA5Nik7XG4iLCJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoIChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiZcbiAgICBTeW1ib2wuZm9yICYmXG4gICAgU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpKSB8fFxuICAgIDB4ZWFjNztcblxuICB2YXIgaXNWYWxpZEVsZW1lbnQgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG9iamVjdCAhPT0gbnVsbCAmJlxuICAgICAgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG4gIH07XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShpc1ZhbGlkRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lXG4gICAgICAgICAgICAgICAmJiAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lLnN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWxcbiAgICAgICAgICAgICAgICAgIDogbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnIzAwMDBDQycsICcjMDAwMEZGJywgJyMwMDMzQ0MnLCAnIzAwMzNGRicsICcjMDA2NkNDJywgJyMwMDY2RkYnLCAnIzAwOTlDQycsXG4gICcjMDA5OUZGJywgJyMwMENDMDAnLCAnIzAwQ0MzMycsICcjMDBDQzY2JywgJyMwMENDOTknLCAnIzAwQ0NDQycsICcjMDBDQ0ZGJyxcbiAgJyMzMzAwQ0MnLCAnIzMzMDBGRicsICcjMzMzM0NDJywgJyMzMzMzRkYnLCAnIzMzNjZDQycsICcjMzM2NkZGJywgJyMzMzk5Q0MnLFxuICAnIzMzOTlGRicsICcjMzNDQzAwJywgJyMzM0NDMzMnLCAnIzMzQ0M2NicsICcjMzNDQzk5JywgJyMzM0NDQ0MnLCAnIzMzQ0NGRicsXG4gICcjNjYwMENDJywgJyM2NjAwRkYnLCAnIzY2MzNDQycsICcjNjYzM0ZGJywgJyM2NkNDMDAnLCAnIzY2Q0MzMycsICcjOTkwMENDJyxcbiAgJyM5OTAwRkYnLCAnIzk5MzNDQycsICcjOTkzM0ZGJywgJyM5OUNDMDAnLCAnIzk5Q0MzMycsICcjQ0MwMDAwJywgJyNDQzAwMzMnLFxuICAnI0NDMDA2NicsICcjQ0MwMDk5JywgJyNDQzAwQ0MnLCAnI0NDMDBGRicsICcjQ0MzMzAwJywgJyNDQzMzMzMnLCAnI0NDMzM2NicsXG4gICcjQ0MzMzk5JywgJyNDQzMzQ0MnLCAnI0NDMzNGRicsICcjQ0M2NjAwJywgJyNDQzY2MzMnLCAnI0NDOTkwMCcsICcjQ0M5OTMzJyxcbiAgJyNDQ0NDMDAnLCAnI0NDQ0MzMycsICcjRkYwMDAwJywgJyNGRjAwMzMnLCAnI0ZGMDA2NicsICcjRkYwMDk5JywgJyNGRjAwQ0MnLFxuICAnI0ZGMDBGRicsICcjRkYzMzAwJywgJyNGRjMzMzMnLCAnI0ZGMzM2NicsICcjRkYzMzk5JywgJyNGRjMzQ0MnLCAnI0ZGMzNGRicsXG4gICcjRkY2NjAwJywgJyNGRjY2MzMnLCAnI0ZGOTkwMCcsICcjRkY5OTMzJywgJyNGRkNDMDAnLCAnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICAvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG4gIC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG4gIC8vIGV4cGxpY2l0bHlcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmIHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0IGNvbG9ycy5cbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcLyhcXGQrKS8pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcbiAgLy8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcbiAgcmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UpIHx8XG4gICAgLy8gaXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCAod2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSkpIHx8XG4gICAgLy8gaXMgZmlyZWZveCA+PSB2MzE/XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpIHx8XG4gICAgLy8gZG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24odikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVyci5tZXNzYWdlO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gIHZhciB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblxuICBhcmdzWzBdID0gKHVzZUNvbG9ycyA/ICclYycgOiAnJylcbiAgICArIHRoaXMubmFtZXNwYWNlXG4gICAgKyAodXNlQ29sb3JzID8gJyAlYycgOiAnICcpXG4gICAgKyBhcmdzWzBdXG4gICAgKyAodXNlQ29sb3JzID8gJyVjICcgOiAnICcpXG4gICAgKyAnKycgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cbiAgaWYgKCF1c2VDb2xvcnMpIHJldHVybjtcblxuICB2YXIgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG4gIGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpXG5cbiAgLy8gdGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcbiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3RDID0gMDtcbiAgYXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgaWYgKCclJScgPT09IG1hdGNoKSByZXR1cm47XG4gICAgaW5kZXgrKztcbiAgICBpZiAoJyVjJyA9PT0gbWF0Y2gpIHtcbiAgICAgIC8vIHdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuICAgICAgLy8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcbiAgICAgIGxhc3RDID0gaW5kZXg7XG4gICAgfVxuICB9KTtcblxuICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9nKCkge1xuICAvLyB0aGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuICAvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuICByZXR1cm4gJ29iamVjdCcgPT09IHR5cGVvZiBjb25zb2xlXG4gICAgJiYgY29uc29sZS5sb2dcbiAgICAmJiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gIHRyeSB7XG4gICAgaWYgKG51bGwgPT0gbmFtZXNwYWNlcykge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZyA9IG5hbWVzcGFjZXM7XG4gICAgfVxuICB9IGNhdGNoKGUpIHt9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgdmFyIHI7XG4gIHRyeSB7XG4gICAgciA9IGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZztcbiAgfSBjYXRjaChlKSB7fVxuXG4gIC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcbiAgaWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG4gICAgciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuICB9XG5cbiAgcmV0dXJuIHI7XG59XG5cbi8qKlxuICogRW5hYmxlIG5hbWVzcGFjZXMgbGlzdGVkIGluIGBsb2NhbFN0b3JhZ2UuZGVidWdgIGluaXRpYWxseS5cbiAqL1xuXG5leHBvcnRzLmVuYWJsZShsb2FkKCkpO1xuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgfSBjYXRjaCAoZSkge31cbn1cbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmV4cG9ydCB2YXIgc3Vic2NyaXB0aW9uU2hhcGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICB0cnlTdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHRyeVVuc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBub3RpZnlOZXN0ZWRTdWJzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBpc1N1YnNjcmliZWQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn0pO1xuXG5leHBvcnQgdmFyIHN0b3JlU2hhcGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICBzdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBnZXRTdGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufSk7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgeyBDb21wb25lbnQsIENoaWxkcmVuIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHN0b3JlU2hhcGUsIHN1YnNjcmlwdGlvblNoYXBlIH0gZnJvbSAnLi4vdXRpbHMvUHJvcFR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJy4uL3V0aWxzL3dhcm5pbmcnO1xuXG52YXIgZGlkV2FybkFib3V0UmVjZWl2aW5nU3RvcmUgPSBmYWxzZTtcbmZ1bmN0aW9uIHdhcm5BYm91dFJlY2VpdmluZ1N0b3JlKCkge1xuICBpZiAoZGlkV2FybkFib3V0UmVjZWl2aW5nU3RvcmUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZGlkV2FybkFib3V0UmVjZWl2aW5nU3RvcmUgPSB0cnVlO1xuXG4gIHdhcm5pbmcoJzxQcm92aWRlcj4gZG9lcyBub3Qgc3VwcG9ydCBjaGFuZ2luZyBgc3RvcmVgIG9uIHRoZSBmbHkuICcgKyAnSXQgaXMgbW9zdCBsaWtlbHkgdGhhdCB5b3Ugc2VlIHRoaXMgZXJyb3IgYmVjYXVzZSB5b3UgdXBkYXRlZCB0byAnICsgJ1JlZHV4IDIueCBhbmQgUmVhY3QgUmVkdXggMi54IHdoaWNoIG5vIGxvbmdlciBob3QgcmVsb2FkIHJlZHVjZXJzICcgKyAnYXV0b21hdGljYWxseS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJlZHV4L3JlbGVhc2VzLycgKyAndGFnL3YyLjAuMCBmb3IgdGhlIG1pZ3JhdGlvbiBpbnN0cnVjdGlvbnMuJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcm92aWRlcigpIHtcbiAgdmFyIF9Qcm92aWRlciRjaGlsZENvbnRleDtcblxuICB2YXIgc3RvcmVLZXkgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICdzdG9yZSc7XG4gIHZhciBzdWJLZXkgPSBhcmd1bWVudHNbMV07XG5cbiAgdmFyIHN1YnNjcmlwdGlvbktleSA9IHN1YktleSB8fCBzdG9yZUtleSArICdTdWJzY3JpcHRpb24nO1xuXG4gIHZhciBQcm92aWRlciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltzdG9yZUtleV0gPSB0aGlzW3N0b3JlS2V5XSwgX3JlZltzdWJzY3JpcHRpb25LZXldID0gbnVsbCwgX3JlZjtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIocHJvcHMsIGNvbnRleHQpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcm92aWRlcik7XG5cbiAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuXG4gICAgICBfdGhpc1tzdG9yZUtleV0gPSBwcm9wcy5zdG9yZTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBQcm92aWRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIENoaWxkcmVuLm9ubHkodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiAobmV4dFByb3BzKSB7XG4gICAgICBpZiAodGhpc1tzdG9yZUtleV0gIT09IG5leHRQcm9wcy5zdG9yZSkge1xuICAgICAgICB3YXJuQWJvdXRSZWNlaXZpbmdTdG9yZSgpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gICAgc3RvcmU6IHN0b3JlU2hhcGUuaXNSZXF1aXJlZCxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZFxuICB9O1xuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W3N0b3JlS2V5XSA9IHN0b3JlU2hhcGUuaXNSZXF1aXJlZCwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W3N1YnNjcmlwdGlvbktleV0gPSBzdWJzY3JpcHRpb25TaGFwZSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4KTtcblxuICByZXR1cm4gUHJvdmlkZXI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVByb3ZpZGVyKCk7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLy8gZW5jYXBzdWxhdGVzIHRoZSBzdWJzY3JpcHRpb24gbG9naWMgZm9yIGNvbm5lY3RpbmcgYSBjb21wb25lbnQgdG8gdGhlIHJlZHV4IHN0b3JlLCBhc1xuLy8gd2VsbCBhcyBuZXN0aW5nIHN1YnNjcmlwdGlvbnMgb2YgZGVzY2VuZGFudCBjb21wb25lbnRzLCBzbyB0aGF0IHdlIGNhbiBlbnN1cmUgdGhlXG4vLyBhbmNlc3RvciBjb21wb25lbnRzIHJlLXJlbmRlciBiZWZvcmUgZGVzY2VuZGFudHNcblxudmFyIENMRUFSRUQgPSBudWxsO1xudmFyIG51bGxMaXN0ZW5lcnMgPSB7XG4gIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge31cbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpIHtcbiAgLy8gdGhlIGN1cnJlbnQvbmV4dCBwYXR0ZXJuIGlzIGNvcGllZCBmcm9tIHJlZHV4J3MgY3JlYXRlU3RvcmUgY29kZS5cbiAgLy8gVE9ETzogcmVmYWN0b3IrZXhwb3NlIHRoYXQgY29kZSB0byBiZSByZXVzYWJsZSBoZXJlP1xuICB2YXIgY3VycmVudCA9IFtdO1xuICB2YXIgbmV4dCA9IFtdO1xuXG4gIHJldHVybiB7XG4gICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgbmV4dCA9IENMRUFSRUQ7XG4gICAgICBjdXJyZW50ID0gQ0xFQVJFRDtcbiAgICB9LFxuICAgIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnQgPSBuZXh0O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGlzdGVuZXJzW2ldKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH0sXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgaWYgKG5leHQgPT09IGN1cnJlbnQpIG5leHQgPSBjdXJyZW50LnNsaWNlKCk7XG4gICAgICBuZXh0LnB1c2gobGlzdGVuZXIpO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIGlmICghaXNTdWJzY3JpYmVkIHx8IGN1cnJlbnQgPT09IENMRUFSRUQpIHJldHVybjtcbiAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKG5leHQgPT09IGN1cnJlbnQpIG5leHQgPSBjdXJyZW50LnNsaWNlKCk7XG4gICAgICAgIG5leHQuc3BsaWNlKG5leHQuaW5kZXhPZihsaXN0ZW5lciksIDEpO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihzdG9yZSwgcGFyZW50U3ViLCBvblN0YXRlQ2hhbmdlKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN1YnNjcmlwdGlvbik7XG5cbiAgICB0aGlzLnN0b3JlID0gc3RvcmU7XG4gICAgdGhpcy5wYXJlbnRTdWIgPSBwYXJlbnRTdWI7XG4gICAgdGhpcy5vblN0YXRlQ2hhbmdlID0gb25TdGF0ZUNoYW5nZTtcbiAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gIH1cblxuICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLmFkZE5lc3RlZFN1YiA9IGZ1bmN0aW9uIGFkZE5lc3RlZFN1YihsaXN0ZW5lcikge1xuICAgIHRoaXMudHJ5U3Vic2NyaWJlKCk7XG4gICAgcmV0dXJuIHRoaXMubGlzdGVuZXJzLnN1YnNjcmliZShsaXN0ZW5lcik7XG4gIH07XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5ub3RpZnlOZXN0ZWRTdWJzID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3VicygpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfTtcblxuICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLmlzU3Vic2NyaWJlZCA9IGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLnVuc3Vic2NyaWJlKTtcbiAgfTtcblxuICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnRyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSB0aGlzLnBhcmVudFN1YiA/IHRoaXMucGFyZW50U3ViLmFkZE5lc3RlZFN1Yih0aGlzLm9uU3RhdGVDaGFuZ2UpIDogdGhpcy5zdG9yZS5zdWJzY3JpYmUodGhpcy5vblN0YXRlQ2hhbmdlKTtcblxuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKTtcbiAgICB9XG4gIH07XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS50cnlVbnN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTdWJzY3JpcHRpb247XG59KCk7XG5cbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiBhcyBkZWZhdWx0IH07IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBjcmVhdGVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBzdG9yZVNoYXBlLCBzdWJzY3JpcHRpb25TaGFwZSB9IGZyb20gJy4uL3V0aWxzL1Byb3BUeXBlcyc7XG5cbnZhciBob3RSZWxvYWRpbmdWZXJzaW9uID0gMDtcbnZhciBkdW1teVN0YXRlID0ge307XG5mdW5jdGlvbiBub29wKCkge31cbmZ1bmN0aW9uIG1ha2VTZWxlY3RvclN0YXRlZnVsKHNvdXJjZVNlbGVjdG9yLCBzdG9yZSkge1xuICAvLyB3cmFwIHRoZSBzZWxlY3RvciBpbiBhbiBvYmplY3QgdGhhdCB0cmFja3MgaXRzIHJlc3VsdHMgYmV0d2VlbiBydW5zLlxuICB2YXIgc2VsZWN0b3IgPSB7XG4gICAgcnVuOiBmdW5jdGlvbiBydW5Db21wb25lbnRTZWxlY3Rvcihwcm9wcykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG5leHRQcm9wcyA9IHNvdXJjZVNlbGVjdG9yKHN0b3JlLmdldFN0YXRlKCksIHByb3BzKTtcbiAgICAgICAgaWYgKG5leHRQcm9wcyAhPT0gc2VsZWN0b3IucHJvcHMgfHwgc2VsZWN0b3IuZXJyb3IpIHtcbiAgICAgICAgICBzZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUgPSB0cnVlO1xuICAgICAgICAgIHNlbGVjdG9yLnByb3BzID0gbmV4dFByb3BzO1xuICAgICAgICAgIHNlbGVjdG9yLmVycm9yID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgc2VsZWN0b3IuZXJyb3IgPSBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHNlbGVjdG9yO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25uZWN0QWR2YW5jZWQoXG4vKlxuICBzZWxlY3RvckZhY3RvcnkgaXMgYSBmdW5jIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIHJldHVybmluZyB0aGUgc2VsZWN0b3IgZnVuY3Rpb24gdXNlZCB0b1xuICBjb21wdXRlIG5ldyBwcm9wcyBmcm9tIHN0YXRlLCBwcm9wcywgYW5kIGRpc3BhdGNoLiBGb3IgZXhhbXBsZTpcbiAgICAgZXhwb3J0IGRlZmF1bHQgY29ubmVjdEFkdmFuY2VkKChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKHN0YXRlLCBwcm9wcykgPT4gKHtcbiAgICAgIHRoaW5nOiBzdGF0ZS50aGluZ3NbcHJvcHMudGhpbmdJZF0sXG4gICAgICBzYXZlVGhpbmc6IGZpZWxkcyA9PiBkaXNwYXRjaChhY3Rpb25DcmVhdG9ycy5zYXZlVGhpbmcocHJvcHMudGhpbmdJZCwgZmllbGRzKSksXG4gICAgfSkpKFlvdXJDb21wb25lbnQpXG4gICBBY2Nlc3MgdG8gZGlzcGF0Y2ggaXMgcHJvdmlkZWQgdG8gdGhlIGZhY3Rvcnkgc28gc2VsZWN0b3JGYWN0b3JpZXMgY2FuIGJpbmQgYWN0aW9uQ3JlYXRvcnNcbiAgb3V0c2lkZSBvZiB0aGVpciBzZWxlY3RvciBhcyBhbiBvcHRpbWl6YXRpb24uIE9wdGlvbnMgcGFzc2VkIHRvIGNvbm5lY3RBZHZhbmNlZCBhcmUgcGFzc2VkIHRvXG4gIHRoZSBzZWxlY3RvckZhY3RvcnksIGFsb25nIHdpdGggZGlzcGxheU5hbWUgYW5kIFdyYXBwZWRDb21wb25lbnQsIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuXG4gICBOb3RlIHRoYXQgc2VsZWN0b3JGYWN0b3J5IGlzIHJlc3BvbnNpYmxlIGZvciBhbGwgY2FjaGluZy9tZW1vaXphdGlvbiBvZiBpbmJvdW5kIGFuZCBvdXRib3VuZFxuICBwcm9wcy4gRG8gbm90IHVzZSBjb25uZWN0QWR2YW5jZWQgZGlyZWN0bHkgd2l0aG91dCBtZW1vaXppbmcgcmVzdWx0cyBiZXR3ZWVuIGNhbGxzIHRvIHlvdXJcbiAgc2VsZWN0b3IsIG90aGVyd2lzZSB0aGUgQ29ubmVjdCBjb21wb25lbnQgd2lsbCByZS1yZW5kZXIgb24gZXZlcnkgc3RhdGUgb3IgcHJvcHMgY2hhbmdlLlxuKi9cbnNlbGVjdG9yRmFjdG9yeSkge1xuICB2YXIgX2NvbnRleHRUeXBlcywgX2NoaWxkQ29udGV4dFR5cGVzO1xuXG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcbiAgICAgIF9yZWYkZ2V0RGlzcGxheU5hbWUgPSBfcmVmLmdldERpc3BsYXlOYW1lLFxuICAgICAgZ2V0RGlzcGxheU5hbWUgPSBfcmVmJGdldERpc3BsYXlOYW1lID09PSB1bmRlZmluZWQgPyBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiAnQ29ubmVjdEFkdmFuY2VkKCcgKyBuYW1lICsgJyknO1xuICB9IDogX3JlZiRnZXREaXNwbGF5TmFtZSxcbiAgICAgIF9yZWYkbWV0aG9kTmFtZSA9IF9yZWYubWV0aG9kTmFtZSxcbiAgICAgIG1ldGhvZE5hbWUgPSBfcmVmJG1ldGhvZE5hbWUgPT09IHVuZGVmaW5lZCA/ICdjb25uZWN0QWR2YW5jZWQnIDogX3JlZiRtZXRob2ROYW1lLFxuICAgICAgX3JlZiRyZW5kZXJDb3VudFByb3AgPSBfcmVmLnJlbmRlckNvdW50UHJvcCxcbiAgICAgIHJlbmRlckNvdW50UHJvcCA9IF9yZWYkcmVuZGVyQ291bnRQcm9wID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBfcmVmJHJlbmRlckNvdW50UHJvcCxcbiAgICAgIF9yZWYkc2hvdWxkSGFuZGxlU3RhdCA9IF9yZWYuc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzID0gX3JlZiRzaG91bGRIYW5kbGVTdGF0ID09PSB1bmRlZmluZWQgPyB0cnVlIDogX3JlZiRzaG91bGRIYW5kbGVTdGF0LFxuICAgICAgX3JlZiRzdG9yZUtleSA9IF9yZWYuc3RvcmVLZXksXG4gICAgICBzdG9yZUtleSA9IF9yZWYkc3RvcmVLZXkgPT09IHVuZGVmaW5lZCA/ICdzdG9yZScgOiBfcmVmJHN0b3JlS2V5LFxuICAgICAgX3JlZiR3aXRoUmVmID0gX3JlZi53aXRoUmVmLFxuICAgICAgd2l0aFJlZiA9IF9yZWYkd2l0aFJlZiA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcmVmJHdpdGhSZWYsXG4gICAgICBjb25uZWN0T3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbJ2dldERpc3BsYXlOYW1lJywgJ21ldGhvZE5hbWUnLCAncmVuZGVyQ291bnRQcm9wJywgJ3Nob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcycsICdzdG9yZUtleScsICd3aXRoUmVmJ10pO1xuXG4gIHZhciBzdWJzY3JpcHRpb25LZXkgPSBzdG9yZUtleSArICdTdWJzY3JpcHRpb24nO1xuICB2YXIgdmVyc2lvbiA9IGhvdFJlbG9hZGluZ1ZlcnNpb24rKztcblxuICB2YXIgY29udGV4dFR5cGVzID0gKF9jb250ZXh0VHlwZXMgPSB7fSwgX2NvbnRleHRUeXBlc1tzdG9yZUtleV0gPSBzdG9yZVNoYXBlLCBfY29udGV4dFR5cGVzW3N1YnNjcmlwdGlvbktleV0gPSBzdWJzY3JpcHRpb25TaGFwZSwgX2NvbnRleHRUeXBlcyk7XG4gIHZhciBjaGlsZENvbnRleHRUeXBlcyA9IChfY2hpbGRDb250ZXh0VHlwZXMgPSB7fSwgX2NoaWxkQ29udGV4dFR5cGVzW3N1YnNjcmlwdGlvbktleV0gPSBzdWJzY3JpcHRpb25TaGFwZSwgX2NoaWxkQ29udGV4dFR5cGVzKTtcblxuICByZXR1cm4gZnVuY3Rpb24gd3JhcFdpdGhDb25uZWN0KFdyYXBwZWRDb21wb25lbnQpIHtcbiAgICBpbnZhcmlhbnQodHlwZW9mIFdyYXBwZWRDb21wb25lbnQgPT0gJ2Z1bmN0aW9uJywgJ1lvdSBtdXN0IHBhc3MgYSBjb21wb25lbnQgdG8gdGhlIGZ1bmN0aW9uIHJldHVybmVkIGJ5ICcgKyAobWV0aG9kTmFtZSArICcuIEluc3RlYWQgcmVjZWl2ZWQgJyArIEpTT04uc3RyaW5naWZ5KFdyYXBwZWRDb21wb25lbnQpKSk7XG5cbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudE5hbWUgPSBXcmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IFdyYXBwZWRDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JztcblxuICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKHdyYXBwZWRDb21wb25lbnROYW1lKTtcblxuICAgIHZhciBzZWxlY3RvckZhY3RvcnlPcHRpb25zID0gX2V4dGVuZHMoe30sIGNvbm5lY3RPcHRpb25zLCB7XG4gICAgICBnZXREaXNwbGF5TmFtZTogZ2V0RGlzcGxheU5hbWUsXG4gICAgICBtZXRob2ROYW1lOiBtZXRob2ROYW1lLFxuICAgICAgcmVuZGVyQ291bnRQcm9wOiByZW5kZXJDb3VudFByb3AsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHN0b3JlS2V5OiBzdG9yZUtleSxcbiAgICAgIHdpdGhSZWY6IHdpdGhSZWYsXG4gICAgICBkaXNwbGF5TmFtZTogZGlzcGxheU5hbWUsXG4gICAgICB3cmFwcGVkQ29tcG9uZW50TmFtZTogd3JhcHBlZENvbXBvbmVudE5hbWUsXG4gICAgICBXcmFwcGVkQ29tcG9uZW50OiBXcmFwcGVkQ29tcG9uZW50XG4gICAgfSk7XG5cbiAgICB2YXIgQ29ubmVjdCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgICBfaW5oZXJpdHMoQ29ubmVjdCwgX0NvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIENvbm5lY3QocHJvcHMsIGNvbnRleHQpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbm5lY3QpO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuXG4gICAgICAgIF90aGlzLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICBfdGhpcy5zdGF0ZSA9IHt9O1xuICAgICAgICBfdGhpcy5yZW5kZXJDb3VudCA9IDA7XG4gICAgICAgIF90aGlzLnN0b3JlID0gcHJvcHNbc3RvcmVLZXldIHx8IGNvbnRleHRbc3RvcmVLZXldO1xuICAgICAgICBfdGhpcy5wcm9wc01vZGUgPSBCb29sZWFuKHByb3BzW3N0b3JlS2V5XSk7XG4gICAgICAgIF90aGlzLnNldFdyYXBwZWRJbnN0YW5jZSA9IF90aGlzLnNldFdyYXBwZWRJbnN0YW5jZS5iaW5kKF90aGlzKTtcblxuICAgICAgICBpbnZhcmlhbnQoX3RoaXMuc3RvcmUsICdDb3VsZCBub3QgZmluZCBcIicgKyBzdG9yZUtleSArICdcIiBpbiBlaXRoZXIgdGhlIGNvbnRleHQgb3IgcHJvcHMgb2YgJyArICgnXCInICsgZGlzcGxheU5hbWUgKyAnXCIuIEVpdGhlciB3cmFwIHRoZSByb290IGNvbXBvbmVudCBpbiBhIDxQcm92aWRlcj4sICcpICsgKCdvciBleHBsaWNpdGx5IHBhc3MgXCInICsgc3RvcmVLZXkgKyAnXCIgYXMgYSBwcm9wIHRvIFwiJyArIGRpc3BsYXlOYW1lICsgJ1wiLicpKTtcblxuICAgICAgICBfdGhpcy5pbml0U2VsZWN0b3IoKTtcbiAgICAgICAgX3RoaXMuaW5pdFN1YnNjcmlwdGlvbigpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICB9XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgICAgdmFyIF9yZWYyO1xuXG4gICAgICAgIC8vIElmIHRoaXMgY29tcG9uZW50IHJlY2VpdmVkIHN0b3JlIGZyb20gcHJvcHMsIGl0cyBzdWJzY3JpcHRpb24gc2hvdWxkIGJlIHRyYW5zcGFyZW50XG4gICAgICAgIC8vIHRvIGFueSBkZXNjZW5kYW50cyByZWNlaXZpbmcgc3RvcmUrc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dDsgaXQgcGFzc2VzIGFsb25nXG4gICAgICAgIC8vIHN1YnNjcmlwdGlvbiBwYXNzZWQgdG8gaXQuIE90aGVyd2lzZSwgaXQgc2hhZG93cyB0aGUgcGFyZW50IHN1YnNjcmlwdGlvbiwgd2hpY2ggYWxsb3dzXG4gICAgICAgIC8vIENvbm5lY3QgdG8gY29udHJvbCBvcmRlcmluZyBvZiBub3RpZmljYXRpb25zIHRvIGZsb3cgdG9wLWRvd24uXG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLnByb3BzTW9kZSA/IG51bGwgOiB0aGlzLnN1YnNjcmlwdGlvbjtcbiAgICAgICAgcmV0dXJuIF9yZWYyID0ge30sIF9yZWYyW3N1YnNjcmlwdGlvbktleV0gPSBzdWJzY3JpcHRpb24gfHwgdGhpcy5jb250ZXh0W3N1YnNjcmlwdGlvbktleV0sIF9yZWYyO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjtcblxuICAgICAgICAvLyBjb21wb25lbnRXaWxsTW91bnQgZmlyZXMgZHVyaW5nIHNlcnZlciBzaWRlIHJlbmRlcmluZywgYnV0IGNvbXBvbmVudERpZE1vdW50IGFuZFxuICAgICAgICAvLyBjb21wb25lbnRXaWxsVW5tb3VudCBkbyBub3QuIEJlY2F1c2Ugb2YgdGhpcywgdHJ5U3Vic2NyaWJlIGhhcHBlbnMgZHVyaW5nIC4uLmRpZE1vdW50LlxuICAgICAgICAvLyBPdGhlcndpc2UsIHVuc3Vic2NyaXB0aW9uIHdvdWxkIG5ldmVyIHRha2UgcGxhY2UgZHVyaW5nIFNTUiwgY2F1c2luZyBhIG1lbW9yeSBsZWFrLlxuICAgICAgICAvLyBUbyBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgYSBjaGlsZCBjb21wb25lbnQgbWF5IGhhdmUgdHJpZ2dlcmVkIGEgc3RhdGUgY2hhbmdlIGJ5XG4gICAgICAgIC8vIGRpc3BhdGNoaW5nIGFuIGFjdGlvbiBpbiBpdHMgY29tcG9uZW50V2lsbE1vdW50LCB3ZSBoYXZlIHRvIHJlLXJ1biB0aGUgc2VsZWN0IGFuZCBtYXliZVxuICAgICAgICAvLyByZS1yZW5kZXIuXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnJ1bih0aGlzLnByb3BzKTtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlKSB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4obmV4dFByb3BzKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB0aGlzLnN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicyA9IG5vb3A7XG4gICAgICAgIHRoaXMuc3RvcmUgPSBudWxsO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnJ1biA9IG5vb3A7XG4gICAgICAgIHRoaXMuc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZmFsc2U7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5nZXRXcmFwcGVkSW5zdGFuY2UgPSBmdW5jdGlvbiBnZXRXcmFwcGVkSW5zdGFuY2UoKSB7XG4gICAgICAgIGludmFyaWFudCh3aXRoUmVmLCAnVG8gYWNjZXNzIHRoZSB3cmFwcGVkIGluc3RhbmNlLCB5b3UgbmVlZCB0byBzcGVjaWZ5ICcgKyAoJ3sgd2l0aFJlZjogdHJ1ZSB9IGluIHRoZSBvcHRpb25zIGFyZ3VtZW50IG9mIHRoZSAnICsgbWV0aG9kTmFtZSArICcoKSBjYWxsLicpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMud3JhcHBlZEluc3RhbmNlO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuc2V0V3JhcHBlZEluc3RhbmNlID0gZnVuY3Rpb24gc2V0V3JhcHBlZEluc3RhbmNlKHJlZikge1xuICAgICAgICB0aGlzLndyYXBwZWRJbnN0YW5jZSA9IHJlZjtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmluaXRTZWxlY3RvciA9IGZ1bmN0aW9uIGluaXRTZWxlY3RvcigpIHtcbiAgICAgICAgdmFyIHNvdXJjZVNlbGVjdG9yID0gc2VsZWN0b3JGYWN0b3J5KHRoaXMuc3RvcmUuZGlzcGF0Y2gsIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMpO1xuICAgICAgICB0aGlzLnNlbGVjdG9yID0gbWFrZVNlbGVjdG9yU3RhdGVmdWwoc291cmNlU2VsZWN0b3IsIHRoaXMuc3RvcmUpO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnJ1bih0aGlzLnByb3BzKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmluaXRTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiBpbml0U3Vic2NyaXB0aW9uKCkge1xuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuO1xuXG4gICAgICAgIC8vIHBhcmVudFN1YidzIHNvdXJjZSBzaG91bGQgbWF0Y2ggd2hlcmUgc3RvcmUgY2FtZSBmcm9tOiBwcm9wcyB2cy4gY29udGV4dC4gQSBjb21wb25lbnRcbiAgICAgICAgLy8gY29ubmVjdGVkIHRvIHRoZSBzdG9yZSB2aWEgcHJvcHMgc2hvdWxkbid0IHVzZSBzdWJzY3JpcHRpb24gZnJvbSBjb250ZXh0LCBvciB2aWNlIHZlcnNhLlxuICAgICAgICB2YXIgcGFyZW50U3ViID0gKHRoaXMucHJvcHNNb2RlID8gdGhpcy5wcm9wcyA6IHRoaXMuY29udGV4dClbc3Vic2NyaXB0aW9uS2V5XTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKHRoaXMuc3RvcmUsIHBhcmVudFN1YiwgdGhpcy5vblN0YXRlQ2hhbmdlLmJpbmQodGhpcykpO1xuXG4gICAgICAgIC8vIGBub3RpZnlOZXN0ZWRTdWJzYCBpcyBkdXBsaWNhdGVkIHRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgY29tcG9uZW50IGlzICB1bm1vdW50ZWQgaW5cbiAgICAgICAgLy8gdGhlIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AsIHdoZXJlIGB0aGlzLnN1YnNjcmlwdGlvbmAgd2lsbCB0aGVuIGJlIG51bGwuIEFuXG4gICAgICAgIC8vIGV4dHJhIG51bGwgY2hlY2sgZXZlcnkgY2hhbmdlIGNhbiBiZSBhdm9pZGVkIGJ5IGNvcHlpbmcgdGhlIG1ldGhvZCBvbnRvIGB0aGlzYCBhbmQgdGhlblxuICAgICAgICAvLyByZXBsYWNpbmcgaXQgd2l0aCBhIG5vLW9wIG9uIHVubW91bnQuIFRoaXMgY2FuIHByb2JhYmx5IGJlIGF2b2lkZWQgaWYgU3Vic2NyaXB0aW9uJ3NcbiAgICAgICAgLy8gbGlzdGVuZXJzIGxvZ2ljIGlzIGNoYW5nZWQgdG8gbm90IGNhbGwgbGlzdGVuZXJzIHRoYXQgaGF2ZSBiZWVuIHVuc3Vic2NyaWJlZCBpbiB0aGVcbiAgICAgICAgLy8gbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcC5cbiAgICAgICAgdGhpcy5ub3RpZnlOZXN0ZWRTdWJzID0gdGhpcy5zdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3Vicy5iaW5kKHRoaXMuc3Vic2NyaXB0aW9uKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLm9uU3RhdGVDaGFuZ2UgPSBmdW5jdGlvbiBvblN0YXRlQ2hhbmdlKCkge1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnJ1bih0aGlzLnByb3BzKTtcblxuICAgICAgICBpZiAoIXRoaXMuc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlKSB7XG4gICAgICAgICAgdGhpcy5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5jb21wb25lbnREaWRVcGRhdGUgPSB0aGlzLm5vdGlmeU5lc3RlZFN1YnNPbkNvbXBvbmVudERpZFVwZGF0ZTtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKGR1bW15U3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5ub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICAgIC8vIGBjb21wb25lbnREaWRVcGRhdGVgIGlzIGNvbmRpdGlvbmFsbHkgaW1wbGVtZW50ZWQgd2hlbiBgb25TdGF0ZUNoYW5nZWAgZGV0ZXJtaW5lcyBpdFxuICAgICAgICAvLyBuZWVkcyB0byBub3RpZnkgbmVzdGVkIHN1YnMuIE9uY2UgY2FsbGVkLCBpdCB1bmltcGxlbWVudHMgaXRzZWxmIHVudGlsIGZ1cnRoZXIgc3RhdGVcbiAgICAgICAgLy8gY2hhbmdlcyBvY2N1ci4gRG9pbmcgaXQgdGhpcyB3YXkgdnMgaGF2aW5nIGEgcGVybWFuZW50IGBjb21wb25lbnREaWRVcGRhdGVgIHRoYXQgZG9lc1xuICAgICAgICAvLyBhIGJvb2xlYW4gY2hlY2sgZXZlcnkgdGltZSBhdm9pZHMgYW4gZXh0cmEgbWV0aG9kIGNhbGwgbW9zdCBvZiB0aGUgdGltZSwgcmVzdWx0aW5nXG4gICAgICAgIC8vIGluIHNvbWUgcGVyZiBib29zdC5cbiAgICAgICAgdGhpcy5jb21wb25lbnREaWRVcGRhdGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuaXNTdWJzY3JpYmVkID0gZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbih0aGlzLnN1YnNjcmlwdGlvbikgJiYgdGhpcy5zdWJzY3JpcHRpb24uaXNTdWJzY3JpYmVkKCk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5hZGRFeHRyYVByb3BzID0gZnVuY3Rpb24gYWRkRXh0cmFQcm9wcyhwcm9wcykge1xuICAgICAgICBpZiAoIXdpdGhSZWYgJiYgIXJlbmRlckNvdW50UHJvcCAmJiAhKHRoaXMucHJvcHNNb2RlICYmIHRoaXMuc3Vic2NyaXB0aW9uKSkgcmV0dXJuIHByb3BzO1xuICAgICAgICAvLyBtYWtlIGEgc2hhbGxvdyBjb3B5IHNvIHRoYXQgZmllbGRzIGFkZGVkIGRvbid0IGxlYWsgdG8gdGhlIG9yaWdpbmFsIHNlbGVjdG9yLlxuICAgICAgICAvLyB0aGlzIGlzIGVzcGVjaWFsbHkgaW1wb3J0YW50IGZvciAncmVmJyBzaW5jZSB0aGF0J3MgYSByZWZlcmVuY2UgYmFjayB0byB0aGUgY29tcG9uZW50XG4gICAgICAgIC8vIGluc3RhbmNlLiBhIHNpbmdsZXRvbiBtZW1vaXplZCBzZWxlY3RvciB3b3VsZCB0aGVuIGJlIGhvbGRpbmcgYSByZWZlcmVuY2UgdG8gdGhlXG4gICAgICAgIC8vIGluc3RhbmNlLCBwcmV2ZW50aW5nIHRoZSBpbnN0YW5jZSBmcm9tIGJlaW5nIGdhcmJhZ2UgY29sbGVjdGVkLCBhbmQgdGhhdCB3b3VsZCBiZSBiYWRcbiAgICAgICAgdmFyIHdpdGhFeHRyYXMgPSBfZXh0ZW5kcyh7fSwgcHJvcHMpO1xuICAgICAgICBpZiAod2l0aFJlZikgd2l0aEV4dHJhcy5yZWYgPSB0aGlzLnNldFdyYXBwZWRJbnN0YW5jZTtcbiAgICAgICAgaWYgKHJlbmRlckNvdW50UHJvcCkgd2l0aEV4dHJhc1tyZW5kZXJDb3VudFByb3BdID0gdGhpcy5yZW5kZXJDb3VudCsrO1xuICAgICAgICBpZiAodGhpcy5wcm9wc01vZGUgJiYgdGhpcy5zdWJzY3JpcHRpb24pIHdpdGhFeHRyYXNbc3Vic2NyaXB0aW9uS2V5XSA9IHRoaXMuc3Vic2NyaXB0aW9uO1xuICAgICAgICByZXR1cm4gd2l0aEV4dHJhcztcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gdGhpcy5zZWxlY3RvcjtcbiAgICAgICAgc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHNlbGVjdG9yLmVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgc2VsZWN0b3IuZXJyb3I7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgdGhpcy5hZGRFeHRyYVByb3BzKHNlbGVjdG9yLnByb3BzKSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBDb25uZWN0O1xuICAgIH0oQ29tcG9uZW50KTtcblxuICAgIENvbm5lY3QuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgIENvbm5lY3QuY2hpbGRDb250ZXh0VHlwZXMgPSBjaGlsZENvbnRleHRUeXBlcztcbiAgICBDb25uZWN0LmNvbnRleHRUeXBlcyA9IGNvbnRleHRUeXBlcztcbiAgICBDb25uZWN0LnByb3BUeXBlcyA9IGNvbnRleHRUeXBlcztcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVwZGF0ZSgpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgLy8gV2UgYXJlIGhvdCByZWxvYWRpbmchXG4gICAgICAgIGlmICh0aGlzLnZlcnNpb24gIT09IHZlcnNpb24pIHtcbiAgICAgICAgICB0aGlzLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICAgIHRoaXMuaW5pdFNlbGVjdG9yKCk7XG5cbiAgICAgICAgICAvLyBJZiBhbnkgY29ubmVjdGVkIGRlc2NlbmRhbnRzIGRvbid0IGhvdCByZWxvYWQgKGFuZCByZXN1YnNjcmliZSBpbiB0aGUgcHJvY2VzcyksIHRoZWlyXG4gICAgICAgICAgLy8gbGlzdGVuZXJzIHdpbGwgYmUgbG9zdCB3aGVuIHdlIHVuc3Vic2NyaWJlLiBVbmZvcnR1bmF0ZWx5LCBieSBjb3B5aW5nIG92ZXIgYWxsXG4gICAgICAgICAgLy8gbGlzdGVuZXJzLCB0aGlzIGRvZXMgbWVhbiB0aGF0IHRoZSBvbGQgdmVyc2lvbnMgb2YgY29ubmVjdGVkIGRlc2NlbmRhbnRzIHdpbGwgc3RpbGwgYmVcbiAgICAgICAgICAvLyBub3RpZmllZCBvZiBzdGF0ZSBjaGFuZ2VzOyBob3dldmVyLCB0aGVpciBvblN0YXRlQ2hhbmdlIGZ1bmN0aW9uIGlzIGEgbm8tb3Agc28gdGhpc1xuICAgICAgICAgIC8vIGlzbid0IGEgaHVnZSBkZWFsLlxuICAgICAgICAgIHZhciBvbGRMaXN0ZW5lcnMgPSBbXTtcblxuICAgICAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgb2xkTGlzdGVuZXJzID0gdGhpcy5zdWJzY3JpcHRpb24ubGlzdGVuZXJzLmdldCgpO1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5pbml0U3Vic2NyaXB0aW9uKCk7XG4gICAgICAgICAgaWYgKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykge1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBvbGRMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5zdWJzY3JpcHRpb24ubGlzdGVuZXJzLnN1YnNjcmliZShsaXN0ZW5lcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGhvaXN0U3RhdGljcyhDb25uZWN0LCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgfTtcbn0iLCJ2YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gaXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duLmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59IiwiaW1wb3J0IGZyZWVHbG9iYWwgZnJvbSAnLi9fZnJlZUdsb2JhbC5qcyc7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuZXhwb3J0IGRlZmF1bHQgcm9vdDtcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuZXhwb3J0IGRlZmF1bHQgU3ltYm9sO1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFJhd1RhZztcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBvYmplY3RUb1N0cmluZztcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcbmltcG9ydCBnZXRSYXdUYWcgZnJvbSAnLi9fZ2V0UmF3VGFnLmpzJztcbmltcG9ydCBvYmplY3RUb1N0cmluZyBmcm9tICcuL19vYmplY3RUb1N0cmluZy5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlR2V0VGFnO1xuIiwiaW1wb3J0IG92ZXJBcmcgZnJvbSAnLi9fb3ZlckFyZy5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpO1xuXG5leHBvcnQgZGVmYXVsdCBnZXRQcm90b3R5cGU7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNPYmplY3RMaWtlO1xuIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgZ2V0UHJvdG90eXBlIGZyb20gJy4vX2dldFByb3RvdHlwZS5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xudmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuOC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiB9XG4gKlxuICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc1BsYWluT2JqZWN0O1xuIiwiaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZ2V0Q29uc3RhbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRDb25zdGFudFNlbGVjdG9yKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdmFyIGNvbnN0YW50ID0gZ2V0Q29uc3RhbnQoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gICAgZnVuY3Rpb24gY29uc3RhbnRTZWxlY3RvcigpIHtcbiAgICAgIHJldHVybiBjb25zdGFudDtcbiAgICB9XG4gICAgY29uc3RhbnRTZWxlY3Rvci5kZXBlbmRzT25Pd25Qcm9wcyA9IGZhbHNlO1xuICAgIHJldHVybiBjb25zdGFudFNlbGVjdG9yO1xuICB9O1xufVxuXG4vLyBkZXBlbmRzT25Pd25Qcm9wcyBpcyB1c2VkIGJ5IGNyZWF0ZU1hcFRvUHJvcHNQcm94eSB0byBkZXRlcm1pbmUgd2hldGhlciB0byBwYXNzIHByb3BzIGFzIGFyZ3Ncbi8vIHRvIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIHdyYXBwZWQuIEl0IGlzIGFsc28gdXNlZCBieSBtYWtlUHVyZVByb3BzU2VsZWN0b3IgdG8gZGV0ZXJtaW5lXG4vLyB3aGV0aGVyIG1hcFRvUHJvcHMgbmVlZHMgdG8gYmUgaW52b2tlZCB3aGVuIHByb3BzIGhhdmUgY2hhbmdlZC5cbi8vIFxuLy8gQSBsZW5ndGggb2Ygb25lIHNpZ25hbHMgdGhhdCBtYXBUb1Byb3BzIGRvZXMgbm90IGRlcGVuZCBvbiBwcm9wcyBmcm9tIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuLy8gQSBsZW5ndGggb2YgemVybyBpcyBhc3N1bWVkIHRvIG1lYW4gbWFwVG9Qcm9wcyBpcyBnZXR0aW5nIGFyZ3MgdmlhIGFyZ3VtZW50cyBvciAuLi5hcmdzIGFuZFxuLy8gdGhlcmVmb3JlIG5vdCByZXBvcnRpbmcgaXRzIGxlbmd0aCBhY2N1cmF0ZWx5Li5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSBudWxsICYmIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IHVuZGVmaW5lZCA/IEJvb2xlYW4obWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgOiBtYXBUb1Byb3BzLmxlbmd0aCAhPT0gMTtcbn1cblxuLy8gVXNlZCBieSB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiBhbmQgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sXG4vLyB0aGlzIGZ1bmN0aW9uIHdyYXBzIG1hcFRvUHJvcHMgaW4gYSBwcm94eSBmdW5jdGlvbiB3aGljaCBkb2VzIHNldmVyYWwgdGhpbmdzOlxuLy8gXG4vLyAgKiBEZXRlY3RzIHdoZXRoZXIgdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgY2FsbGVkIGRlcGVuZHMgb24gcHJvcHMsIHdoaWNoXG4vLyAgICBpcyB1c2VkIGJ5IHNlbGVjdG9yRmFjdG9yeSB0byBkZWNpZGUgaWYgaXQgc2hvdWxkIHJlaW52b2tlIG9uIHByb3BzIGNoYW5nZXMuXG4vLyAgICBcbi8vICAqIE9uIGZpcnN0IGNhbGwsIGhhbmRsZXMgbWFwVG9Qcm9wcyBpZiByZXR1cm5zIGFub3RoZXIgZnVuY3Rpb24sIGFuZCB0cmVhdHMgdGhhdFxuLy8gICAgbmV3IGZ1bmN0aW9uIGFzIHRoZSB0cnVlIG1hcFRvUHJvcHMgZm9yIHN1YnNlcXVlbnQgY2FsbHMuXG4vLyAgICBcbi8vICAqIE9uIGZpcnN0IGNhbGwsIHZlcmlmaWVzIHRoZSBmaXJzdCByZXN1bHQgaXMgYSBwbGFpbiBvYmplY3QsIGluIG9yZGVyIHRvIHdhcm5cbi8vICAgIHRoZSBkZXZlbG9wZXIgdGhhdCB0aGVpciBtYXBUb1Byb3BzIGZ1bmN0aW9uIGlzIG5vdCByZXR1cm5pbmcgYSB2YWxpZCByZXN1bHQuXG4vLyAgICBcbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwVG9Qcm9wcywgbWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdFByb3h5U2VsZWN0b3IoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lO1xuXG4gICAgdmFyIHByb3h5ID0gZnVuY3Rpb24gbWFwVG9Qcm9wc1Byb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHJldHVybiBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA/IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykgOiBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCk7XG4gICAgfTtcblxuICAgIC8vIGFsbG93IGRldGVjdEZhY3RvcnlBbmRWZXJpZnkgdG8gZ2V0IG93blByb3BzXG4gICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSB0cnVlO1xuXG4gICAgcHJveHkubWFwVG9Qcm9wcyA9IGZ1bmN0aW9uIGRldGVjdEZhY3RvcnlBbmRWZXJpZnkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IG1hcFRvUHJvcHM7XG4gICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpO1xuICAgICAgdmFyIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmICh0eXBlb2YgcHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IHByb3BzO1xuICAgICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKHByb3BzKTtcbiAgICAgICAgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KHByb3BzLCBkaXNwbGF5TmFtZSwgbWV0aG9kTmFtZSk7XG5cbiAgICAgIHJldHVybiBwcm9wcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb3h5O1xuICB9O1xufSIsImltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycyB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24obWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcERpc3BhdGNoVG9Qcm9wcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZyhtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBEaXNwYXRjaFRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiB7IGRpc3BhdGNoOiBkaXNwYXRjaCB9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdChtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcERpc3BhdGNoVG9Qcm9wcyAmJiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnb2JqZWN0JyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyhtYXBEaXNwYXRjaFRvUHJvcHMsIGRpc3BhdGNoKTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZywgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0XTsiLCJpbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcFN0YXRlVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBTdGF0ZVRvUHJvcHMsICdtYXBTdGF0ZVRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmcobWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwU3RhdGVUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nXTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvd25Qcm9wcywgc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdE1lcmdlUHJvcHNQcm94eShkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWUsXG4gICAgICAgIHB1cmUgPSBfcmVmLnB1cmUsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmLmFyZU1lcmdlZFByb3BzRXF1YWw7XG5cbiAgICB2YXIgaGFzUnVuT25jZSA9IGZhbHNlO1xuICAgIHZhciBtZXJnZWRQcm9wcyA9IHZvaWQgMDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZVByb3BzUHJveHkoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgICAgIHZhciBuZXh0TWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcblxuICAgICAgaWYgKGhhc1J1bk9uY2UpIHtcbiAgICAgICAgaWYgKCFwdXJlIHx8ICFhcmVNZXJnZWRQcm9wc0VxdWFsKG5leHRNZXJnZWRQcm9wcywgbWVyZ2VkUHJvcHMpKSBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhc1J1bk9uY2UgPSB0cnVlO1xuICAgICAgICBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QobWVyZ2VkUHJvcHMsIGRpc3BsYXlOYW1lLCAnbWVyZ2VQcm9wcycpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNGdW5jdGlvbihtZXJnZVByb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWVyZ2VQcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuICFtZXJnZVByb3BzID8gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWVyZ2VQcm9wcztcbiAgfSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgW3doZW5NZXJnZVByb3BzSXNGdW5jdGlvbiwgd2hlbk1lcmdlUHJvcHNJc09taXR0ZWRdOyIsImZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IHZlcmlmeVN1YnNlbGVjdG9ycyBmcm9tICcuL3ZlcmlmeVN1YnNlbGVjdG9ycyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykge1xuICAgIHJldHVybiBtZXJnZVByb3BzKG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpLCBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKSwgb3duUHJvcHMpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBfcmVmKSB7XG4gIHZhciBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYuYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZi5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZi5hcmVTdGF0ZVByb3BzRXF1YWw7XG5cbiAgdmFyIGhhc1J1bkF0TGVhc3RPbmNlID0gZmFsc2U7XG4gIHZhciBzdGF0ZSA9IHZvaWQgMDtcbiAgdmFyIG93blByb3BzID0gdm9pZCAwO1xuICB2YXIgc3RhdGVQcm9wcyA9IHZvaWQgMDtcbiAgdmFyIGRpc3BhdGNoUHJvcHMgPSB2b2lkIDA7XG4gIHZhciBtZXJnZWRQcm9wcyA9IHZvaWQgMDtcblxuICBmdW5jdGlvbiBoYW5kbGVGaXJzdENhbGwoZmlyc3RTdGF0ZSwgZmlyc3RPd25Qcm9wcykge1xuICAgIHN0YXRlID0gZmlyc3RTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IGZpcnN0T3duUHJvcHM7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIGhhc1J1bkF0TGVhc3RPbmNlID0gdHJ1ZTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCkge1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcblxuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHMoKSB7XG4gICAgaWYgKG1hcFN0YXRlVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuXG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdTdGF0ZSgpIHtcbiAgICB2YXIgbmV4dFN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVQcm9wc0NoYW5nZWQgPSAhYXJlU3RhdGVQcm9wc0VxdWFsKG5leHRTdGF0ZVByb3BzLCBzdGF0ZVByb3BzKTtcbiAgICBzdGF0ZVByb3BzID0gbmV4dFN0YXRlUHJvcHM7XG5cbiAgICBpZiAoc3RhdGVQcm9wc0NoYW5nZWQpIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG5cbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICB2YXIgcHJvcHNDaGFuZ2VkID0gIWFyZU93blByb3BzRXF1YWwobmV4dE93blByb3BzLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlQ2hhbmdlZCA9ICFhcmVTdGF0ZXNFcXVhbChuZXh0U3RhdGUsIHN0YXRlKTtcbiAgICBzdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IG5leHRPd25Qcm9wcztcblxuICAgIGlmIChwcm9wc0NoYW5nZWQgJiYgc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpO1xuICAgIGlmIChwcm9wc0NoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wcygpO1xuICAgIGlmIChzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdTdGF0ZSgpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgcmV0dXJuIGhhc1J1bkF0TGVhc3RPbmNlID8gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA6IGhhbmRsZUZpcnN0Q2FsbChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcyk7XG4gIH07XG59XG5cbi8vIFRPRE86IEFkZCBtb3JlIGNvbW1lbnRzXG5cbi8vIElmIHB1cmUgaXMgdHJ1ZSwgdGhlIHNlbGVjdG9yIHJldHVybmVkIGJ5IHNlbGVjdG9yRmFjdG9yeSB3aWxsIG1lbW9pemUgaXRzIHJlc3VsdHMsXG4vLyBhbGxvd2luZyBjb25uZWN0QWR2YW5jZWQncyBzaG91bGRDb21wb25lbnRVcGRhdGUgdG8gcmV0dXJuIGZhbHNlIGlmIGZpbmFsXG4vLyBwcm9wcyBoYXZlIG5vdCBjaGFuZ2VkLiBJZiBmYWxzZSwgdGhlIHNlbGVjdG9yIHdpbGwgYWx3YXlzIHJldHVybiBhIG5ld1xuLy8gb2JqZWN0IGFuZCBzaG91bGRDb21wb25lbnRVcGRhdGUgd2lsbCBhbHdheXMgcmV0dXJuIHRydWUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkoZGlzcGF0Y2gsIF9yZWYyKSB7XG4gIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gX3JlZjIuaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBfcmVmMi5pbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHMgPSBfcmVmMi5pbml0TWVyZ2VQcm9wcyxcbiAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjIsIFsnaW5pdE1hcFN0YXRlVG9Qcm9wcycsICdpbml0TWFwRGlzcGF0Y2hUb1Byb3BzJywgJ2luaXRNZXJnZVByb3BzJ10pO1xuXG4gIHZhciBtYXBTdGF0ZVRvUHJvcHMgPSBpbml0TWFwU3RhdGVUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWVyZ2VQcm9wcyA9IGluaXRNZXJnZVByb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZlcmlmeVN1YnNlbGVjdG9ycyhtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgb3B0aW9ucy5kaXNwbGF5TmFtZSk7XG4gIH1cblxuICB2YXIgc2VsZWN0b3JGYWN0b3J5ID0gb3B0aW9ucy5wdXJlID8gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkgOiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5O1xuXG4gIHJldHVybiBzZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBvcHRpb25zKTtcbn0iLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi4vY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuLi91dGlscy9zaGFsbG93RXF1YWwnO1xuaW1wb3J0IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBEaXNwYXRjaFRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBTdGF0ZVRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIGZyb20gJy4vbWVyZ2VQcm9wcyc7XG5pbXBvcnQgZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSBmcm9tICcuL3NlbGVjdG9yRmFjdG9yeSc7XG5cbi8qXG4gIGNvbm5lY3QgaXMgYSBmYWNhZGUgb3ZlciBjb25uZWN0QWR2YW5jZWQuIEl0IHR1cm5zIGl0cyBhcmdzIGludG8gYSBjb21wYXRpYmxlXG4gIHNlbGVjdG9yRmFjdG9yeSwgd2hpY2ggaGFzIHRoZSBzaWduYXR1cmU6XG5cbiAgICAoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgPT4gbmV4dEZpbmFsUHJvcHNcbiAgXG4gIGNvbm5lY3QgcGFzc2VzIGl0cyBhcmdzIHRvIGNvbm5lY3RBZHZhbmNlZCBhcyBvcHRpb25zLCB3aGljaCB3aWxsIGluIHR1cm4gcGFzcyB0aGVtIHRvXG4gIHNlbGVjdG9yRmFjdG9yeSBlYWNoIHRpbWUgYSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSBpcyBpbnN0YW50aWF0ZWQgb3IgaG90IHJlbG9hZGVkLlxuXG4gIHNlbGVjdG9yRmFjdG9yeSByZXR1cm5zIGEgZmluYWwgcHJvcHMgc2VsZWN0b3IgZnJvbSBpdHMgbWFwU3RhdGVUb1Byb3BzLFxuICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCBtZXJnZVByb3BzLFxuICBtZXJnZVByb3BzRmFjdG9yaWVzLCBhbmQgcHVyZSBhcmdzLlxuXG4gIFRoZSByZXN1bHRpbmcgZmluYWwgcHJvcHMgc2VsZWN0b3IgaXMgY2FsbGVkIGJ5IHRoZSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSB3aGVuZXZlclxuICBpdCByZWNlaXZlcyBuZXcgcHJvcHMgb3Igc3RvcmUgc3RhdGUuXG4gKi9cblxuZnVuY3Rpb24gbWF0Y2goYXJnLCBmYWN0b3JpZXMsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IGZhY3Rvcmllcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciByZXN1bHQgPSBmYWN0b3JpZXNbaV0oYXJnKTtcbiAgICBpZiAocmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBvZiB0eXBlICcgKyB0eXBlb2YgYXJnICsgJyBmb3IgJyArIG5hbWUgKyAnIGFyZ3VtZW50IHdoZW4gY29ubmVjdGluZyBjb21wb25lbnQgJyArIG9wdGlvbnMud3JhcHBlZENvbXBvbmVudE5hbWUgKyAnLicpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHJpY3RFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufVxuXG4vLyBjcmVhdGVDb25uZWN0IHdpdGggZGVmYXVsdCBhcmdzIGJ1aWxkcyB0aGUgJ29mZmljaWFsJyBjb25uZWN0IGJlaGF2aW9yLiBDYWxsaW5nIGl0IHdpdGhcbi8vIGRpZmZlcmVudCBvcHRpb25zIG9wZW5zIHVwIHNvbWUgdGVzdGluZyBhbmQgZXh0ZW5zaWJpbGl0eSBzY2VuYXJpb3NcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb25uZWN0KCkge1xuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICBfcmVmJGNvbm5lY3RIT0MgPSBfcmVmLmNvbm5lY3RIT0MsXG4gICAgICBjb25uZWN0SE9DID0gX3JlZiRjb25uZWN0SE9DID09PSB1bmRlZmluZWQgPyBjb25uZWN0QWR2YW5jZWQgOiBfcmVmJGNvbm5lY3RIT0MsXG4gICAgICBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPSBfcmVmLm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwU3RhdGVUb1Byb3BzRixcbiAgICAgIF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9IF9yZWYubWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBEaXNwYXRjaFRvUHJvID09PSB1bmRlZmluZWQgPyBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBEaXNwYXRjaFRvUHJvLFxuICAgICAgX3JlZiRtZXJnZVByb3BzRmFjdG9yID0gX3JlZi5tZXJnZVByb3BzRmFjdG9yaWVzLFxuICAgICAgbWVyZ2VQcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1lcmdlUHJvcHNGYWN0b3IsXG4gICAgICBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYuc2VsZWN0b3JGYWN0b3J5LFxuICAgICAgc2VsZWN0b3JGYWN0b3J5ID0gX3JlZiRzZWxlY3RvckZhY3RvcnkgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgOiBfcmVmJHNlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcykge1xuICAgIHZhciBfcmVmMiA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge30sXG4gICAgICAgIF9yZWYyJHB1cmUgPSBfcmVmMi5wdXJlLFxuICAgICAgICBwdXJlID0gX3JlZjIkcHVyZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYyJHB1cmUsXG4gICAgICAgIF9yZWYyJGFyZVN0YXRlc0VxdWFsID0gX3JlZjIuYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlc0VxdWFsID0gX3JlZjIkYXJlU3RhdGVzRXF1YWwgPT09IHVuZGVmaW5lZCA/IHN0cmljdEVxdWFsIDogX3JlZjIkYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIF9yZWYyJGFyZU93blByb3BzRXF1YSA9IF9yZWYyLmFyZU93blByb3BzRXF1YWwsXG4gICAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmMiRhcmVPd25Qcm9wc0VxdWEgPT09IHVuZGVmaW5lZCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYyJGFyZU93blByb3BzRXF1YSxcbiAgICAgICAgX3JlZjIkYXJlU3RhdGVQcm9wc0VxID0gX3JlZjIuYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmMiRhcmVTdGF0ZVByb3BzRXEgPT09IHVuZGVmaW5lZCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYyJGFyZVN0YXRlUHJvcHNFcSxcbiAgICAgICAgX3JlZjIkYXJlTWVyZ2VkUHJvcHNFID0gX3JlZjIuYXJlTWVyZ2VkUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYyJGFyZU1lcmdlZFByb3BzRSA9PT0gdW5kZWZpbmVkID8gc2hhbGxvd0VxdWFsIDogX3JlZjIkYXJlTWVyZ2VkUHJvcHNFLFxuICAgICAgICBleHRyYU9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjIsIFsncHVyZScsICdhcmVTdGF0ZXNFcXVhbCcsICdhcmVPd25Qcm9wc0VxdWFsJywgJ2FyZVN0YXRlUHJvcHNFcXVhbCcsICdhcmVNZXJnZWRQcm9wc0VxdWFsJ10pO1xuXG4gICAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBtYXRjaChtYXBTdGF0ZVRvUHJvcHMsIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgJ21hcFN0YXRlVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gbWF0Y2gobWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1lcmdlUHJvcHMgPSBtYXRjaChtZXJnZVByb3BzLCBtZXJnZVByb3BzRmFjdG9yaWVzLCAnbWVyZ2VQcm9wcycpO1xuXG4gICAgcmV0dXJuIGNvbm5lY3RIT0Moc2VsZWN0b3JGYWN0b3J5LCBfZXh0ZW5kcyh7XG4gICAgICAvLyB1c2VkIGluIGVycm9yIG1lc3NhZ2VzXG4gICAgICBtZXRob2ROYW1lOiAnY29ubmVjdCcsXG5cbiAgICAgIC8vIHVzZWQgdG8gY29tcHV0ZSBDb25uZWN0J3MgZGlzcGxheU5hbWUgZnJvbSB0aGUgd3JhcHBlZCBjb21wb25lbnQncyBkaXNwbGF5TmFtZS5cbiAgICAgIGdldERpc3BsYXlOYW1lOiBmdW5jdGlvbiBnZXREaXNwbGF5TmFtZShuYW1lKSB7XG4gICAgICAgIHJldHVybiAnQ29ubmVjdCgnICsgbmFtZSArICcpJztcbiAgICAgIH0sXG5cbiAgICAgIC8vIGlmIG1hcFN0YXRlVG9Qcm9wcyBpcyBmYWxzeSwgdGhlIENvbm5lY3QgY29tcG9uZW50IGRvZXNuJ3Qgc3Vic2NyaWJlIHRvIHN0b3JlIHN0YXRlIGNoYW5nZXNcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogQm9vbGVhbihtYXBTdGF0ZVRvUHJvcHMpLFxuXG4gICAgICAvLyBwYXNzZWQgdGhyb3VnaCB0byBzZWxlY3RvckZhY3RvcnlcbiAgICAgIGluaXRNYXBTdGF0ZVRvUHJvcHM6IGluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzOiBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHM6IGluaXRNZXJnZVByb3BzLFxuICAgICAgcHVyZTogcHVyZSxcbiAgICAgIGFyZVN0YXRlc0VxdWFsOiBhcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWw6IGFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWw6IGFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWw6IGFyZU1lcmdlZFByb3BzRXF1YWxcblxuICAgIH0sIGV4dHJhT3B0aW9ucykpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb25uZWN0KCk7IiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG52YXIgaGFzQmluYXJ5ID0gcmVxdWlyZSgnaGFzLWJpbmFyeTInKTtcbnZhciBzbGljZUJ1ZmZlciA9IHJlcXVpcmUoJ2FycmF5YnVmZmVyLnNsaWNlJyk7XG52YXIgYWZ0ZXIgPSByZXF1aXJlKCdhZnRlcicpO1xudmFyIHV0ZjggPSByZXF1aXJlKCcuL3V0ZjgnKTtcblxudmFyIGJhc2U2NGVuY29kZXI7XG5pZiAoZ2xvYmFsICYmIGdsb2JhbC5BcnJheUJ1ZmZlcikge1xuICBiYXNlNjRlbmNvZGVyID0gcmVxdWlyZSgnYmFzZTY0LWFycmF5YnVmZmVyJyk7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgd2UgYXJlIHJ1bm5pbmcgYW4gYW5kcm9pZCBicm93c2VyLiBUaGF0IHJlcXVpcmVzIHVzIHRvIHVzZVxuICogQXJyYXlCdWZmZXIgd2l0aCBwb2xsaW5nIHRyYW5zcG9ydHMuLi5cbiAqXG4gKiBodHRwOi8vZ2hpbmRhLm5ldC9qcGVnLWJsb2ItYWpheC1hbmRyb2lkL1xuICovXG5cbnZhciBpc0FuZHJvaWQgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvQW5kcm9pZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogQ2hlY2sgaWYgd2UgYXJlIHJ1bm5pbmcgaW4gUGhhbnRvbUpTLlxuICogVXBsb2FkaW5nIGEgQmxvYiB3aXRoIFBoYW50b21KUyBkb2VzIG5vdCB3b3JrIGNvcnJlY3RseSwgYXMgcmVwb3J0ZWQgaGVyZTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hcml5YS9waGFudG9tanMvaXNzdWVzLzExMzk1XG4gKiBAdHlwZSBib29sZWFuXG4gKi9cbnZhciBpc1BoYW50b21KUyA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIC9QaGFudG9tSlMvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIFdoZW4gdHJ1ZSwgYXZvaWRzIHVzaW5nIEJsb2JzIHRvIGVuY29kZSBwYXlsb2Fkcy5cbiAqIEB0eXBlIGJvb2xlYW5cbiAqL1xudmFyIGRvbnRTZW5kQmxvYnMgPSBpc0FuZHJvaWQgfHwgaXNQaGFudG9tSlM7XG5cbi8qKlxuICogQ3VycmVudCBwcm90b2NvbCB2ZXJzaW9uLlxuICovXG5cbmV4cG9ydHMucHJvdG9jb2wgPSAzO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlcy5cbiAqL1xuXG52YXIgcGFja2V0cyA9IGV4cG9ydHMucGFja2V0cyA9IHtcbiAgICBvcGVuOiAgICAgMCAgICAvLyBub24td3NcbiAgLCBjbG9zZTogICAgMSAgICAvLyBub24td3NcbiAgLCBwaW5nOiAgICAgMlxuICAsIHBvbmc6ICAgICAzXG4gICwgbWVzc2FnZTogIDRcbiAgLCB1cGdyYWRlOiAgNVxuICAsIG5vb3A6ICAgICA2XG59O1xuXG52YXIgcGFja2V0c2xpc3QgPSBrZXlzKHBhY2tldHMpO1xuXG4vKipcbiAqIFByZW1hZGUgZXJyb3IgcGFja2V0LlxuICovXG5cbnZhciBlcnIgPSB7IHR5cGU6ICdlcnJvcicsIGRhdGE6ICdwYXJzZXIgZXJyb3InIH07XG5cbi8qKlxuICogQ3JlYXRlIGEgYmxvYiBhcGkgZXZlbiBmb3IgYmxvYiBidWlsZGVyIHdoZW4gdmVuZG9yIHByZWZpeGVzIGV4aXN0XG4gKi9cblxudmFyIEJsb2IgPSByZXF1aXJlKCdibG9iJyk7XG5cbi8qKlxuICogRW5jb2RlcyBhIHBhY2tldC5cbiAqXG4gKiAgICAgPHBhY2tldCB0eXBlIGlkPiBbIDxkYXRhPiBdXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgNWhlbGxvIHdvcmxkXG4gKiAgICAgM1xuICogICAgIDRcbiAqXG4gKiBCaW5hcnkgaXMgZW5jb2RlZCBpbiBhbiBpZGVudGljYWwgcHJpbmNpcGxlXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVQYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgdXRmOGVuY29kZSwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBzdXBwb3J0c0JpbmFyeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gc3VwcG9ydHNCaW5hcnk7XG4gICAgc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdXRmOGVuY29kZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gdXRmOGVuY29kZTtcbiAgICB1dGY4ZW5jb2RlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBkYXRhID0gKHBhY2tldC5kYXRhID09PSB1bmRlZmluZWQpXG4gICAgPyB1bmRlZmluZWRcbiAgICA6IHBhY2tldC5kYXRhLmJ1ZmZlciB8fCBwYWNrZXQuZGF0YTtcblxuICBpZiAoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBlbmNvZGVBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjayk7XG4gIH0gZWxzZSBpZiAoQmxvYiAmJiBkYXRhIGluc3RhbmNlb2YgZ2xvYmFsLkJsb2IpIHtcbiAgICByZXR1cm4gZW5jb2RlQmxvYihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjayk7XG4gIH1cblxuICAvLyBtaWdodCBiZSBhbiBvYmplY3Qgd2l0aCB7IGJhc2U2NDogdHJ1ZSwgZGF0YTogZGF0YUFzQmFzZTY0U3RyaW5nIH1cbiAgaWYgKGRhdGEgJiYgZGF0YS5iYXNlNjQpIHtcbiAgICByZXR1cm4gZW5jb2RlQmFzZTY0T2JqZWN0KHBhY2tldCwgY2FsbGJhY2spO1xuICB9XG5cbiAgLy8gU2VuZGluZyBkYXRhIGFzIGEgdXRmLTggc3RyaW5nXG4gIHZhciBlbmNvZGVkID0gcGFja2V0c1twYWNrZXQudHlwZV07XG5cbiAgLy8gZGF0YSBmcmFnbWVudCBpcyBvcHRpb25hbFxuICBpZiAodW5kZWZpbmVkICE9PSBwYWNrZXQuZGF0YSkge1xuICAgIGVuY29kZWQgKz0gdXRmOGVuY29kZSA/IHV0ZjguZW5jb2RlKFN0cmluZyhwYWNrZXQuZGF0YSksIHsgc3RyaWN0OiBmYWxzZSB9KSA6IFN0cmluZyhwYWNrZXQuZGF0YSk7XG4gIH1cblxuICByZXR1cm4gY2FsbGJhY2soJycgKyBlbmNvZGVkKTtcblxufTtcblxuZnVuY3Rpb24gZW5jb2RlQmFzZTY0T2JqZWN0KHBhY2tldCwgY2FsbGJhY2spIHtcbiAgLy8gcGFja2V0IGRhdGEgaXMgYW4gb2JqZWN0IHsgYmFzZTY0OiB0cnVlLCBkYXRhOiBkYXRhQXNCYXNlNjRTdHJpbmcgfVxuICB2YXIgbWVzc2FnZSA9ICdiJyArIGV4cG9ydHMucGFja2V0c1twYWNrZXQudHlwZV0gKyBwYWNrZXQuZGF0YS5kYXRhO1xuICByZXR1cm4gY2FsbGJhY2sobWVzc2FnZSk7XG59XG5cbi8qKlxuICogRW5jb2RlIHBhY2tldCBoZWxwZXJzIGZvciBiaW5hcnkgdHlwZXNcbiAqL1xuXG5mdW5jdGlvbiBlbmNvZGVBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykge1xuICBpZiAoIXN1cHBvcnRzQmluYXJ5KSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0KHBhY2tldCwgY2FsbGJhY2spO1xuICB9XG5cbiAgdmFyIGRhdGEgPSBwYWNrZXQuZGF0YTtcbiAgdmFyIGNvbnRlbnRBcnJheSA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICB2YXIgcmVzdWx0QnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoMSArIGRhdGEuYnl0ZUxlbmd0aCk7XG5cbiAgcmVzdWx0QnVmZmVyWzBdID0gcGFja2V0c1twYWNrZXQudHlwZV07XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGVudEFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0QnVmZmVyW2krMV0gPSBjb250ZW50QXJyYXlbaV07XG4gIH1cblxuICByZXR1cm4gY2FsbGJhY2socmVzdWx0QnVmZmVyLmJ1ZmZlcik7XG59XG5cbmZ1bmN0aW9uIGVuY29kZUJsb2JBc0FycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gIGlmICghc3VwcG9ydHNCaW5hcnkpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQocGFja2V0LCBjYWxsYmFjayk7XG4gIH1cblxuICB2YXIgZnIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICBmci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICBwYWNrZXQuZGF0YSA9IGZyLnJlc3VsdDtcbiAgICBleHBvcnRzLmVuY29kZVBhY2tldChwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCB0cnVlLCBjYWxsYmFjayk7XG4gIH07XG4gIHJldHVybiBmci5yZWFkQXNBcnJheUJ1ZmZlcihwYWNrZXQuZGF0YSk7XG59XG5cbmZ1bmN0aW9uIGVuY29kZUJsb2IocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spIHtcbiAgaWYgKCFzdXBwb3J0c0JpbmFyeSkge1xuICAgIHJldHVybiBleHBvcnRzLmVuY29kZUJhc2U2NFBhY2tldChwYWNrZXQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGlmIChkb250U2VuZEJsb2JzKSB7XG4gICAgcmV0dXJuIGVuY29kZUJsb2JBc0FycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBuZXcgVWludDhBcnJheSgxKTtcbiAgbGVuZ3RoWzBdID0gcGFja2V0c1twYWNrZXQudHlwZV07XG4gIHZhciBibG9iID0gbmV3IEJsb2IoW2xlbmd0aC5idWZmZXIsIHBhY2tldC5kYXRhXSk7XG5cbiAgcmV0dXJuIGNhbGxiYWNrKGJsb2IpO1xufVxuXG4vKipcbiAqIEVuY29kZXMgYSBwYWNrZXQgd2l0aCBiaW5hcnkgZGF0YSBpbiBhIGJhc2U2NCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0LCBoYXMgYHR5cGVgIGFuZCBgZGF0YWBcbiAqIEByZXR1cm4ge1N0cmluZ30gYmFzZTY0IGVuY29kZWQgbWVzc2FnZVxuICovXG5cbmV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0LCBjYWxsYmFjaykge1xuICB2YXIgbWVzc2FnZSA9ICdiJyArIGV4cG9ydHMucGFja2V0c1twYWNrZXQudHlwZV07XG4gIGlmIChCbG9iICYmIHBhY2tldC5kYXRhIGluc3RhbmNlb2YgZ2xvYmFsLkJsb2IpIHtcbiAgICB2YXIgZnIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIGZyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGI2NCA9IGZyLnJlc3VsdC5zcGxpdCgnLCcpWzFdO1xuICAgICAgY2FsbGJhY2sobWVzc2FnZSArIGI2NCk7XG4gICAgfTtcbiAgICByZXR1cm4gZnIucmVhZEFzRGF0YVVSTChwYWNrZXQuZGF0YSk7XG4gIH1cblxuICB2YXIgYjY0ZGF0YTtcbiAgdHJ5IHtcbiAgICBiNjRkYXRhID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheShwYWNrZXQuZGF0YSkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gaVBob25lIFNhZmFyaSBkb2Vzbid0IGxldCB5b3UgYXBwbHkgd2l0aCB0eXBlZCBhcnJheXNcbiAgICB2YXIgdHlwZWQgPSBuZXcgVWludDhBcnJheShwYWNrZXQuZGF0YSk7XG4gICAgdmFyIGJhc2ljID0gbmV3IEFycmF5KHR5cGVkLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlZC5sZW5ndGg7IGkrKykge1xuICAgICAgYmFzaWNbaV0gPSB0eXBlZFtpXTtcbiAgICB9XG4gICAgYjY0ZGF0YSA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYmFzaWMpO1xuICB9XG4gIG1lc3NhZ2UgKz0gZ2xvYmFsLmJ0b2EoYjY0ZGF0YSk7XG4gIHJldHVybiBjYWxsYmFjayhtZXNzYWdlKTtcbn07XG5cbi8qKlxuICogRGVjb2RlcyBhIHBhY2tldC4gQ2hhbmdlcyBmb3JtYXQgdG8gQmxvYiBpZiByZXF1ZXN0ZWQuXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGB0eXBlYCBhbmQgYGRhdGFgIChpZiBhbnkpXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmRlY29kZVBhY2tldCA9IGZ1bmN0aW9uIChkYXRhLCBiaW5hcnlUeXBlLCB1dGY4ZGVjb2RlKSB7XG4gIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZXJyO1xuICB9XG4gIC8vIFN0cmluZyBkYXRhXG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoZGF0YS5jaGFyQXQoMCkgPT09ICdiJykge1xuICAgICAgcmV0dXJuIGV4cG9ydHMuZGVjb2RlQmFzZTY0UGFja2V0KGRhdGEuc3Vic3RyKDEpLCBiaW5hcnlUeXBlKTtcbiAgICB9XG5cbiAgICBpZiAodXRmOGRlY29kZSkge1xuICAgICAgZGF0YSA9IHRyeURlY29kZShkYXRhKTtcbiAgICAgIGlmIChkYXRhID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZXJyO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgdHlwZSA9IGRhdGEuY2hhckF0KDApO1xuXG4gICAgaWYgKE51bWJlcih0eXBlKSAhPSB0eXBlIHx8ICFwYWNrZXRzbGlzdFt0eXBlXSkge1xuICAgICAgcmV0dXJuIGVycjtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5sZW5ndGggPiAxKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBwYWNrZXRzbGlzdFt0eXBlXSwgZGF0YTogZGF0YS5zdWJzdHJpbmcoMSkgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHsgdHlwZTogcGFja2V0c2xpc3RbdHlwZV0gfTtcbiAgICB9XG4gIH1cblxuICB2YXIgYXNBcnJheSA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICB2YXIgdHlwZSA9IGFzQXJyYXlbMF07XG4gIHZhciByZXN0ID0gc2xpY2VCdWZmZXIoZGF0YSwgMSk7XG4gIGlmIChCbG9iICYmIGJpbmFyeVR5cGUgPT09ICdibG9iJykge1xuICAgIHJlc3QgPSBuZXcgQmxvYihbcmVzdF0pO1xuICB9XG4gIHJldHVybiB7IHR5cGU6IHBhY2tldHNsaXN0W3R5cGVdLCBkYXRhOiByZXN0IH07XG59O1xuXG5mdW5jdGlvbiB0cnlEZWNvZGUoZGF0YSkge1xuICB0cnkge1xuICAgIGRhdGEgPSB1dGY4LmRlY29kZShkYXRhLCB7IHN0cmljdDogZmFsc2UgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogRGVjb2RlcyBhIHBhY2tldCBlbmNvZGVkIGluIGEgYmFzZTY0IHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBiYXNlNjQgZW5jb2RlZCBtZXNzYWdlXG4gKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggYHR5cGVgIGFuZCBgZGF0YWAgKGlmIGFueSlcbiAqL1xuXG5leHBvcnRzLmRlY29kZUJhc2U2NFBhY2tldCA9IGZ1bmN0aW9uKG1zZywgYmluYXJ5VHlwZSkge1xuICB2YXIgdHlwZSA9IHBhY2tldHNsaXN0W21zZy5jaGFyQXQoMCldO1xuICBpZiAoIWJhc2U2NGVuY29kZXIpIHtcbiAgICByZXR1cm4geyB0eXBlOiB0eXBlLCBkYXRhOiB7IGJhc2U2NDogdHJ1ZSwgZGF0YTogbXNnLnN1YnN0cigxKSB9IH07XG4gIH1cblxuICB2YXIgZGF0YSA9IGJhc2U2NGVuY29kZXIuZGVjb2RlKG1zZy5zdWJzdHIoMSkpO1xuXG4gIGlmIChiaW5hcnlUeXBlID09PSAnYmxvYicgJiYgQmxvYikge1xuICAgIGRhdGEgPSBuZXcgQmxvYihbZGF0YV0pO1xuICB9XG5cbiAgcmV0dXJuIHsgdHlwZTogdHlwZSwgZGF0YTogZGF0YSB9O1xufTtcblxuLyoqXG4gKiBFbmNvZGVzIG11bHRpcGxlIG1lc3NhZ2VzIChwYXlsb2FkKS5cbiAqXG4gKiAgICAgPGxlbmd0aD46ZGF0YVxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIDExOmhlbGxvIHdvcmxkMjpoaVxuICpcbiAqIElmIGFueSBjb250ZW50cyBhcmUgYmluYXJ5LCB0aGV5IHdpbGwgYmUgZW5jb2RlZCBhcyBiYXNlNjQgc3RyaW5ncy4gQmFzZTY0XG4gKiBlbmNvZGVkIHN0cmluZ3MgYXJlIG1hcmtlZCB3aXRoIGEgYiBiZWZvcmUgdGhlIGxlbmd0aCBzcGVjaWZpZXJcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmVuY29kZVBheWxvYWQgPSBmdW5jdGlvbiAocGFja2V0cywgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygc3VwcG9ydHNCaW5hcnkgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IHN1cHBvcnRzQmluYXJ5O1xuICAgIHN1cHBvcnRzQmluYXJ5ID0gbnVsbDtcbiAgfVxuXG4gIHZhciBpc0JpbmFyeSA9IGhhc0JpbmFyeShwYWNrZXRzKTtcblxuICBpZiAoc3VwcG9ydHNCaW5hcnkgJiYgaXNCaW5hcnkpIHtcbiAgICBpZiAoQmxvYiAmJiAhZG9udFNlbmRCbG9icykge1xuICAgICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQmxvYihwYWNrZXRzLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQXJyYXlCdWZmZXIocGFja2V0cywgY2FsbGJhY2spO1xuICB9XG5cbiAgaWYgKCFwYWNrZXRzLmxlbmd0aCkge1xuICAgIHJldHVybiBjYWxsYmFjaygnMDonKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldExlbmd0aEhlYWRlcihtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG1lc3NhZ2UubGVuZ3RoICsgJzonICsgbWVzc2FnZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuY29kZU9uZShwYWNrZXQsIGRvbmVDYWxsYmFjaykge1xuICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHBhY2tldCwgIWlzQmluYXJ5ID8gZmFsc2UgOiBzdXBwb3J0c0JpbmFyeSwgZmFsc2UsIGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICAgIGRvbmVDYWxsYmFjayhudWxsLCBzZXRMZW5ndGhIZWFkZXIobWVzc2FnZSkpO1xuICAgIH0pO1xuICB9XG5cbiAgbWFwKHBhY2tldHMsIGVuY29kZU9uZSwgZnVuY3Rpb24oZXJyLCByZXN1bHRzKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKHJlc3VsdHMuam9pbignJykpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQXN5bmMgYXJyYXkgbWFwIHVzaW5nIGFmdGVyXG4gKi9cblxuZnVuY3Rpb24gbWFwKGFyeSwgZWFjaCwgZG9uZSkge1xuICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KGFyeS5sZW5ndGgpO1xuICB2YXIgbmV4dCA9IGFmdGVyKGFyeS5sZW5ndGgsIGRvbmUpO1xuXG4gIHZhciBlYWNoV2l0aEluZGV4ID0gZnVuY3Rpb24oaSwgZWwsIGNiKSB7XG4gICAgZWFjaChlbCwgZnVuY3Rpb24oZXJyb3IsIG1zZykge1xuICAgICAgcmVzdWx0W2ldID0gbXNnO1xuICAgICAgY2IoZXJyb3IsIHJlc3VsdCk7XG4gICAgfSk7XG4gIH07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnkubGVuZ3RoOyBpKyspIHtcbiAgICBlYWNoV2l0aEluZGV4KGksIGFyeVtpXSwgbmV4dCk7XG4gIH1cbn1cblxuLypcbiAqIERlY29kZXMgZGF0YSB3aGVuIGEgcGF5bG9hZCBpcyBtYXliZSBleHBlY3RlZC4gUG9zc2libGUgYmluYXJ5IGNvbnRlbnRzIGFyZVxuICogZGVjb2RlZCBmcm9tIHRoZWlyIGJhc2U2NCByZXByZXNlbnRhdGlvblxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLCBjYWxsYmFjayBtZXRob2RcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVQYXlsb2FkID0gZnVuY3Rpb24gKGRhdGEsIGJpbmFyeVR5cGUsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5kZWNvZGVQYXlsb2FkQXNCaW5hcnkoZGF0YSwgYmluYXJ5VHlwZSwgY2FsbGJhY2spO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBiaW5hcnlUeXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBiaW5hcnlUeXBlO1xuICAgIGJpbmFyeVR5cGUgPSBudWxsO1xuICB9XG5cbiAgdmFyIHBhY2tldDtcbiAgaWYgKGRhdGEgPT09ICcnKSB7XG4gICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxuICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICB9XG5cbiAgdmFyIGxlbmd0aCA9ICcnLCBuLCBtc2c7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBkYXRhLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBjaHIgPSBkYXRhLmNoYXJBdChpKTtcblxuICAgIGlmIChjaHIgIT09ICc6Jykge1xuICAgICAgbGVuZ3RoICs9IGNocjtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChsZW5ndGggPT09ICcnIHx8IChsZW5ndGggIT0gKG4gPSBOdW1iZXIobGVuZ3RoKSkpKSB7XG4gICAgICAvLyBwYXJzZXIgZXJyb3IgLSBpZ25vcmluZyBwYXlsb2FkXG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgICB9XG5cbiAgICBtc2cgPSBkYXRhLnN1YnN0cihpICsgMSwgbik7XG5cbiAgICBpZiAobGVuZ3RoICE9IG1zZy5sZW5ndGgpIHtcbiAgICAgIC8vIHBhcnNlciBlcnJvciAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICAgIH1cblxuICAgIGlmIChtc2cubGVuZ3RoKSB7XG4gICAgICBwYWNrZXQgPSBleHBvcnRzLmRlY29kZVBhY2tldChtc2csIGJpbmFyeVR5cGUsIGZhbHNlKTtcblxuICAgICAgaWYgKGVyci50eXBlID09PSBwYWNrZXQudHlwZSAmJiBlcnIuZGF0YSA9PT0gcGFja2V0LmRhdGEpIHtcbiAgICAgICAgLy8gcGFyc2VyIGVycm9yIGluIGluZGl2aWR1YWwgcGFja2V0IC0gaWdub3JpbmcgcGF5bG9hZFxuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJldCA9IGNhbGxiYWNrKHBhY2tldCwgaSArIG4sIGwpO1xuICAgICAgaWYgKGZhbHNlID09PSByZXQpIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBhZHZhbmNlIGN1cnNvclxuICAgIGkgKz0gbjtcbiAgICBsZW5ndGggPSAnJztcbiAgfVxuXG4gIGlmIChsZW5ndGggIT09ICcnKSB7XG4gICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxuICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICB9XG5cbn07XG5cbi8qKlxuICogRW5jb2RlcyBtdWx0aXBsZSBtZXNzYWdlcyAocGF5bG9hZCkgYXMgYmluYXJ5LlxuICpcbiAqIDwxID0gYmluYXJ5LCAwID0gc3RyaW5nPjxudW1iZXIgZnJvbSAwLTk+PG51bWJlciBmcm9tIDAtOT5bLi4uXTxudW1iZXJcbiAqIDI1NT48ZGF0YT5cbiAqXG4gKiBFeGFtcGxlOlxuICogMSAzIDI1NSAxIDIgMywgaWYgdGhlIGJpbmFyeSBjb250ZW50cyBhcmUgaW50ZXJwcmV0ZWQgYXMgOCBiaXQgaW50ZWdlcnNcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzXG4gKiBAcmV0dXJuIHtBcnJheUJ1ZmZlcn0gZW5jb2RlZCBwYXlsb2FkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmVuY29kZVBheWxvYWRBc0FycmF5QnVmZmVyID0gZnVuY3Rpb24ocGFja2V0cywgY2FsbGJhY2spIHtcbiAgaWYgKCFwYWNrZXRzLmxlbmd0aCkge1xuICAgIHJldHVybiBjYWxsYmFjayhuZXcgQXJyYXlCdWZmZXIoMCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5jb2RlT25lKHBhY2tldCwgZG9uZUNhbGxiYWNrKSB7XG4gICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQocGFja2V0LCB0cnVlLCB0cnVlLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gZG9uZUNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgIH0pO1xuICB9XG5cbiAgbWFwKHBhY2tldHMsIGVuY29kZU9uZSwgZnVuY3Rpb24oZXJyLCBlbmNvZGVkUGFja2V0cykge1xuICAgIHZhciB0b3RhbExlbmd0aCA9IGVuY29kZWRQYWNrZXRzLnJlZHVjZShmdW5jdGlvbihhY2MsIHApIHtcbiAgICAgIHZhciBsZW47XG4gICAgICBpZiAodHlwZW9mIHAgPT09ICdzdHJpbmcnKXtcbiAgICAgICAgbGVuID0gcC5sZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZW4gPSBwLmJ5dGVMZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjICsgbGVuLnRvU3RyaW5nKCkubGVuZ3RoICsgbGVuICsgMjsgLy8gc3RyaW5nL2JpbmFyeSBpZGVudGlmaWVyICsgc2VwYXJhdG9yID0gMlxuICAgIH0sIDApO1xuXG4gICAgdmFyIHJlc3VsdEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodG90YWxMZW5ndGgpO1xuXG4gICAgdmFyIGJ1ZmZlckluZGV4ID0gMDtcbiAgICBlbmNvZGVkUGFja2V0cy5mb3JFYWNoKGZ1bmN0aW9uKHApIHtcbiAgICAgIHZhciBpc1N0cmluZyA9IHR5cGVvZiBwID09PSAnc3RyaW5nJztcbiAgICAgIHZhciBhYiA9IHA7XG4gICAgICBpZiAoaXNTdHJpbmcpIHtcbiAgICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShwLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZpZXdbaV0gPSBwLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgYWIgPSB2aWV3LmJ1ZmZlcjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzU3RyaW5nKSB7IC8vIG5vdCB0cnVlIGJpbmFyeVxuICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IDA7XG4gICAgICB9IGVsc2UgeyAvLyB0cnVlIGJpbmFyeVxuICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IDE7XG4gICAgICB9XG5cbiAgICAgIHZhciBsZW5TdHIgPSBhYi5ieXRlTGVuZ3RoLnRvU3RyaW5nKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlblN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IHBhcnNlSW50KGxlblN0cltpXSk7XG4gICAgICB9XG4gICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IDI1NTtcblxuICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShhYik7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSB2aWV3W2ldO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNhbGxiYWNrKHJlc3VsdEFycmF5LmJ1ZmZlcik7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBFbmNvZGUgYXMgQmxvYlxuICovXG5cbmV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQmxvYiA9IGZ1bmN0aW9uKHBhY2tldHMsIGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIGVuY29kZU9uZShwYWNrZXQsIGRvbmVDYWxsYmFjaykge1xuICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHBhY2tldCwgdHJ1ZSwgdHJ1ZSwgZnVuY3Rpb24oZW5jb2RlZCkge1xuICAgICAgdmFyIGJpbmFyeUlkZW50aWZpZXIgPSBuZXcgVWludDhBcnJheSgxKTtcbiAgICAgIGJpbmFyeUlkZW50aWZpZXJbMF0gPSAxO1xuICAgICAgaWYgKHR5cGVvZiBlbmNvZGVkID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGVuY29kZWQubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNvZGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmlld1tpXSA9IGVuY29kZWQuY2hhckNvZGVBdChpKTtcbiAgICAgICAgfVxuICAgICAgICBlbmNvZGVkID0gdmlldy5idWZmZXI7XG4gICAgICAgIGJpbmFyeUlkZW50aWZpZXJbMF0gPSAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGVuID0gKGVuY29kZWQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcilcbiAgICAgICAgPyBlbmNvZGVkLmJ5dGVMZW5ndGhcbiAgICAgICAgOiBlbmNvZGVkLnNpemU7XG5cbiAgICAgIHZhciBsZW5TdHIgPSBsZW4udG9TdHJpbmcoKTtcbiAgICAgIHZhciBsZW5ndGhBcnkgPSBuZXcgVWludDhBcnJheShsZW5TdHIubGVuZ3RoICsgMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlblN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZW5ndGhBcnlbaV0gPSBwYXJzZUludChsZW5TdHJbaV0pO1xuICAgICAgfVxuICAgICAgbGVuZ3RoQXJ5W2xlblN0ci5sZW5ndGhdID0gMjU1O1xuXG4gICAgICBpZiAoQmxvYikge1xuICAgICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtiaW5hcnlJZGVudGlmaWVyLmJ1ZmZlciwgbGVuZ3RoQXJ5LmJ1ZmZlciwgZW5jb2RlZF0pO1xuICAgICAgICBkb25lQ2FsbGJhY2sobnVsbCwgYmxvYik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBtYXAocGFja2V0cywgZW5jb2RlT25lLCBmdW5jdGlvbihlcnIsIHJlc3VsdHMpIHtcbiAgICByZXR1cm4gY2FsbGJhY2sobmV3IEJsb2IocmVzdWx0cykpO1xuICB9KTtcbn07XG5cbi8qXG4gKiBEZWNvZGVzIGRhdGEgd2hlbiBhIHBheWxvYWQgaXMgbWF5YmUgZXhwZWN0ZWQuIFN0cmluZ3MgYXJlIGRlY29kZWQgYnlcbiAqIGludGVycHJldGluZyBlYWNoIGJ5dGUgYXMgYSBrZXkgY29kZSBmb3IgZW50cmllcyBtYXJrZWQgdG8gc3RhcnQgd2l0aCAwLiBTZWVcbiAqIGRlc2NyaXB0aW9uIG9mIGVuY29kZVBheWxvYWRBc0JpbmFyeVxuICpcbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGRhdGEsIGNhbGxiYWNrIG1ldGhvZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmRlY29kZVBheWxvYWRBc0JpbmFyeSA9IGZ1bmN0aW9uIChkYXRhLCBiaW5hcnlUeXBlLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIGJpbmFyeVR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGJpbmFyeVR5cGU7XG4gICAgYmluYXJ5VHlwZSA9IG51bGw7XG4gIH1cblxuICB2YXIgYnVmZmVyVGFpbCA9IGRhdGE7XG4gIHZhciBidWZmZXJzID0gW107XG5cbiAgd2hpbGUgKGJ1ZmZlclRhaWwuYnl0ZUxlbmd0aCA+IDApIHtcbiAgICB2YXIgdGFpbEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyVGFpbCk7XG4gICAgdmFyIGlzU3RyaW5nID0gdGFpbEFycmF5WzBdID09PSAwO1xuICAgIHZhciBtc2dMZW5ndGggPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAxOyA7IGkrKykge1xuICAgICAgaWYgKHRhaWxBcnJheVtpXSA9PT0gMjU1KSBicmVhaztcblxuICAgICAgLy8gMzEwID0gY2hhciBsZW5ndGggb2YgTnVtYmVyLk1BWF9WQUxVRVxuICAgICAgaWYgKG1zZ0xlbmd0aC5sZW5ndGggPiAzMTApIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gICAgICB9XG5cbiAgICAgIG1zZ0xlbmd0aCArPSB0YWlsQXJyYXlbaV07XG4gICAgfVxuXG4gICAgYnVmZmVyVGFpbCA9IHNsaWNlQnVmZmVyKGJ1ZmZlclRhaWwsIDIgKyBtc2dMZW5ndGgubGVuZ3RoKTtcbiAgICBtc2dMZW5ndGggPSBwYXJzZUludChtc2dMZW5ndGgpO1xuXG4gICAgdmFyIG1zZyA9IHNsaWNlQnVmZmVyKGJ1ZmZlclRhaWwsIDAsIG1zZ0xlbmd0aCk7XG4gICAgaWYgKGlzU3RyaW5nKSB7XG4gICAgICB0cnkge1xuICAgICAgICBtc2cgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KG1zZykpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpUGhvbmUgU2FmYXJpIGRvZXNuJ3QgbGV0IHlvdSBhcHBseSB0byB0eXBlZCBhcnJheXNcbiAgICAgICAgdmFyIHR5cGVkID0gbmV3IFVpbnQ4QXJyYXkobXNnKTtcbiAgICAgICAgbXNnID0gJyc7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBtc2cgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh0eXBlZFtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBidWZmZXJzLnB1c2gobXNnKTtcbiAgICBidWZmZXJUYWlsID0gc2xpY2VCdWZmZXIoYnVmZmVyVGFpbCwgbXNnTGVuZ3RoKTtcbiAgfVxuXG4gIHZhciB0b3RhbCA9IGJ1ZmZlcnMubGVuZ3RoO1xuICBidWZmZXJzLmZvckVhY2goZnVuY3Rpb24oYnVmZmVyLCBpKSB7XG4gICAgY2FsbGJhY2soZXhwb3J0cy5kZWNvZGVQYWNrZXQoYnVmZmVyLCBiaW5hcnlUeXBlLCB0cnVlKSwgaSwgdG90YWwpO1xuICB9KTtcbn07XG4iLCJcclxuLyoqXHJcbiAqIEV4cG9zZSBgRW1pdHRlcmAuXHJcbiAqL1xyXG5cclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBFbWl0dGVyO1xyXG59XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZSBhIG5ldyBgRW1pdHRlcmAuXHJcbiAqXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gRW1pdHRlcihvYmopIHtcclxuICBpZiAob2JqKSByZXR1cm4gbWl4aW4ob2JqKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBNaXhpbiB0aGUgZW1pdHRlciBwcm9wZXJ0aWVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gbWl4aW4ob2JqKSB7XHJcbiAgZm9yICh2YXIga2V5IGluIEVtaXR0ZXIucHJvdG90eXBlKSB7XHJcbiAgICBvYmpba2V5XSA9IEVtaXR0ZXIucHJvdG90eXBlW2tleV07XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMaXN0ZW4gb24gdGhlIGdpdmVuIGBldmVudGAgd2l0aCBgZm5gLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vbiA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICAodGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW10pXHJcbiAgICAucHVzaChmbik7XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogQWRkcyBhbiBgZXZlbnRgIGxpc3RlbmVyIHRoYXQgd2lsbCBiZSBpbnZva2VkIGEgc2luZ2xlXHJcbiAqIHRpbWUgdGhlbiBhdXRvbWF0aWNhbGx5IHJlbW92ZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIGZ1bmN0aW9uIG9uKCkge1xyXG4gICAgdGhpcy5vZmYoZXZlbnQsIG9uKTtcclxuICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgfVxyXG5cclxuICBvbi5mbiA9IGZuO1xyXG4gIHRoaXMub24oZXZlbnQsIG9uKTtcclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZW1vdmUgdGhlIGdpdmVuIGNhbGxiYWNrIGZvciBgZXZlbnRgIG9yIGFsbFxyXG4gKiByZWdpc3RlcmVkIGNhbGxiYWNrcy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub2ZmID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcblxyXG4gIC8vIGFsbFxyXG4gIGlmICgwID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIHRoaXMuX2NhbGxiYWNrcyA9IHt9O1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvLyBzcGVjaWZpYyBldmVudFxyXG4gIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gIGlmICghY2FsbGJhY2tzKSByZXR1cm4gdGhpcztcclxuXHJcbiAgLy8gcmVtb3ZlIGFsbCBoYW5kbGVyc1xyXG4gIGlmICgxID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvLyByZW1vdmUgc3BlY2lmaWMgaGFuZGxlclxyXG4gIHZhciBjYjtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xyXG4gICAgY2IgPSBjYWxsYmFja3NbaV07XHJcbiAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xyXG4gICAgICBjYWxsYmFja3Muc3BsaWNlKGksIDEpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogRW1pdCBgZXZlbnRgIHdpdGggdGhlIGdpdmVuIGFyZ3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge01peGVkfSAuLi5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKVxyXG4gICAgLCBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG5cclxuICBpZiAoY2FsbGJhY2tzKSB7XHJcbiAgICBjYWxsYmFja3MgPSBjYWxsYmFja3Muc2xpY2UoMCk7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XHJcbiAgICAgIGNhbGxiYWNrc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybiBhcnJheSBvZiBjYWxsYmFja3MgZm9yIGBldmVudGAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcmV0dXJuIHtBcnJheX1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gIHJldHVybiB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIHRoaXMgZW1pdHRlciBoYXMgYGV2ZW50YCBoYW5kbGVycy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUuaGFzTGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHJldHVybiAhISB0aGlzLmxpc3RlbmVycyhldmVudCkubGVuZ3RoO1xyXG59O1xyXG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcblx0XHRcdFx0XHQvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG5cdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG5cdFx0fVxuXHRcdHJldHVybiBtZW1vW3RhcmdldF1cblx0fTtcbn0pKCk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG4gICAgICAgIGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvICsgXCIgXCIgKyBvcHRpb25zLmluc2VydEF0LmJlZm9yZSk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cblx0YWRkQXR0cnMoc3R5bGUsIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGUpO1xuXG5cdHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlua0VsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXHRvcHRpb25zLmF0dHJzLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXG5cdGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7XG5cblx0cmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHtcblx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGUsIHVwZGF0ZSwgcmVtb3ZlLCByZXN1bHQ7XG5cblx0Ly8gSWYgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gd2FzIGRlZmluZWQsIHJ1biBpdCBvbiB0aGUgY3NzXG5cdGlmIChvcHRpb25zLnRyYW5zZm9ybSAmJiBvYmouY3NzKSB7XG5cdCAgICByZXN1bHQgPSBvcHRpb25zLnRyYW5zZm9ybShvYmouY3NzKTtcblxuXHQgICAgaWYgKHJlc3VsdCkge1xuXHQgICAgXHQvLyBJZiB0cmFuc2Zvcm0gcmV0dXJucyBhIHZhbHVlLCB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIHJ1bm5pbmcgcnVudGltZSB0cmFuc2Zvcm1hdGlvbnMgb24gdGhlIGNzcy5cblx0ICAgIFx0b2JqLmNzcyA9IHJlc3VsdDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICBcdC8vIElmIHRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gcmV0dXJucyBhIGZhbHN5IHZhbHVlLCBkb24ndCBhZGQgdGhpcyBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIGNvbmRpdGlvbmFsIGxvYWRpbmcgb2YgY3NzXG5cdCAgICBcdHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgIFx0XHQvLyBub29wXG5cdCAgICBcdH07XG5cdCAgICB9XG5cdH1cblxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcblx0XHR2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcblxuXHRcdHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuXG5cdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG5cdFx0cmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcblxuXHR9IGVsc2UgaWYgKFxuXHRcdG9iai5zb3VyY2VNYXAgJiZcblx0XHR0eXBlb2YgVVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiXG5cdCkge1xuXHRcdHN0eWxlID0gY3JlYXRlTGlua0VsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXG5cdFx0XHRpZihzdHlsZS5ocmVmKSBVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlLmhyZWYpO1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXHRcdH07XG5cdH1cblxuXHR1cGRhdGUob2JqKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG5ld09iaikge1xuXHRcdGlmIChuZXdPYmopIHtcblx0XHRcdGlmIChcblx0XHRcdFx0bmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJlxuXHRcdFx0XHRuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuXHRcdFx0XHRuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVtb3ZlKCk7XG5cdFx0fVxuXHR9O1xufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuXHR2YXIgdGV4dFN0b3JlID0gW107XG5cblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcblx0XHR0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG5cblx0XHRyZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcblx0fTtcbn0pKCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xuXG5cdGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuXHRcdHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuXHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG5cdFx0XHRzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGUsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuXG5cdGlmKG1lZGlhKSB7XG5cdFx0c3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXG5cdH1cblxuXHRpZihzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuXHR9IGVsc2Uge1xuXHRcdHdoaWxlKHN0eWxlLmZpcnN0Q2hpbGQpIHtcblx0XHRcdHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuXHRcdH1cblxuXHRcdHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpbmsgKGxpbmssIG9wdGlvbnMsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cblx0Lypcblx0XHRJZiBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgaXNuJ3QgZGVmaW5lZCwgYnV0IHNvdXJjZW1hcHMgYXJlIGVuYWJsZWRcblx0XHRhbmQgdGhlcmUgaXMgbm8gcHVibGljUGF0aCBkZWZpbmVkIHRoZW4gbGV0cyB0dXJuIGNvbnZlcnRUb0Fic29sdXRlVXJsc1xuXHRcdG9uIGJ5IGRlZmF1bHQuICBPdGhlcndpc2UgZGVmYXVsdCB0byB0aGUgY29udmVydFRvQWJzb2x1dGVVcmxzIG9wdGlvblxuXHRcdGRpcmVjdGx5XG5cdCovXG5cdHZhciBhdXRvRml4VXJscyA9IG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzID09PSB1bmRlZmluZWQgJiYgc291cmNlTWFwO1xuXG5cdGlmIChvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyB8fCBhdXRvRml4VXJscykge1xuXHRcdGNzcyA9IGZpeFVybHMoY3NzKTtcblx0fVxuXG5cdGlmIChzb3VyY2VNYXApIHtcblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuXHRcdGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgXCIgKi9cIjtcblx0fVxuXG5cdHZhciBibG9iID0gbmV3IEJsb2IoW2Nzc10sIHsgdHlwZTogXCJ0ZXh0L2Nzc1wiIH0pO1xuXG5cdHZhciBvbGRTcmMgPSBsaW5rLmhyZWY7XG5cblx0bGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcblxuXHRpZihvbGRTcmMpIFVSTC5yZXZva2VPYmplY3RVUkwob2xkU3JjKTtcbn1cbiIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih1c2VTb3VyY2VNYXApIHtcblx0dmFyIGxpc3QgPSBbXTtcblxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cdGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXHRcdFx0aWYoaXRlbVsyXSkge1xuXHRcdFx0XHRyZXR1cm4gXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBjb250ZW50ICsgXCJ9XCI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gY29udGVudDtcblx0XHRcdH1cblx0XHR9KS5qb2luKFwiXCIpO1xuXHR9O1xuXG5cdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cdGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcblx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcblx0XHR2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXHRcdFx0aWYodHlwZW9mIGlkID09PSBcIm51bWJlclwiKVxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG5cdFx0fVxuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcblx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcblx0XHRcdC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuXHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblx0XHRcdGlmKHR5cGVvZiBpdGVtWzBdICE9PSBcIm51bWJlclwiIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcblx0XHRcdFx0fSBlbHNlIGlmKG1lZGlhUXVlcnkpIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0bGlzdC5wdXNoKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0cmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7XG5cdHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblx0aWYgKCFjc3NNYXBwaW5nKSB7XG5cdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdH1cblxuXHRpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG5cdFx0dmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcblx0XHRcdHJldHVybiAnLyojIHNvdXJjZVVSTD0nICsgY3NzTWFwcGluZy5zb3VyY2VSb290ICsgc291cmNlICsgJyAqLydcblx0XHR9KTtcblxuXHRcdHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuXHR9XG5cblx0cmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn1cblxuLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcblx0dmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG5cdHZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7XG5cblx0cmV0dXJuICcvKiMgJyArIGRhdGEgKyAnICovJztcbn1cbiIsIlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhLCBiKXtcbiAgdmFyIGZuID0gZnVuY3Rpb24oKXt9O1xuICBmbi5wcm90b3R5cGUgPSBiLnByb3RvdHlwZTtcbiAgYS5wcm90b3R5cGUgPSBuZXcgZm47XG4gIGEucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gYTtcbn07IiwiLyoqXHJcbiAqIENvbXBpbGVzIGEgcXVlcnlzdHJpbmdcclxuICogUmV0dXJucyBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9iamVjdFxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH1cclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgdmFyIHN0ciA9ICcnO1xyXG5cclxuICBmb3IgKHZhciBpIGluIG9iaikge1xyXG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkge1xyXG4gICAgICBpZiAoc3RyLmxlbmd0aCkgc3RyICs9ICcmJztcclxuICAgICAgc3RyICs9IGVuY29kZVVSSUNvbXBvbmVudChpKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChvYmpbaV0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHN0cjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBQYXJzZXMgYSBzaW1wbGUgcXVlcnlzdHJpbmcgaW50byBhbiBvYmplY3RcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IHFzXHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbmV4cG9ydHMuZGVjb2RlID0gZnVuY3Rpb24ocXMpe1xyXG4gIHZhciBxcnkgPSB7fTtcclxuICB2YXIgcGFpcnMgPSBxcy5zcGxpdCgnJicpO1xyXG4gIGZvciAodmFyIGkgPSAwLCBsID0gcGFpcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICB2YXIgcGFpciA9IHBhaXJzW2ldLnNwbGl0KCc9Jyk7XHJcbiAgICBxcnlbZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMF0pXSA9IGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKTtcclxuICB9XHJcbiAgcmV0dXJuIHFyeTtcclxufTtcclxuIiwiaW1wb3J0IHNvY2tldCBmcm9tICdSb290L1NvY2tldCdcblxuZXhwb3J0IGNvbnN0IFNFVF9ST09NU19MSVNUX0ZJTFRFUiA9ICdTRVRfUk9PTVNfTElTVF9GSUxURVInXG5leHBvcnQgY29uc3QgU0hPV19DUkVBVEVfUk9PTV9QQU5FTCA9ICdTSE9XX0NSRUFURV9ST09NX1BBTkVMJ1xuZXhwb3J0IGNvbnN0IEhJREVfQ1JFQVRFX1JPT01fUEFORUwgPSAnSElERV9DUkVBVEVfUk9PTV9QQU5FTCdcblxuZXhwb3J0IGNvbnN0IFJFUVVFU1RfVVNFUlNfTElTVF9QRU5ESU5HID0gJ1JFUVVFU1RfVVNFUlNfTElTVF9QRU5ESU5HJ1xuZXhwb3J0IGNvbnN0IFJFUVVFU1RfVVNFUlNfTElTVF9TVUNDRVNTID0gJ1JFUVVFU1RfVVNFUlNfTElTVF9TVUNDRVNTJ1xuZXhwb3J0IGNvbnN0IFJFUVVFU1RfVVNFUlNfTElTVF9GQUlMRUQgPSAnUkVRVUVTVF9VU0VSU19MSVNUX0ZBSUxFRCdcblxuZXhwb3J0IGNvbnN0IFJFUVVFU1RfUk9PTVNfTElTVF9QRU5ESU5HID0gJ1JFUVVFU1RfUk9PTVNfTElTVF9QRU5ESU5HJ1xuZXhwb3J0IGNvbnN0IFJFUVVFU1RfUk9PTVNfTElTVF9TVUNDRVNTID0gJ1JFUVVFU1RfUk9PTVNfTElTVF9TVUNDRVNTJ1xuZXhwb3J0IGNvbnN0IFJFUVVFU1RfUk9PTVNfTElTVF9GQUlMRUQgPSAnUkVRVUVTVF9ST09NU19MSVNUX0ZBSUxFRCdcblxuZXhwb3J0IGNvbnN0IFJFUVVFU1RfUk9PTV9EQVRBX1BFTkRJTkcgPSAnUkVRVUVTVF9ST09NX0RBVEFfUEVORElORydcbmV4cG9ydCBjb25zdCBSRVFVRVNUX1JPT01fREFUQV9TVUNDRVNTID0gJ1JFUVVFU1RfUk9PTV9EQVRBX1NVQ0NFU1MnXG5leHBvcnQgY29uc3QgUkVRVUVTVF9ST09NX0RBVEFfRkFJTEVEID0gJ1JFUVVFU1RfUk9PTV9EQVRBX0ZBSUxFRCdcblxuZXhwb3J0IGNvbnN0IFNFTkRfTUVTU0FHRV9QRU5ESU5HID0gJ1NFTkRfTUVTU0FHRV9QRU5ESU5HJ1xuZXhwb3J0IGNvbnN0IFNFTkRfTUVTU0FHRV9TVUNDRVNTID0gJ1NFTkRfTUVTU0FHRV9TVUNDRVNTJ1xuZXhwb3J0IGNvbnN0IFNFTkRfTUVTU0FHRV9GQUlMRUQgPSAnU0VORF9NRVNTQUdFX0ZBSUxFRCdcblxuZXhwb3J0IGNvbnN0IENSRUFURV9ST09NX1BFTkRJTkcgPSAnQ1JFQVRFX1JPT01fUEVORElORydcbmV4cG9ydCBjb25zdCBDUkVBVEVfUk9PTV9TVUNDRVNTID0gJ0NSRUFURV9ST09NX1NVQ0NFU1MnXG5leHBvcnQgY29uc3QgQ1JFQVRFX1JPT01fRkFJTEVEID0gJ0NSRUFURV9ST09NX0ZBSUxFRCdcblxuZXhwb3J0IGNvbnN0IHNldFJvb21zTGlzdEZpbHRlciA9IChmaWx0ZXIpID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBTRVRfUk9PTVNfTElTVF9GSUxURVIsXG4gICAgZmlsdGVyXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHJlcXVlc3RVc2Vyc0xpc3QgPSAoaWQpID0+IHtcbiAgcmV0dXJuIChkaXNwYXRjaCkgPT4ge1xuICAgIGRpc3BhdGNoKHt0eXBlOiBSRVFVRVNUX1VTRVJTX0xJU1RfUEVORElOR30pXG5cbiAgICBzb2NrZXQuZW1pdCgnUkVRVUVTVF9VU0VSU19MSVNUJywgaWQpXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHJlY2VpdmVVc2Vyc0xpc3QgPSAodXNlcnNMaXN0KSA9PiB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogUkVRVUVTVF9VU0VSU19MSVNUX1NVQ0NFU1MsXG4gICAgdXNlcnNMaXN0XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHJlcXVlc3RSb29tc0xpc3QgPSAoaWQpID0+IHtcbiAgcmV0dXJuIChkaXNwYXRjaCkgPT4ge1xuICAgIGRpc3BhdGNoKHt0eXBlOiBSRVFVRVNUX1JPT01TX0xJU1RfUEVORElOR30pXG5cbiAgICBzb2NrZXQuZW1pdCgnUkVRVUVTVF9ST09NU19MSVNUJywgaWQpXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHJlY2VpdmVSb29tc0xpc3QgPSAocm9vbXNMaXN0KSA9PiB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogUkVRVUVTVF9ST09NU19MSVNUX1NVQ0NFU1MsXG4gICAgcm9vbXNMaXN0XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHJlcXVlc3RSb29tRGF0YSA9IChpZCkgPT4ge1xuICByZXR1cm4gKGRpc3BhdGNoKSA9PiB7XG4gICAgZGlzcGF0Y2goe3R5cGU6IFJFUVVFU1RfUk9PTV9EQVRBX1BFTkRJTkd9KVxuXG4gICAgZmV0Y2goJy9yb29tRGF0YScsIHtcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgfSxcbiAgICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgICAgY3JlZGVudGlhbHM6ICdzYW1lLW9yaWdpbicsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGlkXG4gICAgICB9KVxuICAgIH0pXG4gICAgLnRoZW4oZGF0YSA9PiBkYXRhLmpzb24oKSxcbiAgICAgIGVycm9yID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcilcbiAgICAgICAgZGlzcGF0Y2goe3R5cGU6IFJFUVVFU1RfUk9PTV9EQVRBX0ZBSUxFRH0pXG4gICAgfSlcbiAgICAudGhlbihyb29tRGF0YSA9PiB7XG4gICAgICBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IFJFUVVFU1RfUk9PTV9EQVRBX1NVQ0NFU1MsXG4gICAgICAgIHJvb21EYXRhXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHNlbmRNZXNzYWdlID0gKHVzZXIsIHJvb21JZCwgbWVzc2FnZSkgPT4ge1xuICByZXR1cm4gKGRpc3BhdGNoKSA9PiB7XG4gICAgZGlzcGF0Y2goe3R5cGU6IFNFTkRfTUVTU0FHRV9QRU5ESU5HfSlcblxuICAgIHNvY2tldC5lbWl0KCdTRU5EX01FU1NBR0UnLCBKU09OLnN0cmluZ2lmeSh7XG4gICAgICB1c2VyLFxuICAgICAgcm9vbUlkLFxuICAgICAgbWVzc2FnZVxuICAgIH0pKVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCByZWNlaXZlTWVzc2FnZSA9IChtZXNzYWdlKSA9PiB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogU0VORF9NRVNTQUdFX1NVQ0NFU1MsXG4gICAgbWVzc2FnZVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVSb29tID0gKHVzZXIsIHRpdGxlLCBtZXNzYWdlLCBwYXJ0aWNpcGFudHMpID0+IHtcbiAgcmV0dXJuIChkaXNwYXRjaCkgPT4ge1xuICAgIGRpc3BhdGNoKHt0eXBlOiBDUkVBVEVfUk9PTV9QRU5ESU5HfSlcblxuICAgIHNvY2tldC5lbWl0KCdDUkVBVEVfUk9PTScsIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIHVzZXIsXG4gICAgICB0aXRsZSxcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBwYXJ0aWNpcGFudHNcbiAgICB9KSlcbiAgfVxufSIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG4gICAgICAgICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLidcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgcGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNwb3J0O1xuXG4vKipcbiAqIFRyYW5zcG9ydCBhYnN0cmFjdCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIFRyYW5zcG9ydCAob3B0cykge1xuICB0aGlzLnBhdGggPSBvcHRzLnBhdGg7XG4gIHRoaXMuaG9zdG5hbWUgPSBvcHRzLmhvc3RuYW1lO1xuICB0aGlzLnBvcnQgPSBvcHRzLnBvcnQ7XG4gIHRoaXMuc2VjdXJlID0gb3B0cy5zZWN1cmU7XG4gIHRoaXMucXVlcnkgPSBvcHRzLnF1ZXJ5O1xuICB0aGlzLnRpbWVzdGFtcFBhcmFtID0gb3B0cy50aW1lc3RhbXBQYXJhbTtcbiAgdGhpcy50aW1lc3RhbXBSZXF1ZXN0cyA9IG9wdHMudGltZXN0YW1wUmVxdWVzdHM7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICcnO1xuICB0aGlzLmFnZW50ID0gb3B0cy5hZ2VudCB8fCBmYWxzZTtcbiAgdGhpcy5zb2NrZXQgPSBvcHRzLnNvY2tldDtcbiAgdGhpcy5lbmFibGVzWERSID0gb3B0cy5lbmFibGVzWERSO1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLnBmeCA9IG9wdHMucGZ4O1xuICB0aGlzLmtleSA9IG9wdHMua2V5O1xuICB0aGlzLnBhc3NwaHJhc2UgPSBvcHRzLnBhc3NwaHJhc2U7XG4gIHRoaXMuY2VydCA9IG9wdHMuY2VydDtcbiAgdGhpcy5jYSA9IG9wdHMuY2E7XG4gIHRoaXMuY2lwaGVycyA9IG9wdHMuY2lwaGVycztcbiAgdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQgPSBvcHRzLnJlamVjdFVuYXV0aG9yaXplZDtcbiAgdGhpcy5mb3JjZU5vZGUgPSBvcHRzLmZvcmNlTm9kZTtcblxuICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuICB0aGlzLmxvY2FsQWRkcmVzcyA9IG9wdHMubG9jYWxBZGRyZXNzO1xufVxuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAuXG4gKi9cblxuRW1pdHRlcihUcmFuc3BvcnQucHJvdG90eXBlKTtcblxuLyoqXG4gKiBFbWl0cyBhbiBlcnJvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtUcmFuc3BvcnR9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAobXNnLCBkZXNjKSB7XG4gIHZhciBlcnIgPSBuZXcgRXJyb3IobXNnKTtcbiAgZXJyLnR5cGUgPSAnVHJhbnNwb3J0RXJyb3InO1xuICBlcnIuZGVzY3JpcHRpb24gPSBkZXNjO1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIE9wZW5zIHRoZSB0cmFuc3BvcnQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICgnY2xvc2VkJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICcnID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSAnb3BlbmluZyc7XG4gICAgdGhpcy5kb09wZW4oKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIHRyYW5zcG9ydC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLmRvQ2xvc2UoKTtcbiAgICB0aGlzLm9uQ2xvc2UoKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kcyBtdWx0aXBsZSBwYWNrZXRzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHBhY2tldHNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChwYWNrZXRzKSB7XG4gIGlmICgnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIHRoaXMud3JpdGUocGFja2V0cyk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc3BvcnQgbm90IG9wZW4nKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBvcGVuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuJztcbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XG4gIHRoaXMuZW1pdCgnb3BlbicpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBkYXRhLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHZhciBwYWNrZXQgPSBwYXJzZXIuZGVjb2RlUGFja2V0KGRhdGEsIHRoaXMuc29ja2V0LmJpbmFyeVR5cGUpO1xuICB0aGlzLm9uUGFja2V0KHBhY2tldCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIGEgZGVjb2RlZCBwYWNrZXQuXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vblBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICB0aGlzLmVtaXQoJ2Nsb3NlJyk7XG59O1xuIiwiLy8gYnJvd3NlciBzaGltIGZvciB4bWxodHRwcmVxdWVzdCBtb2R1bGVcblxudmFyIGhhc0NPUlMgPSByZXF1aXJlKCdoYXMtY29ycycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRzKSB7XG4gIHZhciB4ZG9tYWluID0gb3B0cy54ZG9tYWluO1xuXG4gIC8vIHNjaGVtZSBtdXN0IGJlIHNhbWUgd2hlbiB1c2lnbiBYRG9tYWluUmVxdWVzdFxuICAvLyBodHRwOi8vYmxvZ3MubXNkbi5jb20vYi9pZWludGVybmFscy9hcmNoaXZlLzIwMTAvMDUvMTMveGRvbWFpbnJlcXVlc3QtcmVzdHJpY3Rpb25zLWxpbWl0YXRpb25zLWFuZC13b3JrYXJvdW5kcy5hc3B4XG4gIHZhciB4c2NoZW1lID0gb3B0cy54c2NoZW1lO1xuXG4gIC8vIFhEb21haW5SZXF1ZXN0IGhhcyBhIGZsb3cgb2Ygbm90IHNlbmRpbmcgY29va2llLCB0aGVyZWZvcmUgaXQgc2hvdWxkIGJlIGRpc2FibGVkIGFzIGEgZGVmYXVsdC5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0F1dG9tYXR0aWMvZW5naW5lLmlvLWNsaWVudC9wdWxsLzIxN1xuICB2YXIgZW5hYmxlc1hEUiA9IG9wdHMuZW5hYmxlc1hEUjtcblxuICAvLyBYTUxIdHRwUmVxdWVzdCBjYW4gYmUgZGlzYWJsZWQgb24gSUVcbiAgdHJ5IHtcbiAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAmJiAoIXhkb21haW4gfHwgaGFzQ09SUykpIHtcbiAgICAgIHJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHsgfVxuXG4gIC8vIFVzZSBYRG9tYWluUmVxdWVzdCBmb3IgSUU4IGlmIGVuYWJsZXNYRFIgaXMgdHJ1ZVxuICAvLyBiZWNhdXNlIGxvYWRpbmcgYmFyIGtlZXBzIGZsYXNoaW5nIHdoZW4gdXNpbmcganNvbnAtcG9sbGluZ1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20veXVqaW9zYWthL3NvY2tlLmlvLWllOC1sb2FkaW5nLWV4YW1wbGVcbiAgdHJ5IHtcbiAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBYRG9tYWluUmVxdWVzdCAmJiAheHNjaGVtZSAmJiBlbmFibGVzWERSKSB7XG4gICAgICByZXR1cm4gbmV3IFhEb21haW5SZXF1ZXN0KCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7IH1cblxuICBpZiAoIXhkb21haW4pIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG5ldyBnbG9iYWxbWydBY3RpdmUnXS5jb25jYXQoJ09iamVjdCcpLmpvaW4oJ1gnKV0oJ01pY3Jvc29mdC5YTUxIVFRQJyk7XG4gICAgfSBjYXRjaCAoZSkgeyB9XG4gIH1cbn07XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgYmluYXJ5ID0gcmVxdWlyZSgnLi9iaW5hcnknKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xudmFyIGlzQnVmID0gcmVxdWlyZSgnLi9pcy1idWZmZXInKTtcblxuLyoqXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5wcm90b2NvbCA9IDQ7XG5cbi8qKlxuICogUGFja2V0IHR5cGVzLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy50eXBlcyA9IFtcbiAgJ0NPTk5FQ1QnLFxuICAnRElTQ09OTkVDVCcsXG4gICdFVkVOVCcsXG4gICdBQ0snLFxuICAnRVJST1InLFxuICAnQklOQVJZX0VWRU5UJyxcbiAgJ0JJTkFSWV9BQ0snXG5dO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBjb25uZWN0YC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuQ09OTkVDVCA9IDA7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGRpc2Nvbm5lY3RgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5ESVNDT05ORUNUID0gMTtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgZXZlbnRgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5FVkVOVCA9IDI7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGFja2AuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkFDSyA9IDM7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGVycm9yYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRVJST1IgPSA0O1xuXG4vKipcbiAqIFBhY2tldCB0eXBlICdiaW5hcnkgZXZlbnQnXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkJJTkFSWV9FVkVOVCA9IDU7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGJpbmFyeSBhY2tgLiBGb3IgYWNrcyB3aXRoIGJpbmFyeSBhcmd1bWVudHMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkJJTkFSWV9BQ0sgPSA2O1xuXG4vKipcbiAqIEVuY29kZXIgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkVuY29kZXIgPSBFbmNvZGVyO1xuXG4vKipcbiAqIERlY29kZXIgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkRlY29kZXIgPSBEZWNvZGVyO1xuXG4vKipcbiAqIEEgc29ja2V0LmlvIEVuY29kZXIgaW5zdGFuY2VcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEVuY29kZXIoKSB7fVxuXG52YXIgRVJST1JfUEFDS0VUID0gZXhwb3J0cy5FUlJPUiArICdcImVuY29kZSBlcnJvclwiJztcblxuLyoqXG4gKiBFbmNvZGUgYSBwYWNrZXQgYXMgYSBzaW5nbGUgc3RyaW5nIGlmIG5vbi1iaW5hcnksIG9yIGFzIGFcbiAqIGJ1ZmZlciBzZXF1ZW5jZSwgZGVwZW5kaW5nIG9uIHBhY2tldCB0eXBlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogLSBwYWNrZXQgb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIGZ1bmN0aW9uIHRvIGhhbmRsZSBlbmNvZGluZ3MgKGxpa2VseSBlbmdpbmUud3JpdGUpXG4gKiBAcmV0dXJuIENhbGxzIGNhbGxiYWNrIHdpdGggQXJyYXkgb2YgZW5jb2RpbmdzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVuY29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uKG9iaiwgY2FsbGJhY2spe1xuICBkZWJ1ZygnZW5jb2RpbmcgcGFja2V0ICVqJywgb2JqKTtcblxuICBpZiAoZXhwb3J0cy5CSU5BUllfRVZFTlQgPT09IG9iai50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PT0gb2JqLnR5cGUpIHtcbiAgICBlbmNvZGVBc0JpbmFyeShvYmosIGNhbGxiYWNrKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZW5jb2RpbmcgPSBlbmNvZGVBc1N0cmluZyhvYmopO1xuICAgIGNhbGxiYWNrKFtlbmNvZGluZ10pO1xuICB9XG59O1xuXG4vKipcbiAqIEVuY29kZSBwYWNrZXQgYXMgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEByZXR1cm4ge1N0cmluZ30gZW5jb2RlZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZW5jb2RlQXNTdHJpbmcob2JqKSB7XG5cbiAgLy8gZmlyc3QgaXMgdHlwZVxuICB2YXIgc3RyID0gJycgKyBvYmoudHlwZTtcblxuICAvLyBhdHRhY2htZW50cyBpZiB3ZSBoYXZlIHRoZW1cbiAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09PSBvYmoudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT09IG9iai50eXBlKSB7XG4gICAgc3RyICs9IG9iai5hdHRhY2htZW50cyArICctJztcbiAgfVxuXG4gIC8vIGlmIHdlIGhhdmUgYSBuYW1lc3BhY2Ugb3RoZXIgdGhhbiBgL2BcbiAgLy8gd2UgYXBwZW5kIGl0IGZvbGxvd2VkIGJ5IGEgY29tbWEgYCxgXG4gIGlmIChvYmoubnNwICYmICcvJyAhPT0gb2JqLm5zcCkge1xuICAgIHN0ciArPSBvYmoubnNwICsgJywnO1xuICB9XG5cbiAgLy8gaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgdGhlIGlkXG4gIGlmIChudWxsICE9IG9iai5pZCkge1xuICAgIHN0ciArPSBvYmouaWQ7XG4gIH1cblxuICAvLyBqc29uIGRhdGFcbiAgaWYgKG51bGwgIT0gb2JqLmRhdGEpIHtcbiAgICB2YXIgcGF5bG9hZCA9IHRyeVN0cmluZ2lmeShvYmouZGF0YSk7XG4gICAgaWYgKHBheWxvYWQgIT09IGZhbHNlKSB7XG4gICAgICBzdHIgKz0gcGF5bG9hZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIEVSUk9SX1BBQ0tFVDtcbiAgICB9XG4gIH1cblxuICBkZWJ1ZygnZW5jb2RlZCAlaiBhcyAlcycsIG9iaiwgc3RyKTtcbiAgcmV0dXJuIHN0cjtcbn1cblxuZnVuY3Rpb24gdHJ5U3RyaW5naWZ5KHN0cikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzdHIpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEVuY29kZSBwYWNrZXQgYXMgJ2J1ZmZlciBzZXF1ZW5jZScgYnkgcmVtb3ZpbmcgYmxvYnMsIGFuZFxuICogZGVjb25zdHJ1Y3RpbmcgcGFja2V0IGludG8gb2JqZWN0IHdpdGggcGxhY2Vob2xkZXJzIGFuZFxuICogYSBsaXN0IG9mIGJ1ZmZlcnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQHJldHVybiB7QnVmZmVyfSBlbmNvZGVkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBlbmNvZGVBc0JpbmFyeShvYmosIGNhbGxiYWNrKSB7XG5cbiAgZnVuY3Rpb24gd3JpdGVFbmNvZGluZyhibG9ibGVzc0RhdGEpIHtcbiAgICB2YXIgZGVjb25zdHJ1Y3Rpb24gPSBiaW5hcnkuZGVjb25zdHJ1Y3RQYWNrZXQoYmxvYmxlc3NEYXRhKTtcbiAgICB2YXIgcGFjayA9IGVuY29kZUFzU3RyaW5nKGRlY29uc3RydWN0aW9uLnBhY2tldCk7XG4gICAgdmFyIGJ1ZmZlcnMgPSBkZWNvbnN0cnVjdGlvbi5idWZmZXJzO1xuXG4gICAgYnVmZmVycy51bnNoaWZ0KHBhY2spOyAvLyBhZGQgcGFja2V0IGluZm8gdG8gYmVnaW5uaW5nIG9mIGRhdGEgbGlzdFxuICAgIGNhbGxiYWNrKGJ1ZmZlcnMpOyAvLyB3cml0ZSBhbGwgdGhlIGJ1ZmZlcnNcbiAgfVxuXG4gIGJpbmFyeS5yZW1vdmVCbG9icyhvYmosIHdyaXRlRW5jb2RpbmcpO1xufVxuXG4vKipcbiAqIEEgc29ja2V0LmlvIERlY29kZXIgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IGRlY29kZXJcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gRGVjb2RlcigpIHtcbiAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbnVsbDtcbn1cblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgIHdpdGggRGVjb2Rlci5cbiAqL1xuXG5FbWl0dGVyKERlY29kZXIucHJvdG90eXBlKTtcblxuLyoqXG4gKiBEZWNvZGVzIGFuIGVjb2RlZCBwYWNrZXQgc3RyaW5nIGludG8gcGFja2V0IEpTT04uXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG9iaiAtIGVuY29kZWQgcGFja2V0XG4gKiBAcmV0dXJuIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5EZWNvZGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihvYmopIHtcbiAgdmFyIHBhY2tldDtcbiAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XG4gICAgcGFja2V0ID0gZGVjb2RlU3RyaW5nKG9iaik7XG4gICAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09PSBwYWNrZXQudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT09IHBhY2tldC50eXBlKSB7IC8vIGJpbmFyeSBwYWNrZXQncyBqc29uXG4gICAgICB0aGlzLnJlY29uc3RydWN0b3IgPSBuZXcgQmluYXJ5UmVjb25zdHJ1Y3RvcihwYWNrZXQpO1xuXG4gICAgICAvLyBubyBhdHRhY2htZW50cywgbGFiZWxlZCBiaW5hcnkgYnV0IG5vIGJpbmFyeSBkYXRhIHRvIGZvbGxvd1xuICAgICAgaWYgKHRoaXMucmVjb25zdHJ1Y3Rvci5yZWNvblBhY2suYXR0YWNobWVudHMgPT09IDApIHtcbiAgICAgICAgdGhpcy5lbWl0KCdkZWNvZGVkJywgcGFja2V0KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgeyAvLyBub24tYmluYXJ5IGZ1bGwgcGFja2V0XG4gICAgICB0aGlzLmVtaXQoJ2RlY29kZWQnLCBwYWNrZXQpO1xuICAgIH1cbiAgfVxuICBlbHNlIGlmIChpc0J1ZihvYmopIHx8IG9iai5iYXNlNjQpIHsgLy8gcmF3IGJpbmFyeSBkYXRhXG4gICAgaWYgKCF0aGlzLnJlY29uc3RydWN0b3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZ290IGJpbmFyeSBkYXRhIHdoZW4gbm90IHJlY29uc3RydWN0aW5nIGEgcGFja2V0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhY2tldCA9IHRoaXMucmVjb25zdHJ1Y3Rvci50YWtlQmluYXJ5RGF0YShvYmopO1xuICAgICAgaWYgKHBhY2tldCkgeyAvLyByZWNlaXZlZCBmaW5hbCBidWZmZXJcbiAgICAgICAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbnVsbDtcbiAgICAgICAgdGhpcy5lbWl0KCdkZWNvZGVkJywgcGFja2V0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHR5cGU6ICcgKyBvYmopO1xuICB9XG59O1xuXG4vKipcbiAqIERlY29kZSBhIHBhY2tldCBTdHJpbmcgKEpTT04gZGF0YSlcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZGVjb2RlU3RyaW5nKHN0cikge1xuICB2YXIgaSA9IDA7XG4gIC8vIGxvb2sgdXAgdHlwZVxuICB2YXIgcCA9IHtcbiAgICB0eXBlOiBOdW1iZXIoc3RyLmNoYXJBdCgwKSlcbiAgfTtcblxuICBpZiAobnVsbCA9PSBleHBvcnRzLnR5cGVzW3AudHlwZV0pIHtcbiAgICByZXR1cm4gZXJyb3IoJ3Vua25vd24gcGFja2V0IHR5cGUgJyArIHAudHlwZSk7XG4gIH1cblxuICAvLyBsb29rIHVwIGF0dGFjaG1lbnRzIGlmIHR5cGUgYmluYXJ5XG4gIGlmIChleHBvcnRzLkJJTkFSWV9FVkVOVCA9PT0gcC50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PT0gcC50eXBlKSB7XG4gICAgdmFyIGJ1ZiA9ICcnO1xuICAgIHdoaWxlIChzdHIuY2hhckF0KCsraSkgIT09ICctJykge1xuICAgICAgYnVmICs9IHN0ci5jaGFyQXQoaSk7XG4gICAgICBpZiAoaSA9PSBzdHIubGVuZ3RoKSBicmVhaztcbiAgICB9XG4gICAgaWYgKGJ1ZiAhPSBOdW1iZXIoYnVmKSB8fCBzdHIuY2hhckF0KGkpICE9PSAnLScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSWxsZWdhbCBhdHRhY2htZW50cycpO1xuICAgIH1cbiAgICBwLmF0dGFjaG1lbnRzID0gTnVtYmVyKGJ1Zik7XG4gIH1cblxuICAvLyBsb29rIHVwIG5hbWVzcGFjZSAoaWYgYW55KVxuICBpZiAoJy8nID09PSBzdHIuY2hhckF0KGkgKyAxKSkge1xuICAgIHAubnNwID0gJyc7XG4gICAgd2hpbGUgKCsraSkge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckF0KGkpO1xuICAgICAgaWYgKCcsJyA9PT0gYykgYnJlYWs7XG4gICAgICBwLm5zcCArPSBjO1xuICAgICAgaWYgKGkgPT09IHN0ci5sZW5ndGgpIGJyZWFrO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBwLm5zcCA9ICcvJztcbiAgfVxuXG4gIC8vIGxvb2sgdXAgaWRcbiAgdmFyIG5leHQgPSBzdHIuY2hhckF0KGkgKyAxKTtcbiAgaWYgKCcnICE9PSBuZXh0ICYmIE51bWJlcihuZXh0KSA9PSBuZXh0KSB7XG4gICAgcC5pZCA9ICcnO1xuICAgIHdoaWxlICgrK2kpIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJBdChpKTtcbiAgICAgIGlmIChudWxsID09IGMgfHwgTnVtYmVyKGMpICE9IGMpIHtcbiAgICAgICAgLS1pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHAuaWQgKz0gc3RyLmNoYXJBdChpKTtcbiAgICAgIGlmIChpID09PSBzdHIubGVuZ3RoKSBicmVhaztcbiAgICB9XG4gICAgcC5pZCA9IE51bWJlcihwLmlkKTtcbiAgfVxuXG4gIC8vIGxvb2sgdXAganNvbiBkYXRhXG4gIGlmIChzdHIuY2hhckF0KCsraSkpIHtcbiAgICB2YXIgcGF5bG9hZCA9IHRyeVBhcnNlKHN0ci5zdWJzdHIoaSkpO1xuICAgIHZhciBpc1BheWxvYWRWYWxpZCA9IHBheWxvYWQgIT09IGZhbHNlICYmIChwLnR5cGUgPT09IGV4cG9ydHMuRVJST1IgfHwgaXNBcnJheShwYXlsb2FkKSk7XG4gICAgaWYgKGlzUGF5bG9hZFZhbGlkKSB7XG4gICAgICBwLmRhdGEgPSBwYXlsb2FkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZXJyb3IoJ2ludmFsaWQgcGF5bG9hZCcpO1xuICAgIH1cbiAgfVxuXG4gIGRlYnVnKCdkZWNvZGVkICVzIGFzICVqJywgc3RyLCBwKTtcbiAgcmV0dXJuIHA7XG59XG5cbmZ1bmN0aW9uIHRyeVBhcnNlKHN0cikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKHN0cik7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogRGVhbGxvY2F0ZXMgYSBwYXJzZXIncyByZXNvdXJjZXNcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkRlY29kZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMucmVjb25zdHJ1Y3Rvcikge1xuICAgIHRoaXMucmVjb25zdHJ1Y3Rvci5maW5pc2hlZFJlY29uc3RydWN0aW9uKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQSBtYW5hZ2VyIG9mIGEgYmluYXJ5IGV2ZW50J3MgJ2J1ZmZlciBzZXF1ZW5jZScuIFNob3VsZFxuICogYmUgY29uc3RydWN0ZWQgd2hlbmV2ZXIgYSBwYWNrZXQgb2YgdHlwZSBCSU5BUllfRVZFTlQgaXNcbiAqIGRlY29kZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQHJldHVybiB7QmluYXJ5UmVjb25zdHJ1Y3Rvcn0gaW5pdGlhbGl6ZWQgcmVjb25zdHJ1Y3RvclxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gQmluYXJ5UmVjb25zdHJ1Y3RvcihwYWNrZXQpIHtcbiAgdGhpcy5yZWNvblBhY2sgPSBwYWNrZXQ7XG4gIHRoaXMuYnVmZmVycyA9IFtdO1xufVxuXG4vKipcbiAqIE1ldGhvZCB0byBiZSBjYWxsZWQgd2hlbiBiaW5hcnkgZGF0YSByZWNlaXZlZCBmcm9tIGNvbm5lY3Rpb25cbiAqIGFmdGVyIGEgQklOQVJZX0VWRU5UIHBhY2tldC5cbiAqXG4gKiBAcGFyYW0ge0J1ZmZlciB8IEFycmF5QnVmZmVyfSBiaW5EYXRhIC0gdGhlIHJhdyBiaW5hcnkgZGF0YSByZWNlaXZlZFxuICogQHJldHVybiB7bnVsbCB8IE9iamVjdH0gcmV0dXJucyBudWxsIGlmIG1vcmUgYmluYXJ5IGRhdGEgaXMgZXhwZWN0ZWQgb3JcbiAqICAgYSByZWNvbnN0cnVjdGVkIHBhY2tldCBvYmplY3QgaWYgYWxsIGJ1ZmZlcnMgaGF2ZSBiZWVuIHJlY2VpdmVkLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuQmluYXJ5UmVjb25zdHJ1Y3Rvci5wcm90b3R5cGUudGFrZUJpbmFyeURhdGEgPSBmdW5jdGlvbihiaW5EYXRhKSB7XG4gIHRoaXMuYnVmZmVycy5wdXNoKGJpbkRhdGEpO1xuICBpZiAodGhpcy5idWZmZXJzLmxlbmd0aCA9PT0gdGhpcy5yZWNvblBhY2suYXR0YWNobWVudHMpIHsgLy8gZG9uZSB3aXRoIGJ1ZmZlciBsaXN0XG4gICAgdmFyIHBhY2tldCA9IGJpbmFyeS5yZWNvbnN0cnVjdFBhY2tldCh0aGlzLnJlY29uUGFjaywgdGhpcy5idWZmZXJzKTtcbiAgICB0aGlzLmZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24oKTtcbiAgICByZXR1cm4gcGFja2V0O1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiBDbGVhbnMgdXAgYmluYXJ5IHBhY2tldCByZWNvbnN0cnVjdGlvbiB2YXJpYWJsZXMuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuQmluYXJ5UmVjb25zdHJ1Y3Rvci5wcm90b3R5cGUuZmluaXNoZWRSZWNvbnN0cnVjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnJlY29uUGFjayA9IG51bGw7XG4gIHRoaXMuYnVmZmVycyA9IFtdO1xufTtcblxuZnVuY3Rpb24gZXJyb3IobXNnKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogZXhwb3J0cy5FUlJPUixcbiAgICBkYXRhOiAncGFyc2VyIGVycm9yOiAnICsgbXNnXG4gIH07XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xudmFyIGVtcHR5RnVuY3Rpb24gPSBmdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge307XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuIGFyZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFsaWRhdGVGb3JtYXQoZm9ybWF0KTtcblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICsgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSkpO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7IiwiaW1wb3J0ICQkb2JzZXJ2YWJsZSBmcm9tICdzeW1ib2wtb2JzZXJ2YWJsZSc7XG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6ICdAQHJlZHV4L0lOSVQnICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyksXG4gIFJFUExBQ0U6ICdAQHJlZHV4L1JFUExBQ0UnICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJylcbn07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG59O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAoKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG9iaikpICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICB2YXIgcHJvdG8gPSBvYmo7XG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUmVkdXggc3RvcmUgdGhhdCBob2xkcyB0aGUgc3RhdGUgdHJlZS5cbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gIHZhciBfcmVmMjtcblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbmhhbmNlciA9IHByZWxvYWRlZFN0YXRlO1xuICAgIHByZWxvYWRlZFN0YXRlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHJldHVybiBlbmhhbmNlcihjcmVhdGVTdG9yZSkocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiByZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVhZHMgdGhlIHN0YXRlIHRyZWUgbWFuYWdlZCBieSB0aGUgc3RvcmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHthbnl9IFRoZSBjdXJyZW50IHN0YXRlIHRyZWUgb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmUobGlzdGVuZXIpIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG5cbiAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgbmV4dExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG5cbiAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICAgIHZhciBpbmRleCA9IG5leHRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBuZXh0TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFuIGFjdGlvbi4gSXQgaXMgdGhlIG9ubHkgd2F5IHRvIHRyaWdnZXIgYSBzdGF0ZSBjaGFuZ2UuXG4gICAqXG4gICAqIFRoZSBgcmVkdWNlcmAgZnVuY3Rpb24sIHVzZWQgdG8gY3JlYXRlIHRoZSBzdG9yZSwgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGVcbiAgICogY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgZ2l2ZW4gYGFjdGlvbmAuIEl0cyByZXR1cm4gdmFsdWUgd2lsbFxuICAgKiBiZSBjb25zaWRlcmVkIHRoZSAqKm5leHQqKiBzdGF0ZSBvZiB0aGUgdHJlZSwgYW5kIHRoZSBjaGFuZ2UgbGlzdGVuZXJzXG4gICAqIHdpbGwgYmUgbm90aWZpZWQuXG4gICAqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9ubHkgc3VwcG9ydHMgcGxhaW4gb2JqZWN0IGFjdGlvbnMuIElmIHlvdSB3YW50IHRvXG4gICAqIGRpc3BhdGNoIGEgUHJvbWlzZSwgYW4gT2JzZXJ2YWJsZSwgYSB0aHVuaywgb3Igc29tZXRoaW5nIGVsc2UsIHlvdSBuZWVkIHRvXG4gICAqIHdyYXAgeW91ciBzdG9yZSBjcmVhdGluZyBmdW5jdGlvbiBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIG1pZGRsZXdhcmUuIEZvclxuICAgKiBleGFtcGxlLCBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UuIEV2ZW4gdGhlXG4gICAqIG1pZGRsZXdhcmUgd2lsbCBldmVudHVhbGx5IGRpc3BhdGNoIHBsYWluIG9iamVjdCBhY3Rpb25zIHVzaW5nIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWN0aW9uIEEgcGxhaW4gb2JqZWN0IHJlcHJlc2VudGluZyDigJx3aGF0IGNoYW5nZWTigJ0uIEl0IGlzXG4gICAqIGEgZ29vZCBpZGVhIHRvIGtlZXAgYWN0aW9ucyBzZXJpYWxpemFibGUgc28geW91IGNhbiByZWNvcmQgYW5kIHJlcGxheSB1c2VyXG4gICAqIHNlc3Npb25zLCBvciB1c2UgdGhlIHRpbWUgdHJhdmVsbGluZyBgcmVkdXgtZGV2dG9vbHNgLiBBbiBhY3Rpb24gbXVzdCBoYXZlXG4gICAqIGEgYHR5cGVgIHByb3BlcnR5IHdoaWNoIG1heSBub3QgYmUgYHVuZGVmaW5lZGAuIEl0IGlzIGEgZ29vZCBpZGVhIHRvIHVzZVxuICAgKiBzdHJpbmcgY29uc3RhbnRzIGZvciBhY3Rpb24gdHlwZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEZvciBjb252ZW5pZW5jZSwgdGhlIHNhbWUgYWN0aW9uIG9iamVjdCB5b3UgZGlzcGF0Y2hlZC5cbiAgICpcbiAgICogTm90ZSB0aGF0LCBpZiB5b3UgdXNlIGEgY3VzdG9tIG1pZGRsZXdhcmUsIGl0IG1heSB3cmFwIGBkaXNwYXRjaCgpYCB0b1xuICAgKiByZXR1cm4gc29tZXRoaW5nIGVsc2UgKGZvciBleGFtcGxlLCBhIFByb21pc2UgeW91IGNhbiBhd2FpdCkuXG4gICAqL1xuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gJyArICdVc2UgY3VzdG9tIG1pZGRsZXdhcmUgZm9yIGFzeW5jIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiAnICsgJ0hhdmUgeW91IG1pc3NwZWxsZWQgYSBjb25zdGFudD8nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZnVuY3Rpb24gcmVwbGFjZVJlZHVjZXIobmV4dFJlZHVjZXIpIHtcbiAgICBpZiAodHlwZW9mIG5leHRSZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBuZXh0UmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cbiAgZnVuY3Rpb24gb2JzZXJ2YWJsZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBvdXRlclN1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICByZXR1cm4gX3JlZiA9IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1pbmltYWwgb2JzZXJ2YWJsZSBzdWJzY3JpcHRpb24gbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9ic2VydmVyIEFueSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBvYnNlcnZlci5cbiAgICAgICAqIFRoZSBvYnNlcnZlciBvYmplY3Qgc2hvdWxkIGhhdmUgYSBgbmV4dGAgbWV0aG9kLlxuICAgICAgICogQHJldHVybnMge3N1YnNjcmlwdGlvbn0gQW4gb2JqZWN0IHdpdGggYW4gYHVuc3Vic2NyaWJlYCBtZXRob2QgdGhhdCBjYW5cbiAgICAgICAqIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUgdGhlIG9ic2VydmFibGUgZnJvbSB0aGUgc3RvcmUsIGFuZCBwcmV2ZW50IGZ1cnRoZXJcbiAgICAgICAqIGVtaXNzaW9uIG9mIHZhbHVlcyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAgICovXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgICBpZiAoKHR5cGVvZiBvYnNlcnZlciA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2JzZXJ2ZXIpKSAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4geyB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmUgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9XG5cbiAgLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG4gIGRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZXMuSU5JVCB9KTtcblxuICByZXR1cm4gX3JlZjIgPSB7XG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICByZXBsYWNlUmVkdWNlcjogcmVwbGFjZVJlZHVjZXJcbiAgfSwgX3JlZjJbJCRvYnNlcnZhYmxlXSA9IG9ic2VydmFibGUsIF9yZWYyO1xufVxuXG4vKipcbiAqIFByaW50cyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbn1cblxuZnVuY3Rpb24gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pIHtcbiAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gIHZhciBhY3Rpb25EZXNjcmlwdGlvbiA9IGFjdGlvblR5cGUgJiYgJ2FjdGlvbiBcIicgKyBTdHJpbmcoYWN0aW9uVHlwZSkgKyAnXCInIHx8ICdhbiBhY3Rpb24nO1xuXG4gIHJldHVybiAnR2l2ZW4gJyArIGFjdGlvbkRlc2NyaXB0aW9uICsgJywgcmVkdWNlciBcIicgKyBrZXkgKyAnXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiAnICsgJ1RvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gJyArICdJZiB5b3Ugd2FudCB0aGlzIHJlZHVjZXIgdG8gaG9sZCBubyB2YWx1ZSwgeW91IGNhbiByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC4nO1xufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gJ1RoZSAnICsgYXJndW1lbnROYW1lICsgJyBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFwiJyArIHt9LnRvU3RyaW5nLmNhbGwoaW5wdXRTdGF0ZSkubWF0Y2goL1xccyhbYS16fEEtWl0rKS8pWzFdICsgJ1wiLiBFeHBlY3RlZCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nICcgKyAoJ2tleXM6IFwiJyArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgJ1wiJyk7XG4gIH1cblxuICB2YXIgdW5leHBlY3RlZEtleXMgPSBPYmplY3Qua2V5cyhpbnB1dFN0YXRlKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhcmVkdWNlcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhdW5leHBlY3RlZEtleUNhY2hlW2tleV07XG4gIH0pO1xuXG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG5cbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuICdVbmV4cGVjdGVkICcgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArICcgJyArICgnXCInICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyAnXCIgZm91bmQgaW4gJyArIGFyZ3VtZW50TmFtZSArICcuICcpICsgJ0V4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogJyArICgnXCInICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyAnXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7IHR5cGU6IEFjdGlvblR5cGVzLklOSVQgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVkdWNlciBcIicgKyBrZXkgKyAnXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gJyArICdJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgJyArICdleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5ICcgKyAnbm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvblxcJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCAnICsgJ3lvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuJyk7XG4gICAgfVxuXG4gICAgdmFyIHR5cGUgPSAnQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTl8nICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwgeyB0eXBlOiB0eXBlIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VyIFwiJyArIGtleSArICdcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiAnICsgKCdEb25cXCd0IHRyeSB0byBoYW5kbGUgJyArIEFjdGlvblR5cGVzLklOSVQgKyAnIG9yIG90aGVyIGFjdGlvbnMgaW4gXCJyZWR1eC8qXCIgJykgKyAnbmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgJyArICdjdXJyZW50IHN0YXRlIGZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB1bmxlc3MgaXQgaXMgdW5kZWZpbmVkLCAnICsgJ2luIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSAnICsgJ2FjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLicpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IHJlZHVjZXIgZnVuY3Rpb25zLCBpbnRvIGEgc2luZ2xlXG4gKiByZWR1Y2VyIGZ1bmN0aW9uLiBJdCB3aWxsIGNhbGwgZXZlcnkgY2hpbGQgcmVkdWNlciwgYW5kIGdhdGhlciB0aGVpciByZXN1bHRzXG4gKiBpbnRvIGEgc2luZ2xlIHN0YXRlIG9iamVjdCwgd2hvc2Uga2V5cyBjb3JyZXNwb25kIHRvIHRoZSBrZXlzIG9mIHRoZSBwYXNzZWRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWR1Y2VycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGNvcnJlc3BvbmQgdG8gZGlmZmVyZW50XG4gKiByZWR1Y2VyIGZ1bmN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgY29tYmluZWQgaW50byBvbmUuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluXG4gKiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhcyByZWR1Y2Vyc2Agc3ludGF4LiBUaGUgcmVkdWNlcnMgbWF5IG5ldmVyIHJldHVyblxuICogdW5kZWZpbmVkIGZvciBhbnkgYWN0aW9uLiBJbnN0ZWFkLCB0aGV5IHNob3VsZCByZXR1cm4gdGhlaXIgaW5pdGlhbCBzdGF0ZVxuICogaWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGVtIHdhcyB1bmRlZmluZWQsIGFuZCB0aGUgY3VycmVudCBzdGF0ZSBmb3IgYW55XG4gKiB1bnJlY29nbml6ZWQgYWN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSByZWR1Y2VyIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBldmVyeSByZWR1Y2VyIGluc2lkZSB0aGVcbiAqIHBhc3NlZCBvYmplY3QsIGFuZCBidWlsZHMgYSBzdGF0ZSBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZS5cbiAqL1xuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWR1Y2VyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSByZWR1Y2VyS2V5c1tpXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdhcm5pbmcoJ05vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcIicgKyBrZXkgKyAnXCInKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHZvaWQgMDtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yID0gdm9pZCAwO1xuICB0cnkge1xuICAgIGFzc2VydFJlZHVjZXJTaGFwZShmaW5hbFJlZHVjZXJzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSBlO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbWJpbmF0aW9uKCkge1xuICAgIHZhciBzdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50c1sxXTtcblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG4gICAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgd2FybmluZyh3YXJuaW5nTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgbmV4dFN0YXRlID0ge307XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKF9rZXksIGFjdGlvbik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuXG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBmdW5jdGlvbiBpbiByZXR1cm4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGFjdGlvbkNyZWF0b3JzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvblxuICogY3JlYXRvciBmdW5jdGlvbnMuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzYFxuICogc3ludGF4LiBZb3UgbWF5IGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCBUaGUgYGRpc3BhdGNoYCBmdW5jdGlvbiBhdmFpbGFibGUgb24geW91ciBSZWR1eFxuICogc3RvcmUuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gVGhlIG9iamVjdCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG9iamVjdCwgYnV0IHdpdGhcbiAqIGV2ZXJ5IGFjdGlvbiBjcmVhdG9yIHdyYXBwZWQgaW50byB0aGUgYGRpc3BhdGNoYCBjYWxsLiBJZiB5b3UgcGFzc2VkIGFcbiAqIGZ1bmN0aW9uIGFzIGBhY3Rpb25DcmVhdG9yc2AsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBhbHNvIGJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAoKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYWN0aW9uQ3JlYXRvcnMpKSAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2JpbmRBY3Rpb25DcmVhdG9ycyBleHBlY3RlZCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiwgaW5zdGVhZCByZWNlaXZlZCAnICsgKGFjdGlvbkNyZWF0b3JzID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhY3Rpb25DcmVhdG9ycykpICsgJy4gJyArICdEaWQgeW91IHdyaXRlIFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cIiBpbnN0ZWFkIG9mIFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVwiPycpO1xuICB9XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhY3Rpb25DcmVhdG9ycyk7XG4gIHZhciBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbi8qKlxuICogQ29tcG9zZXMgc2luZ2xlLWFyZ3VtZW50IGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByaWdodG1vc3RcbiAqIGZ1bmN0aW9uIGNhbiB0YWtlIG11bHRpcGxlIGFyZ3VtZW50cyBhcyBpdCBwcm92aWRlcyB0aGUgc2lnbmF0dXJlIGZvclxuICogdGhlIHJlc3VsdGluZyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3MgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIG9idGFpbmVkIGJ5IGNvbXBvc2luZyB0aGUgYXJndW1lbnQgZnVuY3Rpb25zXG4gKiBmcm9tIHJpZ2h0IHRvIGxlZnQuIEZvciBleGFtcGxlLCBjb21wb3NlKGYsIGcsIGgpIGlzIGlkZW50aWNhbCB0byBkb2luZ1xuICogKC4uLmFyZ3MpID0+IGYoZyhoKC4uLmFyZ3MpKSkuXG4gKi9cblxuZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1pZGRsZXdhcmVzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgIHZhciBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiAnICsgJ090aGVyIG1pZGRsZXdhcmUgd291bGQgbm90IGJlIGFwcGxpZWQgdG8gdGhpcyBkaXNwYXRjaC4nKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKTtcbiAgICAgIH0pO1xuICAgICAgX2Rpc3BhdGNoID0gY29tcG9zZS5hcHBseSh1bmRlZmluZWQsIGNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG5cbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RvcmUsIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLypcbiAqIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiAqIElmIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBtaW5pZmllZCBhbmQgTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJywgd2FybiB0aGUgdXNlci5cbiAqL1xuZnVuY3Rpb24gaXNDcnVzaGVkKCkge31cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGlzQ3J1c2hlZC5uYW1lID09PSAnc3RyaW5nJyAmJiBpc0NydXNoZWQubmFtZSAhPT0gJ2lzQ3J1c2hlZCcpIHtcbiAgd2FybmluZyhcIllvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nLiBcIiArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIERlZmluZVBsdWdpbiBmb3Igd2VicGFjayAoaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMDAzMDAzMSkgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBjcmVhdGVTdG9yZSwgY29tYmluZVJlZHVjZXJzLCBiaW5kQWN0aW9uQ3JlYXRvcnMsIGFwcGx5TWlkZGxld2FyZSwgY29tcG9zZSwgQWN0aW9uVHlwZXMgYXMgX19ET19OT1RfVVNFX19BY3Rpb25UeXBlcyB9O1xuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCIvKipcbiAqIFNsaWNlIHJlZmVyZW5jZS5cbiAqL1xuXG52YXIgc2xpY2UgPSBbXS5zbGljZTtcblxuLyoqXG4gKiBCaW5kIGBvYmpgIHRvIGBmbmAuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IGZuIG9yIHN0cmluZ1xuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBmbil7XG4gIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgZm4pIGZuID0gb2JqW2ZuXTtcbiAgaWYgKCdmdW5jdGlvbicgIT0gdHlwZW9mIGZuKSB0aHJvdyBuZXcgRXJyb3IoJ2JpbmQoKSByZXF1aXJlcyBhIGZ1bmN0aW9uJyk7XG4gIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gZm4uYXBwbHkob2JqLCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgfVxufTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IG9uO1xuXG4vKipcbiAqIEhlbHBlciBmb3Igc3Vic2NyaXB0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxFdmVudEVtaXR0ZXJ9IG9iaiB3aXRoIGBFbWl0dGVyYCBtaXhpbiBvciBgRXZlbnRFbWl0dGVyYFxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IG5hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIG9uIChvYmosIGV2LCBmbikge1xuICBvYmoub24oZXYsIGZuKTtcbiAgcmV0dXJuIHtcbiAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICBvYmoucmVtb3ZlTGlzdGVuZXIoZXYsIGZuKTtcbiAgICB9XG4gIH07XG59XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgcGFyc2VyID0gcmVxdWlyZSgnc29ja2V0LmlvLXBhcnNlcicpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xudmFyIHRvQXJyYXkgPSByZXF1aXJlKCd0by1hcnJheScpO1xudmFyIG9uID0gcmVxdWlyZSgnLi9vbicpO1xudmFyIGJpbmQgPSByZXF1aXJlKCdjb21wb25lbnQtYmluZCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudDpzb2NrZXQnKTtcbnZhciBwYXJzZXFzID0gcmVxdWlyZSgncGFyc2VxcycpO1xudmFyIGhhc0JpbiA9IHJlcXVpcmUoJ2hhcy1iaW5hcnkyJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gU29ja2V0O1xuXG4vKipcbiAqIEludGVybmFsIGV2ZW50cyAoYmxhY2tsaXN0ZWQpLlxuICogVGhlc2UgZXZlbnRzIGNhbid0IGJlIGVtaXR0ZWQgYnkgdGhlIHVzZXIuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxudmFyIGV2ZW50cyA9IHtcbiAgY29ubmVjdDogMSxcbiAgY29ubmVjdF9lcnJvcjogMSxcbiAgY29ubmVjdF90aW1lb3V0OiAxLFxuICBjb25uZWN0aW5nOiAxLFxuICBkaXNjb25uZWN0OiAxLFxuICBlcnJvcjogMSxcbiAgcmVjb25uZWN0OiAxLFxuICByZWNvbm5lY3RfYXR0ZW1wdDogMSxcbiAgcmVjb25uZWN0X2ZhaWxlZDogMSxcbiAgcmVjb25uZWN0X2Vycm9yOiAxLFxuICByZWNvbm5lY3Rpbmc6IDEsXG4gIHBpbmc6IDEsXG4gIHBvbmc6IDFcbn07XG5cbi8qKlxuICogU2hvcnRjdXQgdG8gYEVtaXR0ZXIjZW1pdGAuXG4gKi9cblxudmFyIGVtaXQgPSBFbWl0dGVyLnByb3RvdHlwZS5lbWl0O1xuXG4vKipcbiAqIGBTb2NrZXRgIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gU29ja2V0IChpbywgbnNwLCBvcHRzKSB7XG4gIHRoaXMuaW8gPSBpbztcbiAgdGhpcy5uc3AgPSBuc3A7XG4gIHRoaXMuanNvbiA9IHRoaXM7IC8vIGNvbXBhdFxuICB0aGlzLmlkcyA9IDA7XG4gIHRoaXMuYWNrcyA9IHt9O1xuICB0aGlzLnJlY2VpdmVCdWZmZXIgPSBbXTtcbiAgdGhpcy5zZW5kQnVmZmVyID0gW107XG4gIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gIHRoaXMuZGlzY29ubmVjdGVkID0gdHJ1ZTtcbiAgdGhpcy5mbGFncyA9IHt9O1xuICBpZiAob3B0cyAmJiBvcHRzLnF1ZXJ5KSB7XG4gICAgdGhpcy5xdWVyeSA9IG9wdHMucXVlcnk7XG4gIH1cbiAgaWYgKHRoaXMuaW8uYXV0b0Nvbm5lY3QpIHRoaXMub3BlbigpO1xufVxuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAuXG4gKi9cblxuRW1pdHRlcihTb2NrZXQucHJvdG90eXBlKTtcblxuLyoqXG4gKiBTdWJzY3JpYmUgdG8gb3BlbiwgY2xvc2UgYW5kIHBhY2tldCBldmVudHNcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnN1YkV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuc3VicykgcmV0dXJuO1xuXG4gIHZhciBpbyA9IHRoaXMuaW87XG4gIHRoaXMuc3VicyA9IFtcbiAgICBvbihpbywgJ29wZW4nLCBiaW5kKHRoaXMsICdvbm9wZW4nKSksXG4gICAgb24oaW8sICdwYWNrZXQnLCBiaW5kKHRoaXMsICdvbnBhY2tldCcpKSxcbiAgICBvbihpbywgJ2Nsb3NlJywgYmluZCh0aGlzLCAnb25jbG9zZScpKVxuICBdO1xufTtcblxuLyoqXG4gKiBcIk9wZW5zXCIgdGhlIHNvY2tldC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUub3BlbiA9XG5Tb2NrZXQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNvbm5lY3RlZCkgcmV0dXJuIHRoaXM7XG5cbiAgdGhpcy5zdWJFdmVudHMoKTtcbiAgdGhpcy5pby5vcGVuKCk7IC8vIGVuc3VyZSBvcGVuXG4gIGlmICgnb3BlbicgPT09IHRoaXMuaW8ucmVhZHlTdGF0ZSkgdGhpcy5vbm9wZW4oKTtcbiAgdGhpcy5lbWl0KCdjb25uZWN0aW5nJyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kcyBhIGBtZXNzYWdlYCBldmVudC5cbiAqXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKTtcbiAgYXJncy51bnNoaWZ0KCdtZXNzYWdlJyk7XG4gIHRoaXMuZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIE92ZXJyaWRlIGBlbWl0YC5cbiAqIElmIHRoZSBldmVudCBpcyBpbiBgZXZlbnRzYCwgaXQncyBlbWl0dGVkIG5vcm1hbGx5LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBuYW1lXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gKGV2KSB7XG4gIGlmIChldmVudHMuaGFzT3duUHJvcGVydHkoZXYpKSB7XG4gICAgZW1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cyk7XG4gIHZhciBwYWNrZXQgPSB7XG4gICAgdHlwZTogKHRoaXMuZmxhZ3MuYmluYXJ5ICE9PSB1bmRlZmluZWQgPyB0aGlzLmZsYWdzLmJpbmFyeSA6IGhhc0JpbihhcmdzKSkgPyBwYXJzZXIuQklOQVJZX0VWRU5UIDogcGFyc2VyLkVWRU5ULFxuICAgIGRhdGE6IGFyZ3NcbiAgfTtcblxuICBwYWNrZXQub3B0aW9ucyA9IHt9O1xuICBwYWNrZXQub3B0aW9ucy5jb21wcmVzcyA9ICF0aGlzLmZsYWdzIHx8IGZhbHNlICE9PSB0aGlzLmZsYWdzLmNvbXByZXNzO1xuXG4gIC8vIGV2ZW50IGFjayBjYWxsYmFja1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSkge1xuICAgIGRlYnVnKCdlbWl0dGluZyBwYWNrZXQgd2l0aCBhY2sgaWQgJWQnLCB0aGlzLmlkcyk7XG4gICAgdGhpcy5hY2tzW3RoaXMuaWRzXSA9IGFyZ3MucG9wKCk7XG4gICAgcGFja2V0LmlkID0gdGhpcy5pZHMrKztcbiAgfVxuXG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIHRoaXMucGFja2V0KHBhY2tldCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zZW5kQnVmZmVyLnB1c2gocGFja2V0KTtcbiAgfVxuXG4gIHRoaXMuZmxhZ3MgPSB7fTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZHMgYSBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5wYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHBhY2tldC5uc3AgPSB0aGlzLm5zcDtcbiAgdGhpcy5pby5wYWNrZXQocGFja2V0KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gZW5naW5lIGBvcGVuYC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ3RyYW5zcG9ydCBpcyBvcGVuIC0gY29ubmVjdGluZycpO1xuXG4gIC8vIHdyaXRlIGNvbm5lY3QgcGFja2V0IGlmIG5lY2Vzc2FyeVxuICBpZiAoJy8nICE9PSB0aGlzLm5zcCkge1xuICAgIGlmICh0aGlzLnF1ZXJ5KSB7XG4gICAgICB2YXIgcXVlcnkgPSB0eXBlb2YgdGhpcy5xdWVyeSA9PT0gJ29iamVjdCcgPyBwYXJzZXFzLmVuY29kZSh0aGlzLnF1ZXJ5KSA6IHRoaXMucXVlcnk7XG4gICAgICBkZWJ1Zygnc2VuZGluZyBjb25uZWN0IHBhY2tldCB3aXRoIHF1ZXJ5ICVzJywgcXVlcnkpO1xuICAgICAgdGhpcy5wYWNrZXQoe3R5cGU6IHBhcnNlci5DT05ORUNULCBxdWVyeTogcXVlcnl9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wYWNrZXQoe3R5cGU6IHBhcnNlci5DT05ORUNUfSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVuZ2luZSBgY2xvc2VgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSByZWFzb25cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25jbG9zZSA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgZGVidWcoJ2Nsb3NlICglcyknLCByZWFzb24pO1xuICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICB0aGlzLmRpc2Nvbm5lY3RlZCA9IHRydWU7XG4gIGRlbGV0ZSB0aGlzLmlkO1xuICB0aGlzLmVtaXQoJ2Rpc2Nvbm5lY3QnLCByZWFzb24pO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBzb2NrZXQgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25wYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHZhciBzYW1lTmFtZXNwYWNlID0gcGFja2V0Lm5zcCA9PT0gdGhpcy5uc3A7XG4gIHZhciByb290TmFtZXNwYWNlRXJyb3IgPSBwYWNrZXQudHlwZSA9PT0gcGFyc2VyLkVSUk9SICYmIHBhY2tldC5uc3AgPT09ICcvJztcblxuICBpZiAoIXNhbWVOYW1lc3BhY2UgJiYgIXJvb3ROYW1lc3BhY2VFcnJvcikgcmV0dXJuO1xuXG4gIHN3aXRjaCAocGFja2V0LnR5cGUpIHtcbiAgICBjYXNlIHBhcnNlci5DT05ORUNUOlxuICAgICAgdGhpcy5vbmNvbm5lY3QoKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuRVZFTlQ6XG4gICAgICB0aGlzLm9uZXZlbnQocGFja2V0KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuQklOQVJZX0VWRU5UOlxuICAgICAgdGhpcy5vbmV2ZW50KHBhY2tldCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkFDSzpcbiAgICAgIHRoaXMub25hY2socGFja2V0KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuQklOQVJZX0FDSzpcbiAgICAgIHRoaXMub25hY2socGFja2V0KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuRElTQ09OTkVDVDpcbiAgICAgIHRoaXMub25kaXNjb25uZWN0KCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkVSUk9SOlxuICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIHBhY2tldC5kYXRhKTtcbiAgICAgIGJyZWFrO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgc2VydmVyIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25ldmVudCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdmFyIGFyZ3MgPSBwYWNrZXQuZGF0YSB8fCBbXTtcbiAgZGVidWcoJ2VtaXR0aW5nIGV2ZW50ICVqJywgYXJncyk7XG5cbiAgaWYgKG51bGwgIT0gcGFja2V0LmlkKSB7XG4gICAgZGVidWcoJ2F0dGFjaGluZyBhY2sgY2FsbGJhY2sgdG8gZXZlbnQnKTtcbiAgICBhcmdzLnB1c2godGhpcy5hY2socGFja2V0LmlkKSk7XG4gIH1cblxuICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICBlbWl0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMucmVjZWl2ZUJ1ZmZlci5wdXNoKGFyZ3MpO1xuICB9XG59O1xuXG4vKipcbiAqIFByb2R1Y2VzIGFuIGFjayBjYWxsYmFjayB0byBlbWl0IHdpdGggYW4gZXZlbnQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5hY2sgPSBmdW5jdGlvbiAoaWQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgc2VudCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIC8vIHByZXZlbnQgZG91YmxlIGNhbGxiYWNrc1xuICAgIGlmIChzZW50KSByZXR1cm47XG4gICAgc2VudCA9IHRydWU7XG4gICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cyk7XG4gICAgZGVidWcoJ3NlbmRpbmcgYWNrICVqJywgYXJncyk7XG5cbiAgICBzZWxmLnBhY2tldCh7XG4gICAgICB0eXBlOiBoYXNCaW4oYXJncykgPyBwYXJzZXIuQklOQVJZX0FDSyA6IHBhcnNlci5BQ0ssXG4gICAgICBpZDogaWQsXG4gICAgICBkYXRhOiBhcmdzXG4gICAgfSk7XG4gIH07XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgc2VydmVyIGFja25vd2xlZ2VtZW50LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25hY2sgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHZhciBhY2sgPSB0aGlzLmFja3NbcGFja2V0LmlkXTtcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBhY2spIHtcbiAgICBkZWJ1ZygnY2FsbGluZyBhY2sgJXMgd2l0aCAlaicsIHBhY2tldC5pZCwgcGFja2V0LmRhdGEpO1xuICAgIGFjay5hcHBseSh0aGlzLCBwYWNrZXQuZGF0YSk7XG4gICAgZGVsZXRlIHRoaXMuYWNrc1twYWNrZXQuaWRdO1xuICB9IGVsc2Uge1xuICAgIGRlYnVnKCdiYWQgYWNrICVzJywgcGFja2V0LmlkKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzZXJ2ZXIgY29ubmVjdC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jb25uZWN0ZWQgPSB0cnVlO1xuICB0aGlzLmRpc2Nvbm5lY3RlZCA9IGZhbHNlO1xuICB0aGlzLmVtaXQoJ2Nvbm5lY3QnKTtcbiAgdGhpcy5lbWl0QnVmZmVyZWQoKTtcbn07XG5cbi8qKlxuICogRW1pdCBidWZmZXJlZCBldmVudHMgKHJlY2VpdmVkIGFuZCBlbWl0dGVkKS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmVtaXRCdWZmZXJlZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGk7XG4gIGZvciAoaSA9IDA7IGkgPCB0aGlzLnJlY2VpdmVCdWZmZXIubGVuZ3RoOyBpKyspIHtcbiAgICBlbWl0LmFwcGx5KHRoaXMsIHRoaXMucmVjZWl2ZUJ1ZmZlcltpXSk7XG4gIH1cbiAgdGhpcy5yZWNlaXZlQnVmZmVyID0gW107XG5cbiAgZm9yIChpID0gMDsgaSA8IHRoaXMuc2VuZEJ1ZmZlci5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMucGFja2V0KHRoaXMuc2VuZEJ1ZmZlcltpXSk7XG4gIH1cbiAgdGhpcy5zZW5kQnVmZmVyID0gW107XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHNlcnZlciBkaXNjb25uZWN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1Zygnc2VydmVyIGRpc2Nvbm5lY3QgKCVzKScsIHRoaXMubnNwKTtcbiAgdGhpcy5kZXN0cm95KCk7XG4gIHRoaXMub25jbG9zZSgnaW8gc2VydmVyIGRpc2Nvbm5lY3QnKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gZm9yY2VkIGNsaWVudC9zZXJ2ZXIgc2lkZSBkaXNjb25uZWN0aW9ucyxcbiAqIHRoaXMgbWV0aG9kIGVuc3VyZXMgdGhlIG1hbmFnZXIgc3RvcHMgdHJhY2tpbmcgdXMgYW5kXG4gKiB0aGF0IHJlY29ubmVjdGlvbnMgZG9uJ3QgZ2V0IHRyaWdnZXJlZCBmb3IgdGhpcy5cbiAqXG4gKiBAYXBpIHByaXZhdGUuXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5zdWJzKSB7XG4gICAgLy8gY2xlYW4gc3Vic2NyaXB0aW9ucyB0byBhdm9pZCByZWNvbm5lY3Rpb25zXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN1YnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuc3Vic1tpXS5kZXN0cm95KCk7XG4gICAgfVxuICAgIHRoaXMuc3VicyA9IG51bGw7XG4gIH1cblxuICB0aGlzLmlvLmRlc3Ryb3kodGhpcyk7XG59O1xuXG4vKipcbiAqIERpc2Nvbm5lY3RzIHRoZSBzb2NrZXQgbWFudWFsbHkuXG4gKlxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuY2xvc2UgPVxuU29ja2V0LnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICBkZWJ1ZygncGVyZm9ybWluZyBkaXNjb25uZWN0ICglcyknLCB0aGlzLm5zcCk7XG4gICAgdGhpcy5wYWNrZXQoeyB0eXBlOiBwYXJzZXIuRElTQ09OTkVDVCB9KTtcbiAgfVxuXG4gIC8vIHJlbW92ZSBzb2NrZXQgZnJvbSBwb29sXG4gIHRoaXMuZGVzdHJveSgpO1xuXG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIC8vIGZpcmUgZXZlbnRzXG4gICAgdGhpcy5vbmNsb3NlKCdpbyBjbGllbnQgZGlzY29ubmVjdCcpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjb21wcmVzcyBmbGFnLlxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaWYgYHRydWVgLCBjb21wcmVzc2VzIHRoZSBzZW5kaW5nIGRhdGFcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmNvbXByZXNzID0gZnVuY3Rpb24gKGNvbXByZXNzKSB7XG4gIHRoaXMuZmxhZ3MuY29tcHJlc3MgPSBjb21wcmVzcztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGJpbmFyeSBmbGFnXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSB3aGV0aGVyIHRoZSBlbWl0dGVkIGRhdGEgY29udGFpbnMgYmluYXJ5XG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5iaW5hcnkgPSBmdW5jdGlvbiAoYmluYXJ5KSB7XG4gIHRoaXMuZmxhZ3MuYmluYXJ5ID0gYmluYXJ5O1xuICByZXR1cm4gdGhpcztcbn07XG4iLCJcbnZhciBpbmRleE9mID0gW10uaW5kZXhPZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcnIsIG9iail7XG4gIGlmIChpbmRleE9mKSByZXR1cm4gYXJyLmluZGV4T2Yob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoYXJyW2ldID09PSBvYmopIHJldHVybiBpO1xuICB9XG4gIHJldHVybiAtMTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYWxwaGFiZXQgPSAnMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXotXycuc3BsaXQoJycpXG4gICwgbGVuZ3RoID0gNjRcbiAgLCBtYXAgPSB7fVxuICAsIHNlZWQgPSAwXG4gICwgaSA9IDBcbiAgLCBwcmV2O1xuXG4vKipcbiAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHNwZWNpZmllZCBudW1iZXIuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBudW1iZXIuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBlbmNvZGUobnVtKSB7XG4gIHZhciBlbmNvZGVkID0gJyc7XG5cbiAgZG8ge1xuICAgIGVuY29kZWQgPSBhbHBoYWJldFtudW0gJSBsZW5ndGhdICsgZW5jb2RlZDtcbiAgICBudW0gPSBNYXRoLmZsb29yKG51bSAvIGxlbmd0aCk7XG4gIH0gd2hpbGUgKG51bSA+IDApO1xuXG4gIHJldHVybiBlbmNvZGVkO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgaW50ZWdlciB2YWx1ZSBzcGVjaWZpZWQgYnkgdGhlIGdpdmVuIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBpbnRlZ2VyIHZhbHVlIHJlcHJlc2VudGVkIGJ5IHRoZSBzdHJpbmcuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBkZWNvZGUoc3RyKSB7XG4gIHZhciBkZWNvZGVkID0gMDtcblxuICBmb3IgKGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVjb2RlZCA9IGRlY29kZWQgKiBsZW5ndGggKyBtYXBbc3RyLmNoYXJBdChpKV07XG4gIH1cblxuICByZXR1cm4gZGVjb2RlZDtcbn1cblxuLyoqXG4gKiBZZWFzdDogQSB0aW55IGdyb3dpbmcgaWQgZ2VuZXJhdG9yLlxuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9IEEgdW5pcXVlIGlkLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24geWVhc3QoKSB7XG4gIHZhciBub3cgPSBlbmNvZGUoK25ldyBEYXRlKCkpO1xuXG4gIGlmIChub3cgIT09IHByZXYpIHJldHVybiBzZWVkID0gMCwgcHJldiA9IG5vdztcbiAgcmV0dXJuIG5vdyArJy4nKyBlbmNvZGUoc2VlZCsrKTtcbn1cblxuLy9cbi8vIE1hcCBlYWNoIGNoYXJhY3RlciB0byBpdHMgaW5kZXguXG4vL1xuZm9yICg7IGkgPCBsZW5ndGg7IGkrKykgbWFwW2FscGhhYmV0W2ldXSA9IGk7XG5cbi8vXG4vLyBFeHBvc2UgdGhlIGB5ZWFzdGAsIGBlbmNvZGVgIGFuZCBgZGVjb2RlYCBmdW5jdGlvbnMuXG4vL1xueWVhc3QuZW5jb2RlID0gZW5jb2RlO1xueWVhc3QuZGVjb2RlID0gZGVjb2RlO1xubW9kdWxlLmV4cG9ydHMgPSB5ZWFzdDtcbiIsIi8qIGdsb2JhbCBCbG9iIEZpbGUgKi9cblxuLypcbiAqIE1vZHVsZSByZXF1aXJlbWVudHMuXG4gKi9cblxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgd2l0aE5hdGl2ZUJsb2IgPSB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIHRvU3RyaW5nLmNhbGwoQmxvYikgPT09ICdbb2JqZWN0IEJsb2JDb25zdHJ1Y3Rvcl0nO1xudmFyIHdpdGhOYXRpdmVGaWxlID0gdHlwZW9mIEZpbGUgPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBGaWxlICE9PSAndW5kZWZpbmVkJyAmJiB0b1N0cmluZy5jYWxsKEZpbGUpID09PSAnW29iamVjdCBGaWxlQ29uc3RydWN0b3JdJztcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc0JpbmFyeTtcblxuLyoqXG4gKiBDaGVja3MgZm9yIGJpbmFyeSBkYXRhLlxuICpcbiAqIFN1cHBvcnRzIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEJsb2IgYW5kIEZpbGUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFueXRoaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGhhc0JpbmFyeSAob2JqKSB7XG4gIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGhhc0JpbmFyeShvYmpbaV0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoKHR5cGVvZiBCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgQnVmZmVyLmlzQnVmZmVyICYmIEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB8fFxuICAgICh0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8XG4gICAgKHdpdGhOYXRpdmVCbG9iICYmIG9iaiBpbnN0YW5jZW9mIEJsb2IpIHx8XG4gICAgKHdpdGhOYXRpdmVGaWxlICYmIG9iaiBpbnN0YW5jZW9mIEZpbGUpXG4gICkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vQXV0b21hdHRpYy9oYXMtYmluYXJ5L3B1bGwvNFxuICBpZiAob2JqLnRvSlNPTiAmJiB0eXBlb2Ygb2JqLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJyAmJiBhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGhhc0JpbmFyeShvYmoudG9KU09OKCksIHRydWUpO1xuICB9XG5cbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpICYmIGhhc0JpbmFyeShvYmpba2V5XSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi4vdHJhbnNwb3J0Jyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG52YXIgeWVhc3QgPSByZXF1aXJlKCd5ZWFzdCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBQb2xsaW5nO1xuXG4vKipcbiAqIElzIFhIUjIgc3VwcG9ydGVkP1xuICovXG5cbnZhciBoYXNYSFIyID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3Qtc3NsJyk7XG4gIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoeyB4ZG9tYWluOiBmYWxzZSB9KTtcbiAgcmV0dXJuIG51bGwgIT0geGhyLnJlc3BvbnNlVHlwZTtcbn0pKCk7XG5cbi8qKlxuICogUG9sbGluZyBpbnRlcmZhY2UuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIFBvbGxpbmcgKG9wdHMpIHtcbiAgdmFyIGZvcmNlQmFzZTY0ID0gKG9wdHMgJiYgb3B0cy5mb3JjZUJhc2U2NCk7XG4gIGlmICghaGFzWEhSMiB8fCBmb3JjZUJhc2U2NCkge1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuICBUcmFuc3BvcnQuY2FsbCh0aGlzLCBvcHRzKTtcbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFRyYW5zcG9ydC5cbiAqL1xuXG5pbmhlcml0KFBvbGxpbmcsIFRyYW5zcG9ydCk7XG5cbi8qKlxuICogVHJhbnNwb3J0IG5hbWUuXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUubmFtZSA9ICdwb2xsaW5nJztcblxuLyoqXG4gKiBPcGVucyB0aGUgc29ja2V0ICh0cmlnZ2VycyBwb2xsaW5nKS4gV2Ugd3JpdGUgYSBQSU5HIG1lc3NhZ2UgdG8gZGV0ZXJtaW5lXG4gKiB3aGVuIHRoZSB0cmFuc3BvcnQgaXMgb3Blbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5kb09wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucG9sbCgpO1xufTtcblxuLyoqXG4gKiBQYXVzZXMgcG9sbGluZy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB1cG9uIGJ1ZmZlcnMgYXJlIGZsdXNoZWQgYW5kIHRyYW5zcG9ydCBpcyBwYXVzZWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKG9uUGF1c2UpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdwYXVzaW5nJztcblxuICBmdW5jdGlvbiBwYXVzZSAoKSB7XG4gICAgZGVidWcoJ3BhdXNlZCcpO1xuICAgIHNlbGYucmVhZHlTdGF0ZSA9ICdwYXVzZWQnO1xuICAgIG9uUGF1c2UoKTtcbiAgfVxuXG4gIGlmICh0aGlzLnBvbGxpbmcgfHwgIXRoaXMud3JpdGFibGUpIHtcbiAgICB2YXIgdG90YWwgPSAwO1xuXG4gICAgaWYgKHRoaXMucG9sbGluZykge1xuICAgICAgZGVidWcoJ3dlIGFyZSBjdXJyZW50bHkgcG9sbGluZyAtIHdhaXRpbmcgdG8gcGF1c2UnKTtcbiAgICAgIHRvdGFsKys7XG4gICAgICB0aGlzLm9uY2UoJ3BvbGxDb21wbGV0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVidWcoJ3ByZS1wYXVzZSBwb2xsaW5nIGNvbXBsZXRlJyk7XG4gICAgICAgIC0tdG90YWwgfHwgcGF1c2UoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghdGhpcy53cml0YWJsZSkge1xuICAgICAgZGVidWcoJ3dlIGFyZSBjdXJyZW50bHkgd3JpdGluZyAtIHdhaXRpbmcgdG8gcGF1c2UnKTtcbiAgICAgIHRvdGFsKys7XG4gICAgICB0aGlzLm9uY2UoJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWJ1ZygncHJlLXBhdXNlIHdyaXRpbmcgY29tcGxldGUnKTtcbiAgICAgICAgLS10b3RhbCB8fCBwYXVzZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHBhdXNlKCk7XG4gIH1cbn07XG5cbi8qKlxuICogU3RhcnRzIHBvbGxpbmcgY3ljbGUuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5wb2xsID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygncG9sbGluZycpO1xuICB0aGlzLnBvbGxpbmcgPSB0cnVlO1xuICB0aGlzLmRvUG9sbCgpO1xuICB0aGlzLmVtaXQoJ3BvbGwnKTtcbn07XG5cbi8qKlxuICogT3ZlcmxvYWRzIG9uRGF0YSB0byBkZXRlY3QgcGF5bG9hZHMuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBkZWJ1ZygncG9sbGluZyBnb3QgZGF0YSAlcycsIGRhdGEpO1xuICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiAocGFja2V0LCBpbmRleCwgdG90YWwpIHtcbiAgICAvLyBpZiBpdHMgdGhlIGZpcnN0IG1lc3NhZ2Ugd2UgY29uc2lkZXIgdGhlIHRyYW5zcG9ydCBvcGVuXG4gICAgaWYgKCdvcGVuaW5nJyA9PT0gc2VsZi5yZWFkeVN0YXRlKSB7XG4gICAgICBzZWxmLm9uT3BlbigpO1xuICAgIH1cblxuICAgIC8vIGlmIGl0cyBhIGNsb3NlIHBhY2tldCwgd2UgY2xvc2UgdGhlIG9uZ29pbmcgcmVxdWVzdHNcbiAgICBpZiAoJ2Nsb3NlJyA9PT0gcGFja2V0LnR5cGUpIHtcbiAgICAgIHNlbGYub25DbG9zZSgpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIG90aGVyd2lzZSBieXBhc3Mgb25EYXRhIGFuZCBoYW5kbGUgdGhlIG1lc3NhZ2VcbiAgICBzZWxmLm9uUGFja2V0KHBhY2tldCk7XG4gIH07XG5cbiAgLy8gZGVjb2RlIHBheWxvYWRcbiAgcGFyc2VyLmRlY29kZVBheWxvYWQoZGF0YSwgdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSwgY2FsbGJhY2spO1xuXG4gIC8vIGlmIGFuIGV2ZW50IGRpZCBub3QgdHJpZ2dlciBjbG9zaW5nXG4gIGlmICgnY2xvc2VkJyAhPT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgLy8gaWYgd2UgZ290IGRhdGEgd2UncmUgbm90IHBvbGxpbmdcbiAgICB0aGlzLnBvbGxpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ3BvbGxDb21wbGV0ZScpO1xuXG4gICAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICB0aGlzLnBvbGwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWcoJ2lnbm9yaW5nIHBvbGwgLSB0cmFuc3BvcnQgc3RhdGUgXCIlc1wiJywgdGhpcy5yZWFkeVN0YXRlKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRm9yIHBvbGxpbmcsIHNlbmQgYSBjbG9zZSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIGNsb3NlICgpIHtcbiAgICBkZWJ1Zygnd3JpdGluZyBjbG9zZSBwYWNrZXQnKTtcbiAgICBzZWxmLndyaXRlKFt7IHR5cGU6ICdjbG9zZScgfV0pO1xuICB9XG5cbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ3RyYW5zcG9ydCBvcGVuIC0gY2xvc2luZycpO1xuICAgIGNsb3NlKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gaW4gY2FzZSB3ZSdyZSB0cnlpbmcgdG8gY2xvc2Ugd2hpbGVcbiAgICAvLyBoYW5kc2hha2luZyBpcyBpbiBwcm9ncmVzcyAoR0gtMTY0KVxuICAgIGRlYnVnKCd0cmFuc3BvcnQgbm90IG9wZW4gLSBkZWZlcnJpbmcgY2xvc2UnKTtcbiAgICB0aGlzLm9uY2UoJ29wZW4nLCBjbG9zZSk7XG4gIH1cbn07XG5cbi8qKlxuICogV3JpdGVzIGEgcGFja2V0cyBwYXlsb2FkLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgcGFja2V0c1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZHJhaW4gY2FsbGJhY2tcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKHBhY2tldHMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG4gIHZhciBjYWxsYmFja2ZuID0gZnVuY3Rpb24gKCkge1xuICAgIHNlbGYud3JpdGFibGUgPSB0cnVlO1xuICAgIHNlbGYuZW1pdCgnZHJhaW4nKTtcbiAgfTtcblxuICBwYXJzZXIuZW5jb2RlUGF5bG9hZChwYWNrZXRzLCB0aGlzLnN1cHBvcnRzQmluYXJ5LCBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHNlbGYuZG9Xcml0ZShkYXRhLCBjYWxsYmFja2ZuKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlcyB1cmkgZm9yIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUudXJpID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IHt9O1xuICB2YXIgc2NoZW1hID0gdGhpcy5zZWN1cmUgPyAnaHR0cHMnIDogJ2h0dHAnO1xuICB2YXIgcG9ydCA9ICcnO1xuXG4gIC8vIGNhY2hlIGJ1c3RpbmcgaXMgZm9yY2VkXG4gIGlmIChmYWxzZSAhPT0gdGhpcy50aW1lc3RhbXBSZXF1ZXN0cykge1xuICAgIHF1ZXJ5W3RoaXMudGltZXN0YW1wUGFyYW1dID0geWVhc3QoKTtcbiAgfVxuXG4gIGlmICghdGhpcy5zdXBwb3J0c0JpbmFyeSAmJiAhcXVlcnkuc2lkKSB7XG4gICAgcXVlcnkuYjY0ID0gMTtcbiAgfVxuXG4gIHF1ZXJ5ID0gcGFyc2Vxcy5lbmNvZGUocXVlcnkpO1xuXG4gIC8vIGF2b2lkIHBvcnQgaWYgZGVmYXVsdCBmb3Igc2NoZW1hXG4gIGlmICh0aGlzLnBvcnQgJiYgKCgnaHR0cHMnID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMucG9ydCkgIT09IDQ0MykgfHxcbiAgICAgKCdodHRwJyA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLnBvcnQpICE9PSA4MCkpKSB7XG4gICAgcG9ydCA9ICc6JyArIHRoaXMucG9ydDtcbiAgfVxuXG4gIC8vIHByZXBlbmQgPyB0byBxdWVyeVxuICBpZiAocXVlcnkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSAnPycgKyBxdWVyeTtcbiAgfVxuXG4gIHZhciBpcHY2ID0gdGhpcy5ob3N0bmFtZS5pbmRleE9mKCc6JykgIT09IC0xO1xuICByZXR1cm4gc2NoZW1hICsgJzovLycgKyAoaXB2NiA/ICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScgOiB0aGlzLmhvc3RuYW1lKSArIHBvcnQgKyB0aGlzLnBhdGggKyBxdWVyeTtcbn07XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXNcbiAqL1xuXG52YXIgWE1MSHR0cFJlcXVlc3QgPSByZXF1aXJlKCd4bWxodHRwcmVxdWVzdC1zc2wnKTtcbnZhciBYSFIgPSByZXF1aXJlKCcuL3BvbGxpbmcteGhyJyk7XG52YXIgSlNPTlAgPSByZXF1aXJlKCcuL3BvbGxpbmctanNvbnAnKTtcbnZhciB3ZWJzb2NrZXQgPSByZXF1aXJlKCcuL3dlYnNvY2tldCcpO1xuXG4vKipcbiAqIEV4cG9ydCB0cmFuc3BvcnRzLlxuICovXG5cbmV4cG9ydHMucG9sbGluZyA9IHBvbGxpbmc7XG5leHBvcnRzLndlYnNvY2tldCA9IHdlYnNvY2tldDtcblxuLyoqXG4gKiBQb2xsaW5nIHRyYW5zcG9ydCBwb2x5bW9ycGhpYyBjb25zdHJ1Y3Rvci5cbiAqIERlY2lkZXMgb24geGhyIHZzIGpzb25wIGJhc2VkIG9uIGZlYXR1cmUgZGV0ZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBvbGxpbmcgKG9wdHMpIHtcbiAgdmFyIHhocjtcbiAgdmFyIHhkID0gZmFsc2U7XG4gIHZhciB4cyA9IGZhbHNlO1xuICB2YXIganNvbnAgPSBmYWxzZSAhPT0gb3B0cy5qc29ucDtcblxuICBpZiAoZ2xvYmFsLmxvY2F0aW9uKSB7XG4gICAgdmFyIGlzU1NMID0gJ2h0dHBzOicgPT09IGxvY2F0aW9uLnByb3RvY29sO1xuICAgIHZhciBwb3J0ID0gbG9jYXRpb24ucG9ydDtcblxuICAgIC8vIHNvbWUgdXNlciBhZ2VudHMgaGF2ZSBlbXB0eSBgbG9jYXRpb24ucG9ydGBcbiAgICBpZiAoIXBvcnQpIHtcbiAgICAgIHBvcnQgPSBpc1NTTCA/IDQ0MyA6IDgwO1xuICAgIH1cblxuICAgIHhkID0gb3B0cy5ob3N0bmFtZSAhPT0gbG9jYXRpb24uaG9zdG5hbWUgfHwgcG9ydCAhPT0gb3B0cy5wb3J0O1xuICAgIHhzID0gb3B0cy5zZWN1cmUgIT09IGlzU1NMO1xuICB9XG5cbiAgb3B0cy54ZG9tYWluID0geGQ7XG4gIG9wdHMueHNjaGVtZSA9IHhzO1xuICB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3Qob3B0cyk7XG5cbiAgaWYgKCdvcGVuJyBpbiB4aHIgJiYgIW9wdHMuZm9yY2VKU09OUCkge1xuICAgIHJldHVybiBuZXcgWEhSKG9wdHMpO1xuICB9IGVsc2Uge1xuICAgIGlmICghanNvbnApIHRocm93IG5ldyBFcnJvcignSlNPTlAgZGlzYWJsZWQnKTtcbiAgICByZXR1cm4gbmV3IEpTT05QKG9wdHMpO1xuICB9XG59XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgZWlvID0gcmVxdWlyZSgnZW5naW5lLmlvLWNsaWVudCcpO1xudmFyIFNvY2tldCA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnc29ja2V0LmlvLXBhcnNlcicpO1xudmFyIG9uID0gcmVxdWlyZSgnLi9vbicpO1xudmFyIGJpbmQgPSByZXF1aXJlKCdjb21wb25lbnQtYmluZCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudDptYW5hZ2VyJyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJ2luZGV4b2YnKTtcbnZhciBCYWNrb2ZmID0gcmVxdWlyZSgnYmFja28yJyk7XG5cbi8qKlxuICogSUU2KyBoYXNPd25Qcm9wZXJ0eVxuICovXG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBNYW5hZ2VyO1xuXG4vKipcbiAqIGBNYW5hZ2VyYCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZW5naW5lIGluc3RhbmNlIG9yIGVuZ2luZSB1cmkvb3B0c1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gTWFuYWdlciAodXJpLCBvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBNYW5hZ2VyKSkgcmV0dXJuIG5ldyBNYW5hZ2VyKHVyaSwgb3B0cyk7XG4gIGlmICh1cmkgJiYgKCdvYmplY3QnID09PSB0eXBlb2YgdXJpKSkge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gdW5kZWZpbmVkO1xuICB9XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gIG9wdHMucGF0aCA9IG9wdHMucGF0aCB8fCAnL3NvY2tldC5pbyc7XG4gIHRoaXMubnNwcyA9IHt9O1xuICB0aGlzLnN1YnMgPSBbXTtcbiAgdGhpcy5vcHRzID0gb3B0cztcbiAgdGhpcy5yZWNvbm5lY3Rpb24ob3B0cy5yZWNvbm5lY3Rpb24gIT09IGZhbHNlKTtcbiAgdGhpcy5yZWNvbm5lY3Rpb25BdHRlbXB0cyhvcHRzLnJlY29ubmVjdGlvbkF0dGVtcHRzIHx8IEluZmluaXR5KTtcbiAgdGhpcy5yZWNvbm5lY3Rpb25EZWxheShvcHRzLnJlY29ubmVjdGlvbkRlbGF5IHx8IDEwMDApO1xuICB0aGlzLnJlY29ubmVjdGlvbkRlbGF5TWF4KG9wdHMucmVjb25uZWN0aW9uRGVsYXlNYXggfHwgNTAwMCk7XG4gIHRoaXMucmFuZG9taXphdGlvbkZhY3RvcihvcHRzLnJhbmRvbWl6YXRpb25GYWN0b3IgfHwgMC41KTtcbiAgdGhpcy5iYWNrb2ZmID0gbmV3IEJhY2tvZmYoe1xuICAgIG1pbjogdGhpcy5yZWNvbm5lY3Rpb25EZWxheSgpLFxuICAgIG1heDogdGhpcy5yZWNvbm5lY3Rpb25EZWxheU1heCgpLFxuICAgIGppdHRlcjogdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKClcbiAgfSk7XG4gIHRoaXMudGltZW91dChudWxsID09IG9wdHMudGltZW91dCA/IDIwMDAwIDogb3B0cy50aW1lb3V0KTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIHRoaXMudXJpID0gdXJpO1xuICB0aGlzLmNvbm5lY3RpbmcgPSBbXTtcbiAgdGhpcy5sYXN0UGluZyA9IG51bGw7XG4gIHRoaXMuZW5jb2RpbmcgPSBmYWxzZTtcbiAgdGhpcy5wYWNrZXRCdWZmZXIgPSBbXTtcbiAgdmFyIF9wYXJzZXIgPSBvcHRzLnBhcnNlciB8fCBwYXJzZXI7XG4gIHRoaXMuZW5jb2RlciA9IG5ldyBfcGFyc2VyLkVuY29kZXIoKTtcbiAgdGhpcy5kZWNvZGVyID0gbmV3IF9wYXJzZXIuRGVjb2RlcigpO1xuICB0aGlzLmF1dG9Db25uZWN0ID0gb3B0cy5hdXRvQ29ubmVjdCAhPT0gZmFsc2U7XG4gIGlmICh0aGlzLmF1dG9Db25uZWN0KSB0aGlzLm9wZW4oKTtcbn1cblxuLyoqXG4gKiBQcm9wYWdhdGUgZ2l2ZW4gZXZlbnQgdG8gc29ja2V0cyBhbmQgZW1pdCBvbiBgdGhpc2BcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5lbWl0QWxsID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgZm9yICh2YXIgbnNwIGluIHRoaXMubnNwcykge1xuICAgIGlmIChoYXMuY2FsbCh0aGlzLm5zcHMsIG5zcCkpIHtcbiAgICAgIHRoaXMubnNwc1tuc3BdLmVtaXQuYXBwbHkodGhpcy5uc3BzW25zcF0sIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFVwZGF0ZSBgc29ja2V0LmlkYCBvZiBhbGwgc29ja2V0c1xuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnVwZGF0ZVNvY2tldElkcyA9IGZ1bmN0aW9uICgpIHtcbiAgZm9yICh2YXIgbnNwIGluIHRoaXMubnNwcykge1xuICAgIGlmIChoYXMuY2FsbCh0aGlzLm5zcHMsIG5zcCkpIHtcbiAgICAgIHRoaXMubnNwc1tuc3BdLmlkID0gdGhpcy5nZW5lcmF0ZUlkKG5zcCk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIGdlbmVyYXRlIGBzb2NrZXQuaWRgIGZvciB0aGUgZ2l2ZW4gYG5zcGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbnNwXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5nZW5lcmF0ZUlkID0gZnVuY3Rpb24gKG5zcCkge1xuICByZXR1cm4gKG5zcCA9PT0gJy8nID8gJycgOiAobnNwICsgJyMnKSkgKyB0aGlzLmVuZ2luZS5pZDtcbn07XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKE1hbmFnZXIucHJvdG90eXBlKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBgcmVjb25uZWN0aW9uYCBjb25maWcuXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSB0cnVlL2ZhbHNlIGlmIGl0IHNob3VsZCBhdXRvbWF0aWNhbGx5IHJlY29ubmVjdFxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb24gPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb247XG4gIHRoaXMuX3JlY29ubmVjdGlvbiA9ICEhdjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIHJlY29ubmVjdGlvbiBhdHRlbXB0cyBjb25maWcuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1heCByZWNvbm5lY3Rpb24gYXR0ZW1wdHMgYmVmb3JlIGdpdmluZyB1cFxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25BdHRlbXB0cyA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzO1xuICB0aGlzLl9yZWNvbm5lY3Rpb25BdHRlbXB0cyA9IHY7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBkZWxheSBiZXR3ZWVuIHJlY29ubmVjdGlvbnMuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5XG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbkRlbGF5ID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uRGVsYXk7XG4gIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5ID0gdjtcbiAgdGhpcy5iYWNrb2ZmICYmIHRoaXMuYmFja29mZi5zZXRNaW4odik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuTWFuYWdlci5wcm90b3R5cGUucmFuZG9taXphdGlvbkZhY3RvciA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JhbmRvbWl6YXRpb25GYWN0b3I7XG4gIHRoaXMuX3JhbmRvbWl6YXRpb25GYWN0b3IgPSB2O1xuICB0aGlzLmJhY2tvZmYgJiYgdGhpcy5iYWNrb2ZmLnNldEppdHRlcih2KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIG1heGltdW0gZGVsYXkgYmV0d2VlbiByZWNvbm5lY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWxheVxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25EZWxheU1heCA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4O1xuICB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheU1heCA9IHY7XG4gIHRoaXMuYmFja29mZiAmJiB0aGlzLmJhY2tvZmYuc2V0TWF4KHYpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY29ubmVjdGlvbiB0aW1lb3V0LiBgZmFsc2VgIHRvIGRpc2FibGVcbiAqXG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnRpbWVvdXQgPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl90aW1lb3V0O1xuICB0aGlzLl90aW1lb3V0ID0gdjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFN0YXJ0cyB0cnlpbmcgdG8gcmVjb25uZWN0IGlmIHJlY29ubmVjdGlvbiBpcyBlbmFibGVkIGFuZCB3ZSBoYXZlIG5vdFxuICogc3RhcnRlZCByZWNvbm5lY3RpbmcgeWV0XG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUubWF5YmVSZWNvbm5lY3RPbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIC8vIE9ubHkgdHJ5IHRvIHJlY29ubmVjdCBpZiBpdCdzIHRoZSBmaXJzdCB0aW1lIHdlJ3JlIGNvbm5lY3RpbmdcbiAgaWYgKCF0aGlzLnJlY29ubmVjdGluZyAmJiB0aGlzLl9yZWNvbm5lY3Rpb24gJiYgdGhpcy5iYWNrb2ZmLmF0dGVtcHRzID09PSAwKSB7XG4gICAgLy8ga2VlcHMgcmVjb25uZWN0aW9uIGZyb20gZmlyaW5nIHR3aWNlIGZvciB0aGUgc2FtZSByZWNvbm5lY3Rpb24gbG9vcFxuICAgIHRoaXMucmVjb25uZWN0KCk7XG4gIH1cbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY3VycmVudCB0cmFuc3BvcnQgYHNvY2tldGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9uYWwsIGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9wZW4gPVxuTWFuYWdlci5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIChmbiwgb3B0cykge1xuICBkZWJ1ZygncmVhZHlTdGF0ZSAlcycsIHRoaXMucmVhZHlTdGF0ZSk7XG4gIGlmICh+dGhpcy5yZWFkeVN0YXRlLmluZGV4T2YoJ29wZW4nKSkgcmV0dXJuIHRoaXM7XG5cbiAgZGVidWcoJ29wZW5pbmcgJXMnLCB0aGlzLnVyaSk7XG4gIHRoaXMuZW5naW5lID0gZWlvKHRoaXMudXJpLCB0aGlzLm9wdHMpO1xuICB2YXIgc29ja2V0ID0gdGhpcy5lbmdpbmU7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW5pbmcnO1xuICB0aGlzLnNraXBSZWNvbm5lY3QgPSBmYWxzZTtcblxuICAvLyBlbWl0IGBvcGVuYFxuICB2YXIgb3BlblN1YiA9IG9uKHNvY2tldCwgJ29wZW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbm9wZW4oKTtcbiAgICBmbiAmJiBmbigpO1xuICB9KTtcblxuICAvLyBlbWl0IGBjb25uZWN0X2Vycm9yYFxuICB2YXIgZXJyb3JTdWIgPSBvbihzb2NrZXQsICdlcnJvcicsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGVidWcoJ2Nvbm5lY3RfZXJyb3InKTtcbiAgICBzZWxmLmNsZWFudXAoKTtcbiAgICBzZWxmLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgICBzZWxmLmVtaXRBbGwoJ2Nvbm5lY3RfZXJyb3InLCBkYXRhKTtcbiAgICBpZiAoZm4pIHtcbiAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ0Nvbm5lY3Rpb24gZXJyb3InKTtcbiAgICAgIGVyci5kYXRhID0gZGF0YTtcbiAgICAgIGZuKGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9ubHkgZG8gdGhpcyBpZiB0aGVyZSBpcyBubyBmbiB0byBoYW5kbGUgdGhlIGVycm9yXG4gICAgICBzZWxmLm1heWJlUmVjb25uZWN0T25PcGVuKCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBlbWl0IGBjb25uZWN0X3RpbWVvdXRgXG4gIGlmIChmYWxzZSAhPT0gdGhpcy5fdGltZW91dCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5fdGltZW91dDtcbiAgICBkZWJ1ZygnY29ubmVjdCBhdHRlbXB0IHdpbGwgdGltZW91dCBhZnRlciAlZCcsIHRpbWVvdXQpO1xuXG4gICAgLy8gc2V0IHRpbWVyXG4gICAgdmFyIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBkZWJ1ZygnY29ubmVjdCBhdHRlbXB0IHRpbWVkIG91dCBhZnRlciAlZCcsIHRpbWVvdXQpO1xuICAgICAgb3BlblN1Yi5kZXN0cm95KCk7XG4gICAgICBzb2NrZXQuY2xvc2UoKTtcbiAgICAgIHNvY2tldC5lbWl0KCdlcnJvcicsICd0aW1lb3V0Jyk7XG4gICAgICBzZWxmLmVtaXRBbGwoJ2Nvbm5lY3RfdGltZW91dCcsIHRpbWVvdXQpO1xuICAgIH0sIHRpbWVvdXQpO1xuXG4gICAgdGhpcy5zdWJzLnB1c2goe1xuICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdGhpcy5zdWJzLnB1c2gob3BlblN1Yik7XG4gIHRoaXMuc3Vicy5wdXNoKGVycm9yU3ViKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IG9wZW4uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1Zygnb3BlbicpO1xuXG4gIC8vIGNsZWFyIG9sZCBzdWJzXG4gIHRoaXMuY2xlYW51cCgpO1xuXG4gIC8vIG1hcmsgYXMgb3BlblxuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIHRoaXMuZW1pdCgnb3BlbicpO1xuXG4gIC8vIGFkZCBuZXcgc3Vic1xuICB2YXIgc29ja2V0ID0gdGhpcy5lbmdpbmU7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2RhdGEnLCBiaW5kKHRoaXMsICdvbmRhdGEnKSkpO1xuICB0aGlzLnN1YnMucHVzaChvbihzb2NrZXQsICdwaW5nJywgYmluZCh0aGlzLCAnb25waW5nJykpKTtcbiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAncG9uZycsIGJpbmQodGhpcywgJ29ucG9uZycpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2Vycm9yJywgYmluZCh0aGlzLCAnb25lcnJvcicpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2Nsb3NlJywgYmluZCh0aGlzLCAnb25jbG9zZScpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHRoaXMuZGVjb2RlciwgJ2RlY29kZWQnLCBiaW5kKHRoaXMsICdvbmRlY29kZWQnKSkpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHBpbmcuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25waW5nID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmxhc3RQaW5nID0gbmV3IERhdGUoKTtcbiAgdGhpcy5lbWl0QWxsKCdwaW5nJyk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9ucG9uZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0QWxsKCdwb25nJywgbmV3IERhdGUoKSAtIHRoaXMubGFzdFBpbmcpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBkYXRhLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uZGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZGVjb2Rlci5hZGQoZGF0YSk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIHBhcnNlciBmdWxseSBkZWNvZGVzIGEgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uZGVjb2RlZCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzb2NrZXQgZXJyb3IuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgZGVidWcoJ2Vycm9yJywgZXJyKTtcbiAgdGhpcy5lbWl0QWxsKCdlcnJvcicsIGVycik7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgc29ja2V0IGZvciB0aGUgZ2l2ZW4gYG5zcGAuXG4gKlxuICogQHJldHVybiB7U29ja2V0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5zb2NrZXQgPSBmdW5jdGlvbiAobnNwLCBvcHRzKSB7XG4gIHZhciBzb2NrZXQgPSB0aGlzLm5zcHNbbnNwXTtcbiAgaWYgKCFzb2NrZXQpIHtcbiAgICBzb2NrZXQgPSBuZXcgU29ja2V0KHRoaXMsIG5zcCwgb3B0cyk7XG4gICAgdGhpcy5uc3BzW25zcF0gPSBzb2NrZXQ7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNvY2tldC5vbignY29ubmVjdGluZycsIG9uQ29ubmVjdGluZyk7XG4gICAgc29ja2V0Lm9uKCdjb25uZWN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgc29ja2V0LmlkID0gc2VsZi5nZW5lcmF0ZUlkKG5zcCk7XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5hdXRvQ29ubmVjdCkge1xuICAgICAgLy8gbWFudWFsbHkgY2FsbCBoZXJlIHNpbmNlIGNvbm5lY3RpbmcgZXZlbnQgaXMgZmlyZWQgYmVmb3JlIGxpc3RlbmluZ1xuICAgICAgb25Db25uZWN0aW5nKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Db25uZWN0aW5nICgpIHtcbiAgICBpZiAoIX5pbmRleE9mKHNlbGYuY29ubmVjdGluZywgc29ja2V0KSkge1xuICAgICAgc2VsZi5jb25uZWN0aW5nLnB1c2goc29ja2V0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc29ja2V0O1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHNvY2tldCBjbG9zZS5cbiAqXG4gKiBAcGFyYW0ge1NvY2tldH0gc29ja2V0XG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIChzb2NrZXQpIHtcbiAgdmFyIGluZGV4ID0gaW5kZXhPZih0aGlzLmNvbm5lY3RpbmcsIHNvY2tldCk7XG4gIGlmICh+aW5kZXgpIHRoaXMuY29ubmVjdGluZy5zcGxpY2UoaW5kZXgsIDEpO1xuICBpZiAodGhpcy5jb25uZWN0aW5nLmxlbmd0aCkgcmV0dXJuO1xuXG4gIHRoaXMuY2xvc2UoKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgZGVidWcoJ3dyaXRpbmcgcGFja2V0ICVqJywgcGFja2V0KTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZiAocGFja2V0LnF1ZXJ5ICYmIHBhY2tldC50eXBlID09PSAwKSBwYWNrZXQubnNwICs9ICc/JyArIHBhY2tldC5xdWVyeTtcblxuICBpZiAoIXNlbGYuZW5jb2RpbmcpIHtcbiAgICAvLyBlbmNvZGUsIHRoZW4gd3JpdGUgdG8gZW5naW5lIHdpdGggcmVzdWx0XG4gICAgc2VsZi5lbmNvZGluZyA9IHRydWU7XG4gICAgdGhpcy5lbmNvZGVyLmVuY29kZShwYWNrZXQsIGZ1bmN0aW9uIChlbmNvZGVkUGFja2V0cykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNvZGVkUGFja2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZWxmLmVuZ2luZS53cml0ZShlbmNvZGVkUGFja2V0c1tpXSwgcGFja2V0Lm9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgc2VsZi5lbmNvZGluZyA9IGZhbHNlO1xuICAgICAgc2VsZi5wcm9jZXNzUGFja2V0UXVldWUoKTtcbiAgICB9KTtcbiAgfSBlbHNlIHsgLy8gYWRkIHBhY2tldCB0byB0aGUgcXVldWVcbiAgICBzZWxmLnBhY2tldEJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gIH1cbn07XG5cbi8qKlxuICogSWYgcGFja2V0IGJ1ZmZlciBpcyBub24tZW1wdHksIGJlZ2lucyBlbmNvZGluZyB0aGVcbiAqIG5leHQgcGFja2V0IGluIGxpbmUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucHJvY2Vzc1BhY2tldFF1ZXVlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5wYWNrZXRCdWZmZXIubGVuZ3RoID4gMCAmJiAhdGhpcy5lbmNvZGluZykge1xuICAgIHZhciBwYWNrID0gdGhpcy5wYWNrZXRCdWZmZXIuc2hpZnQoKTtcbiAgICB0aGlzLnBhY2tldChwYWNrKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCB0cmFuc3BvcnQgc3Vic2NyaXB0aW9ucyBhbmQgcGFja2V0IGJ1ZmZlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnY2xlYW51cCcpO1xuXG4gIHZhciBzdWJzTGVuZ3RoID0gdGhpcy5zdWJzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJzTGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc3ViID0gdGhpcy5zdWJzLnNoaWZ0KCk7XG4gICAgc3ViLmRlc3Ryb3koKTtcbiAgfVxuXG4gIHRoaXMucGFja2V0QnVmZmVyID0gW107XG4gIHRoaXMuZW5jb2RpbmcgPSBmYWxzZTtcbiAgdGhpcy5sYXN0UGluZyA9IG51bGw7XG5cbiAgdGhpcy5kZWNvZGVyLmRlc3Ryb3koKTtcbn07XG5cbi8qKlxuICogQ2xvc2UgdGhlIGN1cnJlbnQgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmNsb3NlID1cbk1hbmFnZXIucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdkaXNjb25uZWN0Jyk7XG4gIHRoaXMuc2tpcFJlY29ubmVjdCA9IHRydWU7XG4gIHRoaXMucmVjb25uZWN0aW5nID0gZmFsc2U7XG4gIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIC8vIGBvbmNsb3NlYCB3aWxsIG5vdCBmaXJlIGJlY2F1c2VcbiAgICAvLyBhbiBvcGVuIGV2ZW50IG5ldmVyIGhhcHBlbmVkXG4gICAgdGhpcy5jbGVhbnVwKCk7XG4gIH1cbiAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICBpZiAodGhpcy5lbmdpbmUpIHRoaXMuZW5naW5lLmNsb3NlKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVuZ2luZSBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbmNsb3NlID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICBkZWJ1Zygnb25jbG9zZScpO1xuXG4gIHRoaXMuY2xlYW51cCgpO1xuICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIHRoaXMuZW1pdCgnY2xvc2UnLCByZWFzb24pO1xuXG4gIGlmICh0aGlzLl9yZWNvbm5lY3Rpb24gJiYgIXRoaXMuc2tpcFJlY29ubmVjdCkge1xuICAgIHRoaXMucmVjb25uZWN0KCk7XG4gIH1cbn07XG5cbi8qKlxuICogQXR0ZW1wdCBhIHJlY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnJlY29ubmVjdGluZyB8fCB0aGlzLnNraXBSZWNvbm5lY3QpIHJldHVybiB0aGlzO1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAodGhpcy5iYWNrb2ZmLmF0dGVtcHRzID49IHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzKSB7XG4gICAgZGVidWcoJ3JlY29ubmVjdCBmYWlsZWQnKTtcbiAgICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgICB0aGlzLmVtaXRBbGwoJ3JlY29ubmVjdF9mYWlsZWQnKTtcbiAgICB0aGlzLnJlY29ubmVjdGluZyA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHZhciBkZWxheSA9IHRoaXMuYmFja29mZi5kdXJhdGlvbigpO1xuICAgIGRlYnVnKCd3aWxsIHdhaXQgJWRtcyBiZWZvcmUgcmVjb25uZWN0IGF0dGVtcHQnLCBkZWxheSk7XG5cbiAgICB0aGlzLnJlY29ubmVjdGluZyA9IHRydWU7XG4gICAgdmFyIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5za2lwUmVjb25uZWN0KSByZXR1cm47XG5cbiAgICAgIGRlYnVnKCdhdHRlbXB0aW5nIHJlY29ubmVjdCcpO1xuICAgICAgc2VsZi5lbWl0QWxsKCdyZWNvbm5lY3RfYXR0ZW1wdCcsIHNlbGYuYmFja29mZi5hdHRlbXB0cyk7XG4gICAgICBzZWxmLmVtaXRBbGwoJ3JlY29ubmVjdGluZycsIHNlbGYuYmFja29mZi5hdHRlbXB0cyk7XG5cbiAgICAgIC8vIGNoZWNrIGFnYWluIGZvciB0aGUgY2FzZSBzb2NrZXQgY2xvc2VkIGluIGFib3ZlIGV2ZW50c1xuICAgICAgaWYgKHNlbGYuc2tpcFJlY29ubmVjdCkgcmV0dXJuO1xuXG4gICAgICBzZWxmLm9wZW4oZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgZGVidWcoJ3JlY29ubmVjdCBhdHRlbXB0IGVycm9yJyk7XG4gICAgICAgICAgc2VsZi5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICBzZWxmLnJlY29ubmVjdCgpO1xuICAgICAgICAgIHNlbGYuZW1pdEFsbCgncmVjb25uZWN0X2Vycm9yJywgZXJyLmRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlYnVnKCdyZWNvbm5lY3Qgc3VjY2VzcycpO1xuICAgICAgICAgIHNlbGYub25yZWNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgZGVsYXkpO1xuXG4gICAgdGhpcy5zdWJzLnB1c2goe1xuICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHN1Y2Nlc3NmdWwgcmVjb25uZWN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9ucmVjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXR0ZW1wdCA9IHRoaXMuYmFja29mZi5hdHRlbXB0cztcbiAgdGhpcy5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gIHRoaXMudXBkYXRlU29ja2V0SWRzKCk7XG4gIHRoaXMuZW1pdEFsbCgncmVjb25uZWN0JywgYXR0ZW1wdCk7XG59O1xuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmO1xuXG52YXIgd2l0aE5hdGl2ZUJ1ZmZlciA9IHR5cGVvZiBnbG9iYWwuQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBnbG9iYWwuQnVmZmVyLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nO1xudmFyIHdpdGhOYXRpdmVBcnJheUJ1ZmZlciA9IHR5cGVvZiBnbG9iYWwuQXJyYXlCdWZmZXIgPT09ICdmdW5jdGlvbic7XG5cbnZhciBpc1ZpZXcgPSAoZnVuY3Rpb24gKCkge1xuICBpZiAod2l0aE5hdGl2ZUFycmF5QnVmZmVyICYmIHR5cGVvZiBnbG9iYWwuQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGdsb2JhbC5BcnJheUJ1ZmZlci5pc1ZpZXc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iai5idWZmZXIgaW5zdGFuY2VvZiBnbG9iYWwuQXJyYXlCdWZmZXI7IH07XG4gIH1cbn0pKCk7XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIG9iaiBpcyBhIGJ1ZmZlciBvciBhbiBhcnJheWJ1ZmZlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBpc0J1ZihvYmopIHtcbiAgcmV0dXJuICh3aXRoTmF0aXZlQnVmZmVyICYmIGdsb2JhbC5CdWZmZXIuaXNCdWZmZXIob2JqKSkgfHxcbiAgICAgICAgICAod2l0aE5hdGl2ZUFycmF5QnVmZmVyICYmIChvYmogaW5zdGFuY2VvZiBnbG9iYWwuQXJyYXlCdWZmZXIgfHwgaXNWaWV3KG9iaikpKTtcbn1cbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyoqXHJcbiAqIFBhcnNlcyBhbiBVUklcclxuICpcclxuICogQGF1dGhvciBTdGV2ZW4gTGV2aXRoYW4gPHN0ZXZlbmxldml0aGFuLmNvbT4gKE1JVCBsaWNlbnNlKVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG52YXIgcmUgPSAvXig/Oig/IVteOkBdKzpbXjpAXFwvXSpAKShodHRwfGh0dHBzfHdzfHdzcyk6XFwvXFwvKT8oKD86KChbXjpAXSopKD86OihbXjpAXSopKT8pP0ApPygoPzpbYS1mMC05XXswLDR9Oil7Miw3fVthLWYwLTldezAsNH18W146XFwvPyNdKikoPzo6KFxcZCopKT8pKCgoXFwvKD86W14/I10oPyFbXj8jXFwvXSpcXC5bXj8jXFwvLl0rKD86Wz8jXXwkKSkpKlxcLz8pPyhbXj8jXFwvXSopKSg/OlxcPyhbXiNdKikpPyg/OiMoLiopKT8pLztcclxuXHJcbnZhciBwYXJ0cyA9IFtcclxuICAgICdzb3VyY2UnLCAncHJvdG9jb2wnLCAnYXV0aG9yaXR5JywgJ3VzZXJJbmZvJywgJ3VzZXInLCAncGFzc3dvcmQnLCAnaG9zdCcsICdwb3J0JywgJ3JlbGF0aXZlJywgJ3BhdGgnLCAnZGlyZWN0b3J5JywgJ2ZpbGUnLCAncXVlcnknLCAnYW5jaG9yJ1xyXG5dO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZXVyaShzdHIpIHtcclxuICAgIHZhciBzcmMgPSBzdHIsXHJcbiAgICAgICAgYiA9IHN0ci5pbmRleE9mKCdbJyksXHJcbiAgICAgICAgZSA9IHN0ci5pbmRleE9mKCddJyk7XHJcblxyXG4gICAgaWYgKGIgIT0gLTEgJiYgZSAhPSAtMSkge1xyXG4gICAgICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCwgYikgKyBzdHIuc3Vic3RyaW5nKGIsIGUpLnJlcGxhY2UoLzovZywgJzsnKSArIHN0ci5zdWJzdHJpbmcoZSwgc3RyLmxlbmd0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIG0gPSByZS5leGVjKHN0ciB8fCAnJyksXHJcbiAgICAgICAgdXJpID0ge30sXHJcbiAgICAgICAgaSA9IDE0O1xyXG5cclxuICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICB1cmlbcGFydHNbaV1dID0gbVtpXSB8fCAnJztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYiAhPSAtMSAmJiBlICE9IC0xKSB7XHJcbiAgICAgICAgdXJpLnNvdXJjZSA9IHNyYztcclxuICAgICAgICB1cmkuaG9zdCA9IHVyaS5ob3N0LnN1YnN0cmluZygxLCB1cmkuaG9zdC5sZW5ndGggLSAxKS5yZXBsYWNlKC87L2csICc6Jyk7XHJcbiAgICAgICAgdXJpLmF1dGhvcml0eSA9IHVyaS5hdXRob3JpdHkucmVwbGFjZSgnWycsICcnKS5yZXBsYWNlKCddJywgJycpLnJlcGxhY2UoLzsvZywgJzonKTtcclxuICAgICAgICB1cmkuaXB2NnVyaSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHVyaTtcclxufTtcclxuIiwiZXhwb3J0IGRlZmF1bHQgcmVxdWlyZSgnc29ja2V0LmlvLWNsaWVudCcpKCk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlPYmplY3QgPSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlPYmplY3Q7IiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN5bWJvbE9ic2VydmFibGVQb255ZmlsbChyb290KSB7XG5cdHZhciByZXN1bHQ7XG5cdHZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuXHRpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGlmIChTeW1ib2wub2JzZXJ2YWJsZSkge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sLm9ic2VydmFibGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuXHRcdFx0U3ltYm9sLm9ic2VydmFibGUgPSByZXN1bHQ7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJlc3VsdCA9ICdAQG9ic2VydmFibGUnO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgIChnbG9iYWwuaG9pc3ROb25SZWFjdFN0YXRpY3MgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBcbiAgICB2YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgICAgICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgICAgIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgICAgICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgICAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICAgICAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICAgICAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gICAgICAgIG1peGluczogdHJ1ZSxcbiAgICAgICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgICAgICB0eXBlOiB0cnVlXG4gICAgfTtcbiAgICBcbiAgICB2YXIgS05PV05fU1RBVElDUyA9IHtcbiAgICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgICAgbGVuZ3RoOiB0cnVlLFxuICAgICAgICBwcm90b3R5cGU6IHRydWUsXG4gICAgICAgIGNhbGxlcjogdHJ1ZSxcbiAgICAgICAgY2FsbGVlOiB0cnVlLFxuICAgICAgICBhcmd1bWVudHM6IHRydWUsXG4gICAgICAgIGFyaXR5OiB0cnVlXG4gICAgfTtcbiAgICBcbiAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG4gICAgdmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgICB2YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gICAgdmFyIG9iamVjdFByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mICYmIGdldFByb3RvdHlwZU9mKE9iamVjdCk7XG4gICAgXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7IC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcbiAgICAgICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoIVJFQUNUX1NUQVRJQ1Nba2V5XSAmJiAhS05PV05fU1RBVElDU1trZXldICYmICghYmxhY2tsaXN0IHx8ICFibGFja2xpc3Rba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuICAgICAgICAgICAgICAgICAgICB0cnkgeyAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgIH07XG59KSkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZnVuY3Rpb24gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKGV4dHJhQXJndW1lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaCxcbiAgICAgICAgZ2V0U3RhdGUgPSBfcmVmLmdldFN0YXRlO1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmFBcmd1bWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufVxuXG52YXIgdGh1bmsgPSBjcmVhdGVUaHVua01pZGRsZXdhcmUoKTtcbnRodW5rLndpdGhFeHRyYUFyZ3VtZW50ID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSB0aHVuazsiLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdyZWR1eCdcbmltcG9ydCB7XG4gIFJFUVVFU1RfUk9PTVNfTElTVF9TVUNDRVNTLFxuICBTSE9XX0NSRUFURV9ST09NX1BBTkVMLFxuICBISURFX0NSRUFURV9ST09NX1BBTkVMLFxuICBSRVFVRVNUX1VTRVJTX0xJU1RfU1VDQ0VTUyxcbiAgUkVRVUVTVF9ST09NX0RBVEFfU1VDQ0VTUyxcbiAgU0VORF9NRVNTQUdFX1NVQ0NFU1Ncbn0gZnJvbSAnQWN0aW9ucy9pbmRleCdcblxuY29uc3QgaXNDcmVhdGVSb29tUGFuZWxPcGVuID0gKHN0YXRlID0gZmFsc2UsIGFjdGlvbikgPT4ge1xuICBzd2l0Y2goYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFNIT1dfQ1JFQVRFX1JPT01fUEFORUw6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGNhc2UgSElERV9DUkVBVEVfUk9PTV9QQU5FTDpcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGVcbiAgfVxufVxuXG5jb25zdCBjdXJyZW50VXNlckluaXRpYWxTdGF0ZSA9IHtcbiAgaWQ6ICc1YjBhNmQxOGFiMWViZDE3NDA1ODc2MjInLFxuICB1c2VybmFtZTogJ1NhcmEnXG59XG5cbi8vIEkndmUgcHV0IGN1cnJlbnRVc2VyIGluIHRoZSBzdGF0ZSBhcyBJIG1pZ2h0IGltcGxlbWVudCBhIGxvZ2luIGZlYXR1cmUgbGF0ZXIgb25cbmNvbnN0IGN1cnJlbnRVc2VyID0gKHN0YXRlID0gY3VycmVudFVzZXJJbml0aWFsU3RhdGUsIGFjdGlvbikgPT4ge1xuICBzd2l0Y2goYWN0aW9uLnR5cGUpIHtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlXG4gIH1cbn1cblxuY29uc3Qgcm9vbXNMaXN0ID0gKHN0YXRlID0gW10sIGFjdGlvbikgPT4ge1xuICBzd2l0Y2goYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFJFUVVFU1RfUk9PTVNfTElTVF9TVUNDRVNTOlxuICAgICAgcmV0dXJuIFsuLi5hY3Rpb24ucm9vbXNMaXN0XVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGVcbiAgfVxufVxuXG5jb25zdCB1c2Vyc0xpc3QgPSAoc3RhdGUgPSBbXSwgYWN0aW9uKSA9PiB7XG4gIHN3aXRjaChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgUkVRVUVTVF9VU0VSU19MSVNUX1NVQ0NFU1M6XG4gICAgICByZXR1cm4gWy4uLmFjdGlvbi51c2Vyc0xpc3RdXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZVxuICB9XG59XG5cbmNvbnN0IGN1cnJlbnRSb29tID0gKHN0YXRlID0ge30sIGFjdGlvbikgPT4ge1xuICBzd2l0Y2goYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFJFUVVFU1RfUk9PTV9EQVRBX1NVQ0NFU1M6XG4gICAgICByZXR1cm4gey4uLmFjdGlvbi5yb29tRGF0YX1cbiAgICBjYXNlIFNFTkRfTUVTU0FHRV9TVUNDRVNTOlxuICAgIFxuICAgICAgLy8gSW4gY2FzZSBubyBjdXJyZW50IHJvb20gaXMgc2VsZWN0ZWRcbiAgICAgIC8vIE5vIG5lZWQgdG8gdXBkYXRlIGFueXRoaW5nXG4gICAgICBpZihzdGF0ZS5tZXNzYWdlcyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gc3RhdGVcblxuICAgICAgLy8gVXBkYXRlIG1lc3NhZ2VzIGluIGN1cnJlbnQgcm9vbVxuICAgICAgbGV0IG5leHRTdGF0ZSA9IHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgLi4uc3RhdGUubWVzc2FnZXMsXG4gICAgICAgICAgYWN0aW9uLm1lc3NhZ2VcbiAgICAgICAgXVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV4dFN0YXRlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbWJpbmVSZWR1Y2Vycyh7XG4gIGN1cnJlbnRVc2VyLFxuICByb29tc0xpc3QsXG4gIGlzQ3JlYXRlUm9vbVBhbmVsT3BlbixcbiAgdXNlcnNMaXN0LFxuICBjdXJyZW50Um9vbVxufSkiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJkYmNlOWMzYmQyMDdlODM5ZDlhYzQwYWYwNDhmNjAyMC5wbmdcIjsiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIiNjcmVhdGUtcm9vbS1wYW5lbC1jb250YWluZXIge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgei1pbmRleDogMTAwO1xcbiAgd2lkdGg6IDEwMHZ3O1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41KTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyOyB9XFxuICAjY3JlYXRlLXJvb20tcGFuZWwtY29udGFpbmVyICNjcmVhdGUtcm9vbS1wYW5lbCB7XFxuICAgIHdpZHRoOiA2MDBweDtcXG4gICAgaGVpZ2h0OiA0MDBweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7IH1cXG4gICAgI2NyZWF0ZS1yb29tLXBhbmVsLWNvbnRhaW5lciAjY3JlYXRlLXJvb20tcGFuZWwgaW1nIHtcXG4gICAgICBmbG9hdDogcmlnaHQ7XFxuICAgICAgd2lkdGg6IDUwcHg7XFxuICAgICAgbWFyZ2luOiAxNXB4O1xcbiAgICAgIGN1cnNvcjogcG9pbnRlcjsgfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL0NyZWF0ZVJvb21QYW5lbC5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL0NyZWF0ZVJvb21QYW5lbC5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9DcmVhdGVSb29tUGFuZWwuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCAnLi9DcmVhdGVSb29tUGFuZWwuc2NzcydcbmltcG9ydCBjbG9zZSBmcm9tICcuL2Nsb3NlLnBuZydcbmltcG9ydCB7XG4gIEhJREVfQ1JFQVRFX1JPT01fUEFORUwsXG4gIHJlcXVlc3RVc2Vyc0xpc3QsXG4gIGNyZWF0ZVJvb21cbn0gZnJvbSAnQWN0aW9ucy9pbmRleCdcblxuY2xhc3MgQ3JlYXRlUm9vbVBhbmVsIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB0aXRsZTogJycsXG4gICAgICBtZXNzYWdlOiAnJyxcbiAgICAgIHBhcnRpY2lwYW50czogW11cbiAgICB9XG4gIH1cblxuICBoYW5kbGVTdWJtaXQgPSAoZXZlbnQpID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICBjb25zdCB7XG4gICAgICBjcmVhdGVSb29tLFxuICAgICAgY3VycmVudFVzZXJcbiAgICB9ID0gdGhpcy5wcm9wc1xuXG4gICAgY29uc3Qge1xuICAgICAgdGl0bGUsXG4gICAgICBtZXNzYWdlLFxuICAgICAgcGFydGljaXBhbnRzXG4gICAgfSA9IHRoaXMuc3RhdGVcblxuICAgIGlmKCF0aXRsZS5sZW5ndGhcbiAgICB8fCAhbWVzc2FnZS5sZW5ndGhcbiAgICB8fCAhcGFydGljaXBhbnRzLmxlbmd0aClcbiAgICAgIHJldHVyblxuXG4gICAgY3JlYXRlUm9vbShjdXJyZW50VXNlciwgdGl0bGUsIG1lc3NhZ2UsIHBhcnRpY2lwYW50cylcbiAgfVxuXG4gIGhhbmRsZUNoYW5nZSA9IChldmVudCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoe1tldmVudC50YXJnZXQubmFtZV06IGV2ZW50LnRhcmdldC52YWx1ZX0pXG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7XG4gICAgICByZXF1ZXN0VXNlcnNMaXN0LFxuICAgICAgY3VycmVudFVzZXJcbiAgICB9ID0gdGhpcy5wcm9wc1xuXG4gICAgcmVxdWVzdFVzZXJzTGlzdChjdXJyZW50VXNlci5pZClcbiAgfVxuXG4gIGFkZFBhcnRpY2lwYW50ID0gKG5ld1BhcnRpY2lwYW50KSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7cGFydGljaXBhbnRzOiBbLi4udGhpcy5zdGF0ZS5wYXJ0aWNpcGFudHMsIG5ld1BhcnRpY2lwYW50XX0pXG4gIH1cblxuICByZW5kZXJVc2Vyc0xpc3RMZWZ0ID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgcGFydGljaXBhbnRzIH0gPSB0aGlzLnN0YXRlXG4gICAgY29uc3QgeyB1c2Vyc0xpc3QgfSA9IHRoaXMucHJvcHNcblxuICAgIHJldHVybiB1c2Vyc0xpc3QuZmlsdGVyKHUgPT4gIXBhcnRpY2lwYW50cy5pbmNsdWRlcyh1KSkubWFwKHUgPT4gPHN0cm9uZyBvbkNsaWNrPXsoKSA9PiB0aGlzLmFkZFBhcnRpY2lwYW50KHUpfSA+e3UudXNlcm5hbWV9LCA8L3N0cm9uZz4pXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgaGlkZUNyZWF0ZVJvb21QYW5lbCxcbiAgICAgIHVzZXJzTGlzdFxuICAgIH0gPSB0aGlzLnByb3BzXG5cbiAgICBjb25zdCB7XG4gICAgICB0aXRsZSxcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBwYXJ0aWNpcGFudHNcbiAgICB9ID0gdGhpcy5zdGF0ZVxuXG4gICAgcmV0dXJuKFxuICAgICAgPGRpdiBpZD0nY3JlYXRlLXJvb20tcGFuZWwtY29udGFpbmVyJz5cbiAgICAgICAgPGRpdiBpZD0nY3JlYXRlLXJvb20tcGFuZWwnPlxuICAgICAgICAgIDxpbWcgc3JjPXtjbG9zZX0gb25DbGljaz17aGlkZUNyZWF0ZVJvb21QYW5lbH0gLz5cbiAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD17dGhpcy5oYW5kbGVTdWJtaXR9ID5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSd0ZXh0JyBwbGFjZWhvbGRlcj0nVGl0bGUnIFxuICAgICAgICAgICAgICBuYW1lPSd0aXRsZScgdmFsdWU9e3RpdGxlfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9IC8+PGJyIC8+XG4gICAgICAgICAgICA8cD5QYXJ0aWNpcGFudHM6IHtwYXJ0aWNpcGFudHMubWFwKHAgPT4gcC51c2VybmFtZSArICcsICcpfTwvcD5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSd0ZXh0JyBwbGFjZWhvbGRlcj0nTWVzc2FnZSdcbiAgICAgICAgICAgICAgbmFtZT0nbWVzc2FnZScgdmFsdWU9e21lc3NhZ2V9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0gLz48YnIgLz5cbiAgICAgICAgICAgIDxidXR0b24+Q3JlYXRlPC9idXR0b24+PGJyIC8+XG4gICAgICAgICAgICA8cD57dGhpcy5yZW5kZXJVc2Vyc0xpc3RMZWZ0KCl9PC9wPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlKSA9PiB7XG4gIHJldHVybiB7XG4gICAgY3VycmVudFVzZXI6IHN0YXRlLmN1cnJlbnRVc2VyLFxuICAgIHVzZXJzTGlzdDogc3RhdGUudXNlcnNMaXN0XG4gIH1cbn1cblxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgaGlkZUNyZWF0ZVJvb21QYW5lbDogKCkgPT4gZGlzcGF0Y2goe3R5cGU6IEhJREVfQ1JFQVRFX1JPT01fUEFORUx9KSxcbiAgICByZXF1ZXN0VXNlcnNMaXN0OiAoaWQpID0+IGRpc3BhdGNoKHJlcXVlc3RVc2Vyc0xpc3QoaWQpKSxcbiAgICBjcmVhdGVSb29tOiAodXNlciwgdGl0bGUsIG1lc3NhZ2UsIHBhcnRpY2lwYW50cykgPT4gZGlzcGF0Y2goY3JlYXRlUm9vbSh1c2VyLCB0aXRsZSwgbWVzc2FnZSwgcGFydGljaXBhbnRzKSlcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICBtYXBTdGF0ZVRvUHJvcHMsXG4gIG1hcERpc3BhdGNoVG9Qcm9wcylcbiAgKENyZWF0ZVJvb21QYW5lbCkiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIioge1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiSGVsdmV0aWNhIE5ldWVcXFwiLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOyB9XFxuXFxuI2FwcC1jb250YWluZXIge1xcbiAgd2lkdGg6IDEwMHZ3O1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOyB9XFxuICAjYXBwLWNvbnRhaW5lciBoMSB7XFxuICAgIGZsZXgtZ3JvdzogMDtcXG4gICAgZm9udC1mYW1pbHk6IFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM4MGJkZmY7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgcGFkZGluZzogMjBweDtcXG4gICAgcGFkZGluZy1sZWZ0OiA0MHB4OyB9XFxuICAjYXBwLWNvbnRhaW5lciAjYm9keS1jb250YWluZXIge1xcbiAgICBmbGV4LWdyb3c6IDE7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7IH1cXG4gICAgI2FwcC1jb250YWluZXIgI2JvZHktY29udGFpbmVyICNsZWZ0LWNvbnRhaW5lciB7XFxuICAgICAgd2lkdGg6IDMwMHB4O1xcbiAgICAgIGZsZXgtZ3JvdzogMDtcXG4gICAgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjZjNmM2YzO1xcbiAgICAgIGRpc3BsYXk6IGJsb2NrOyB9XFxuICAgICAgI2FwcC1jb250YWluZXIgI2JvZHktY29udGFpbmVyICNsZWZ0LWNvbnRhaW5lciBpbnB1dCB7XFxuICAgICAgICBmbGV4LWdyb3c6IDA7IH1cXG4gICAgICAjYXBwLWNvbnRhaW5lciAjYm9keS1jb250YWluZXIgI2xlZnQtY29udGFpbmVyIC5yb29tLWxpc3QtaXRlbSB7XFxuICAgICAgICBwYWRkaW5nOiAxMHB4O1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0VFRTlEMTsgfVxcbiAgICAgICAgI2FwcC1jb250YWluZXIgI2JvZHktY29udGFpbmVyICNsZWZ0LWNvbnRhaW5lciAucm9vbS1saXN0LWl0ZW0gcCB7XFxuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDA7IH1cXG4gICAgICAgICNhcHAtY29udGFpbmVyICNib2R5LWNvbnRhaW5lciAjbGVmdC1jb250YWluZXIgLnJvb20tbGlzdC1pdGVtIC51bnJlYWQge1xcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjOTdDMEI3OyB9XFxuICAgICNhcHAtY29udGFpbmVyICNib2R5LWNvbnRhaW5lciAjcmlnaHQtY29udGFpbmVyIHtcXG4gICAgICBmbGV4LWdyb3c6IDE7XFxuICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAgIGp1c3RpZnktY29udGVudDogZW5kOyB9XFxuICAgICAgI2FwcC1jb250YWluZXIgI2JvZHktY29udGFpbmVyICNyaWdodC1jb250YWluZXIgI2NvbnZlcnNhdGlvbi1jb250YWluZXIge1xcbiAgICAgICAgZmxleC1ncm93OiAxOyB9XFxuICAgICAgI2FwcC1jb250YWluZXIgI2JvZHktY29udGFpbmVyICNyaWdodC1jb250YWluZXIgI2lucHV0LWNvbnRhaW5lciB7XFxuICAgICAgICBmbGV4LWdyb3c6IDA7XFxuICAgICAgICBoZWlnaHQ6IDIwMHB4O1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2YzZjNmMzsgfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL0FwcC5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL0FwcC5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9BcHAuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiI2lucHV0LWNvbnRhaW5lciBpbnB1dFt0eXBlPXRleHRdIHtcXG4gIHdpZHRoOiA1MDBweDsgfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL0lucHV0Q29tcG9uZW50LnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vSW5wdXRDb21wb25lbnQuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vSW5wdXRDb21wb25lbnQuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCAnLi9JbnB1dENvbXBvbmVudC5zY3NzJ1xuaW1wb3J0IHtcbiAgc2VuZE1lc3NhZ2Vcbn0gZnJvbSAnQWN0aW9ucy9pbmRleCdcblxuY2xhc3MgSW5wdXRDb21wb25lbnQgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcblxuICAgIHRoaXMuaW5wdXRSZWYgPSBSZWFjdC5jcmVhdGVSZWYoKVxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBtZXNzYWdlOiAnJ1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZUNoYW5nZSA9IChldmVudCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoe1tldmVudC50YXJnZXQubmFtZV06IGV2ZW50LnRhcmdldC52YWx1ZX0pXG4gIH1cblxuICBoYW5kbGVTdWJtaXQgPSAoZXZlbnQpID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgXG4gICAgY29uc3Qge1xuICAgICAgY3VycmVudFJvb20sXG4gICAgICBjdXJyZW50VXNlcixcbiAgICAgIHNlbmRNZXNzYWdlXG4gICAgfSA9IHRoaXMucHJvcHNcblxuICAgIGNvbnN0IHsgbWVzc2FnZSB9ID0gdGhpcy5zdGF0ZVxuXG4gICAgaWYoY3VycmVudFVzZXIgPT09IHVuZGVmaW5lZFxuICAgIHx8IGN1cnJlbnRSb29tID09PSB1bmRlZmluZWRcbiAgICB8fCAhbWVzc2FnZS5sZW5ndGgpXG4gICAgICByZXR1cm5cblxuICAgIHNlbmRNZXNzYWdlKGN1cnJlbnRVc2VyLCBjdXJyZW50Um9vbS5faWQsIG1lc3NhZ2UpXG4gICAgdGhpcy5zZXRTdGF0ZSh7bWVzc2FnZTogJyd9KVxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5pbnB1dFJlZi5jdXJyZW50LmZvY3VzKClcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IG1lc3NhZ2UgfSA9IHRoaXMuc3RhdGVcblxuICAgIHJldHVybihcbiAgICAgIDxkaXYgaWQ9J2lucHV0LWNvbnRhaW5lcic+XG4gICAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLmhhbmRsZVN1Ym1pdH0+XG4gICAgICAgICAgPGlucHV0IHR5cGU9J3RleHQnIHZhbHVlPXttZXNzYWdlfVxuICAgICAgICAgICAgbmFtZT0nbWVzc2FnZSdcbiAgICAgICAgICAgIHJlZj17dGhpcy5pbnB1dFJlZn1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSdUeXBlIHlvdXIgbWVzc2FnZSBoZXJlJyAvPlxuICAgICAgICA8L2Zvcm0+XG4gICAgICA8L2Rpdj4gXG4gICAgKVxuICB9XG59IFxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBjdXJyZW50VXNlcjogc3RhdGUuY3VycmVudFVzZXIsXG4gICAgY3VycmVudFJvb206IHN0YXRlLmN1cnJlbnRSb29tXG4gIH1cbn1cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaCkgPT4ge1xuICByZXR1cm4ge1xuICAgIHNlbmRNZXNzYWdlOiAodXNlciwgcm9vbUlkLCBtZXNzYWdlKSA9PiBkaXNwYXRjaChzZW5kTWVzc2FnZSh1c2VyLCByb29tSWQsIG1lc3NhZ2UpKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwRGlzcGF0Y2hUb1Byb3BzKVxuICAoSW5wdXRDb21wb25lbnQpIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuXG5jbGFzcyBSb29tQ29tcG9uZW50IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdGl0bGUsXG4gICAgICBzZWVuQnksXG4gICAgICBtZXNzYWdlc1xuICAgIH0gPSB0aGlzLnByb3BzLmN1cnJlbnRSb29tXG5cbiAgICBpZih0aXRsZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgcmV0dXJuIDxwPk5vIGN1cnJlbnQgcm9vbTwvcD5cblxuICAgIHJldHVybihcbiAgICAgIDxkaXYgaWQ9J3Jvb20tY29udGFpbmVyJz5cbiAgICAgICAge21lc3NhZ2VzLm1hcChtID0+IDxwPnttLnVzZXIudXNlcm5hbWV9IHNhaWQ6IHttLmNvbnRlbnR9PC9wPil9XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlKSA9PiB7XG4gIHJldHVybiB7XG4gICAgY3VycmVudFJvb206IHN0YXRlLmN1cnJlbnRSb29tXG4gIH1cbn1cblxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoKSA9PiB7XG4gIHJldHVybiB7XG5cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICBtYXBTdGF0ZVRvUHJvcHMsXG4gIG1hcERpc3BhdGNoVG9Qcm9wcylcbiAgKFJvb21Db21wb25lbnQpIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJpbnB1dCB7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjY2VkNGRhO1xcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTtcXG4gIHBhZGRpbmc6IDEwcHg7XFxuICBmb250LXNpemU6IDIweHB4O1xcbiAgZm9udC1mYW1pbHk6IGluaGVyaXRzO1xcbiAgbWFyZ2luOiAxNXB4O1xcbiAgd2lkdGg6IDI1MHB4OyB9XFxuXFxuaW5wdXQ6Zm9jdXMge1xcbiAgYm9yZGVyLWNvbG9yOiAjODBiZGZmO1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMCwgMTIzLCAyNTUsIDAuMjUpOyB9XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vU2VhcmNoUm9vbXNMaXN0Q29tcG9uZW50LnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vU2VhcmNoUm9vbXNMaXN0Q29tcG9uZW50LnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL1NlYXJjaFJvb21zTGlzdENvbXBvbmVudC5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuaW1wb3J0ICcuL1NlYXJjaFJvb21zTGlzdENvbXBvbmVudC5zY3NzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWFyY2hSb29tc0xpc3RDb21wb25lbnQgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4oXG4gICAgICA8ZGl2PlxuICAgICAgICA8aW5wdXQgdHlwZT0ndGV4dCcgcGxhY2Vob2xkZXI9J1NlYXJjaCBjb252ZXJzYXRpb25zLi4nIC8+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn0gIiwiXG4vKipcbiAqIEV4cG9zZSBgQmFja29mZmAuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBCYWNrb2ZmO1xuXG4vKipcbiAqIEluaXRpYWxpemUgYmFja29mZiB0aW1lciB3aXRoIGBvcHRzYC5cbiAqXG4gKiAtIGBtaW5gIGluaXRpYWwgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgWzEwMF1cbiAqIC0gYG1heGAgbWF4IHRpbWVvdXQgWzEwMDAwXVxuICogLSBgaml0dGVyYCBbMF1cbiAqIC0gYGZhY3RvcmAgWzJdXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gQmFja29mZihvcHRzKSB7XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuICB0aGlzLm1zID0gb3B0cy5taW4gfHwgMTAwO1xuICB0aGlzLm1heCA9IG9wdHMubWF4IHx8IDEwMDAwO1xuICB0aGlzLmZhY3RvciA9IG9wdHMuZmFjdG9yIHx8IDI7XG4gIHRoaXMuaml0dGVyID0gb3B0cy5qaXR0ZXIgPiAwICYmIG9wdHMuaml0dGVyIDw9IDEgPyBvcHRzLmppdHRlciA6IDA7XG4gIHRoaXMuYXR0ZW1wdHMgPSAwO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgYmFja29mZiBkdXJhdGlvbi5cbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLmR1cmF0aW9uID0gZnVuY3Rpb24oKXtcbiAgdmFyIG1zID0gdGhpcy5tcyAqIE1hdGgucG93KHRoaXMuZmFjdG9yLCB0aGlzLmF0dGVtcHRzKyspO1xuICBpZiAodGhpcy5qaXR0ZXIpIHtcbiAgICB2YXIgcmFuZCA9ICBNYXRoLnJhbmRvbSgpO1xuICAgIHZhciBkZXZpYXRpb24gPSBNYXRoLmZsb29yKHJhbmQgKiB0aGlzLmppdHRlciAqIG1zKTtcbiAgICBtcyA9IChNYXRoLmZsb29yKHJhbmQgKiAxMCkgJiAxKSA9PSAwICA/IG1zIC0gZGV2aWF0aW9uIDogbXMgKyBkZXZpYXRpb247XG4gIH1cbiAgcmV0dXJuIE1hdGgubWluKG1zLCB0aGlzLm1heCkgfCAwO1xufTtcblxuLyoqXG4gKiBSZXNldCB0aGUgbnVtYmVyIG9mIGF0dGVtcHRzLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpe1xuICB0aGlzLmF0dGVtcHRzID0gMDtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBtaW5pbXVtIGR1cmF0aW9uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRNaW4gPSBmdW5jdGlvbihtaW4pe1xuICB0aGlzLm1zID0gbWluO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIG1heGltdW0gZHVyYXRpb25cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldE1heCA9IGZ1bmN0aW9uKG1heCl7XG4gIHRoaXMubWF4ID0gbWF4O1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIGppdHRlclxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0Sml0dGVyID0gZnVuY3Rpb24oaml0dGVyKXtcbiAgdGhpcy5qaXR0ZXIgPSBqaXR0ZXI7XG59O1xuXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHRvQXJyYXlcblxuZnVuY3Rpb24gdG9BcnJheShsaXN0LCBpbmRleCkge1xuICAgIHZhciBhcnJheSA9IFtdXG5cbiAgICBpbmRleCA9IGluZGV4IHx8IDBcblxuICAgIGZvciAodmFyIGkgPSBpbmRleCB8fCAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBhcnJheVtpIC0gaW5kZXhdID0gbGlzdFtpXVxuICAgIH1cblxuICAgIHJldHVybiBhcnJheVxufVxuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBUcmFuc3BvcnQgPSByZXF1aXJlKCcuLi90cmFuc3BvcnQnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcbnZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29tcG9uZW50LWluaGVyaXQnKTtcbnZhciB5ZWFzdCA9IHJlcXVpcmUoJ3llYXN0Jyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdlbmdpbmUuaW8tY2xpZW50OndlYnNvY2tldCcpO1xudmFyIEJyb3dzZXJXZWJTb2NrZXQgPSBnbG9iYWwuV2ViU29ja2V0IHx8IGdsb2JhbC5Nb3pXZWJTb2NrZXQ7XG52YXIgTm9kZVdlYlNvY2tldDtcbmlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICB0cnkge1xuICAgIE5vZGVXZWJTb2NrZXQgPSByZXF1aXJlKCd3cycpO1xuICB9IGNhdGNoIChlKSB7IH1cbn1cblxuLyoqXG4gKiBHZXQgZWl0aGVyIHRoZSBgV2ViU29ja2V0YCBvciBgTW96V2ViU29ja2V0YCBnbG9iYWxzXG4gKiBpbiB0aGUgYnJvd3NlciBvciB0cnkgdG8gcmVzb2x2ZSBXZWJTb2NrZXQtY29tcGF0aWJsZVxuICogaW50ZXJmYWNlIGV4cG9zZWQgYnkgYHdzYCBmb3IgTm9kZS1saWtlIGVudmlyb25tZW50LlxuICovXG5cbnZhciBXZWJTb2NrZXQgPSBCcm93c2VyV2ViU29ja2V0O1xuaWYgKCFXZWJTb2NrZXQgJiYgdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgV2ViU29ja2V0ID0gTm9kZVdlYlNvY2tldDtcbn1cblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdTO1xuXG4vKipcbiAqIFdlYlNvY2tldCB0cmFuc3BvcnQgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSB7T2JqZWN0fSBjb25uZWN0aW9uIG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gV1MgKG9wdHMpIHtcbiAgdmFyIGZvcmNlQmFzZTY0ID0gKG9wdHMgJiYgb3B0cy5mb3JjZUJhc2U2NCk7XG4gIGlmIChmb3JjZUJhc2U2NCkge1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuICB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlID0gb3B0cy5wZXJNZXNzYWdlRGVmbGF0ZTtcbiAgdGhpcy51c2luZ0Jyb3dzZXJXZWJTb2NrZXQgPSBCcm93c2VyV2ViU29ja2V0ICYmICFvcHRzLmZvcmNlTm9kZTtcbiAgdGhpcy5wcm90b2NvbHMgPSBvcHRzLnByb3RvY29scztcbiAgaWYgKCF0aGlzLnVzaW5nQnJvd3NlcldlYlNvY2tldCkge1xuICAgIFdlYlNvY2tldCA9IE5vZGVXZWJTb2NrZXQ7XG4gIH1cbiAgVHJhbnNwb3J0LmNhbGwodGhpcywgb3B0cyk7XG59XG5cbi8qKlxuICogSW5oZXJpdHMgZnJvbSBUcmFuc3BvcnQuXG4gKi9cblxuaW5oZXJpdChXUywgVHJhbnNwb3J0KTtcblxuLyoqXG4gKiBUcmFuc3BvcnQgbmFtZS5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbldTLnByb3RvdHlwZS5uYW1lID0gJ3dlYnNvY2tldCc7XG5cbi8qXG4gKiBXZWJTb2NrZXRzIHN1cHBvcnQgYmluYXJ5XG4gKi9cblxuV1MucHJvdG90eXBlLnN1cHBvcnRzQmluYXJ5ID0gdHJ1ZTtcblxuLyoqXG4gKiBPcGVucyBzb2NrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLmRvT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzLmNoZWNrKCkpIHtcbiAgICAvLyBsZXQgcHJvYmUgdGltZW91dFxuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB1cmkgPSB0aGlzLnVyaSgpO1xuICB2YXIgcHJvdG9jb2xzID0gdGhpcy5wcm90b2NvbHM7XG4gIHZhciBvcHRzID0ge1xuICAgIGFnZW50OiB0aGlzLmFnZW50LFxuICAgIHBlck1lc3NhZ2VEZWZsYXRlOiB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlXG4gIH07XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIG9wdHMucGZ4ID0gdGhpcy5wZng7XG4gIG9wdHMua2V5ID0gdGhpcy5rZXk7XG4gIG9wdHMucGFzc3BocmFzZSA9IHRoaXMucGFzc3BocmFzZTtcbiAgb3B0cy5jZXJ0ID0gdGhpcy5jZXJ0O1xuICBvcHRzLmNhID0gdGhpcy5jYTtcbiAgb3B0cy5jaXBoZXJzID0gdGhpcy5jaXBoZXJzO1xuICBvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9IHRoaXMucmVqZWN0VW5hdXRob3JpemVkO1xuICBpZiAodGhpcy5leHRyYUhlYWRlcnMpIHtcbiAgICBvcHRzLmhlYWRlcnMgPSB0aGlzLmV4dHJhSGVhZGVycztcbiAgfVxuICBpZiAodGhpcy5sb2NhbEFkZHJlc3MpIHtcbiAgICBvcHRzLmxvY2FsQWRkcmVzcyA9IHRoaXMubG9jYWxBZGRyZXNzO1xuICB9XG5cbiAgdHJ5IHtcbiAgICB0aGlzLndzID0gdGhpcy51c2luZ0Jyb3dzZXJXZWJTb2NrZXQgPyAocHJvdG9jb2xzID8gbmV3IFdlYlNvY2tldCh1cmksIHByb3RvY29scykgOiBuZXcgV2ViU29ja2V0KHVyaSkpIDogbmV3IFdlYlNvY2tldCh1cmksIHByb3RvY29scywgb3B0cyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgfVxuXG4gIGlmICh0aGlzLndzLmJpbmFyeVR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0aGlzLndzLnN1cHBvcnRzICYmIHRoaXMud3Muc3VwcG9ydHMuYmluYXJ5KSB7XG4gICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IHRydWU7XG4gICAgdGhpcy53cy5iaW5hcnlUeXBlID0gJ25vZGVidWZmZXInO1xuICB9IGVsc2Uge1xuICAgIHRoaXMud3MuYmluYXJ5VHlwZSA9ICdhcnJheWJ1ZmZlcic7XG4gIH1cblxuICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG59O1xuXG4vKipcbiAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBzb2NrZXRcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0aGlzLndzLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uT3BlbigpO1xuICB9O1xuICB0aGlzLndzLm9uY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbkNsb3NlKCk7XG4gIH07XG4gIHRoaXMud3Mub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgc2VsZi5vbkRhdGEoZXYuZGF0YSk7XG4gIH07XG4gIHRoaXMud3Mub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgc2VsZi5vbkVycm9yKCd3ZWJzb2NrZXQgZXJyb3InLCBlKTtcbiAgfTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGRhdGEgdG8gc29ja2V0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IG9mIHBhY2tldHMuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAocGFja2V0cykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICAvLyBlbmNvZGVQYWNrZXQgZWZmaWNpZW50IGFzIGl0IHVzZXMgV1MgZnJhbWluZ1xuICAvLyBubyBuZWVkIGZvciBlbmNvZGVQYXlsb2FkXG4gIHZhciB0b3RhbCA9IHBhY2tldHMubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHRvdGFsOyBpIDwgbDsgaSsrKSB7XG4gICAgKGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgICAgIHBhcnNlci5lbmNvZGVQYWNrZXQocGFja2V0LCBzZWxmLnN1cHBvcnRzQmluYXJ5LCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZiAoIXNlbGYudXNpbmdCcm93c2VyV2ViU29ja2V0KSB7XG4gICAgICAgICAgLy8gYWx3YXlzIGNyZWF0ZSBhIG5ldyBvYmplY3QgKEdILTQzNylcbiAgICAgICAgICB2YXIgb3B0cyA9IHt9O1xuICAgICAgICAgIGlmIChwYWNrZXQub3B0aW9ucykge1xuICAgICAgICAgICAgb3B0cy5jb21wcmVzcyA9IHBhY2tldC5vcHRpb25zLmNvbXByZXNzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWxmLnBlck1lc3NhZ2VEZWZsYXRlKSB7XG4gICAgICAgICAgICB2YXIgbGVuID0gJ3N0cmluZycgPT09IHR5cGVvZiBkYXRhID8gZ2xvYmFsLkJ1ZmZlci5ieXRlTGVuZ3RoKGRhdGEpIDogZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICBpZiAobGVuIDwgc2VsZi5wZXJNZXNzYWdlRGVmbGF0ZS50aHJlc2hvbGQpIHtcbiAgICAgICAgICAgICAgb3B0cy5jb21wcmVzcyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNvbWV0aW1lcyB0aGUgd2Vic29ja2V0IGhhcyBhbHJlYWR5IGJlZW4gY2xvc2VkIGJ1dCB0aGUgYnJvd3NlciBkaWRuJ3RcbiAgICAgICAgLy8gaGF2ZSBhIGNoYW5jZSBvZiBpbmZvcm1pbmcgdXMgYWJvdXQgaXQgeWV0LCBpbiB0aGF0IGNhc2Ugc2VuZCB3aWxsXG4gICAgICAgIC8vIHRocm93IGFuIGVycm9yXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKHNlbGYudXNpbmdCcm93c2VyV2ViU29ja2V0KSB7XG4gICAgICAgICAgICAvLyBUeXBlRXJyb3IgaXMgdGhyb3duIHdoZW4gcGFzc2luZyB0aGUgc2Vjb25kIGFyZ3VtZW50IG9uIFNhZmFyaVxuICAgICAgICAgICAgc2VsZi53cy5zZW5kKGRhdGEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxmLndzLnNlbmQoZGF0YSwgb3B0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgZGVidWcoJ3dlYnNvY2tldCBjbG9zZWQgYmVmb3JlIG9uY2xvc2UgZXZlbnQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC0tdG90YWwgfHwgZG9uZSgpO1xuICAgICAgfSk7XG4gICAgfSkocGFja2V0c1tpXSk7XG4gIH1cblxuICBmdW5jdGlvbiBkb25lICgpIHtcbiAgICBzZWxmLmVtaXQoJ2ZsdXNoJyk7XG5cbiAgICAvLyBmYWtlIGRyYWluXG4gICAgLy8gZGVmZXIgdG8gbmV4dCB0aWNrIHRvIGFsbG93IFNvY2tldCB0byBjbGVhciB3cml0ZUJ1ZmZlclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi53cml0YWJsZSA9IHRydWU7XG4gICAgICBzZWxmLmVtaXQoJ2RyYWluJyk7XG4gICAgfSwgMCk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gY2xvc2VcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgVHJhbnNwb3J0LnByb3RvdHlwZS5vbkNsb3NlLmNhbGwodGhpcyk7XG59O1xuXG4vKipcbiAqIENsb3NlcyBzb2NrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLmRvQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0eXBlb2YgdGhpcy53cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aGlzLndzLmNsb3NlKCk7XG4gIH1cbn07XG5cbi8qKlxuICogR2VuZXJhdGVzIHVyaSBmb3IgY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUudXJpID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IHt9O1xuICB2YXIgc2NoZW1hID0gdGhpcy5zZWN1cmUgPyAnd3NzJyA6ICd3cyc7XG4gIHZhciBwb3J0ID0gJyc7XG5cbiAgLy8gYXZvaWQgcG9ydCBpZiBkZWZhdWx0IGZvciBzY2hlbWFcbiAgaWYgKHRoaXMucG9ydCAmJiAoKCd3c3MnID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMucG9ydCkgIT09IDQ0MykgfHxcbiAgICAoJ3dzJyA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLnBvcnQpICE9PSA4MCkpKSB7XG4gICAgcG9ydCA9ICc6JyArIHRoaXMucG9ydDtcbiAgfVxuXG4gIC8vIGFwcGVuZCB0aW1lc3RhbXAgdG8gVVJJXG4gIGlmICh0aGlzLnRpbWVzdGFtcFJlcXVlc3RzKSB7XG4gICAgcXVlcnlbdGhpcy50aW1lc3RhbXBQYXJhbV0gPSB5ZWFzdCgpO1xuICB9XG5cbiAgLy8gY29tbXVuaWNhdGUgYmluYXJ5IHN1cHBvcnQgY2FwYWJpbGl0aWVzXG4gIGlmICghdGhpcy5zdXBwb3J0c0JpbmFyeSkge1xuICAgIHF1ZXJ5LmI2NCA9IDE7XG4gIH1cblxuICBxdWVyeSA9IHBhcnNlcXMuZW5jb2RlKHF1ZXJ5KTtcblxuICAvLyBwcmVwZW5kID8gdG8gcXVlcnlcbiAgaWYgKHF1ZXJ5Lmxlbmd0aCkge1xuICAgIHF1ZXJ5ID0gJz8nICsgcXVlcnk7XG4gIH1cblxuICB2YXIgaXB2NiA9IHRoaXMuaG9zdG5hbWUuaW5kZXhPZignOicpICE9PSAtMTtcbiAgcmV0dXJuIHNjaGVtYSArICc6Ly8nICsgKGlwdjYgPyAnWycgKyB0aGlzLmhvc3RuYW1lICsgJ10nIDogdGhpcy5ob3N0bmFtZSkgKyBwb3J0ICsgdGhpcy5wYXRoICsgcXVlcnk7XG59O1xuXG4vKipcbiAqIEZlYXR1cmUgZGV0ZWN0aW9uIGZvciBXZWJTb2NrZXQuXG4gKlxuICogQHJldHVybiB7Qm9vbGVhbn0gd2hldGhlciB0aGlzIHRyYW5zcG9ydCBpcyBhdmFpbGFibGUuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbldTLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEhV2ViU29ja2V0ICYmICEoJ19faW5pdGlhbGl6ZScgaW4gV2ViU29ja2V0ICYmIHRoaXMubmFtZSA9PT0gV1MucHJvdG90eXBlLm5hbWUpO1xufTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzLlxuICovXG5cbnZhciBQb2xsaW5nID0gcmVxdWlyZSgnLi9wb2xsaW5nJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBKU09OUFBvbGxpbmc7XG5cbi8qKlxuICogQ2FjaGVkIHJlZ3VsYXIgZXhwcmVzc2lvbnMuXG4gKi9cblxudmFyIHJOZXdsaW5lID0gL1xcbi9nO1xudmFyIHJFc2NhcGVkTmV3bGluZSA9IC9cXFxcbi9nO1xuXG4vKipcbiAqIEdsb2JhbCBKU09OUCBjYWxsYmFja3MuXG4gKi9cblxudmFyIGNhbGxiYWNrcztcblxuLyoqXG4gKiBOb29wLlxuICovXG5cbmZ1bmN0aW9uIGVtcHR5ICgpIHsgfVxuXG4vKipcbiAqIEpTT05QIFBvbGxpbmcgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEpTT05QUG9sbGluZyAob3B0cykge1xuICBQb2xsaW5nLmNhbGwodGhpcywgb3B0cyk7XG5cbiAgdGhpcy5xdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG5cbiAgLy8gZGVmaW5lIGdsb2JhbCBjYWxsYmFja3MgYXJyYXkgaWYgbm90IHByZXNlbnRcbiAgLy8gd2UgZG8gdGhpcyBoZXJlIChsYXppbHkpIHRvIGF2b2lkIHVubmVlZGVkIGdsb2JhbCBwb2xsdXRpb25cbiAgaWYgKCFjYWxsYmFja3MpIHtcbiAgICAvLyB3ZSBuZWVkIHRvIGNvbnNpZGVyIG11bHRpcGxlIGVuZ2luZXMgaW4gdGhlIHNhbWUgcGFnZVxuICAgIGlmICghZ2xvYmFsLl9fX2VpbykgZ2xvYmFsLl9fX2VpbyA9IFtdO1xuICAgIGNhbGxiYWNrcyA9IGdsb2JhbC5fX19laW87XG4gIH1cblxuICAvLyBjYWxsYmFjayBpZGVudGlmaWVyXG4gIHRoaXMuaW5kZXggPSBjYWxsYmFja3MubGVuZ3RoO1xuXG4gIC8vIGFkZCBjYWxsYmFjayB0byBqc29ucCBnbG9iYWxcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiAobXNnKSB7XG4gICAgc2VsZi5vbkRhdGEobXNnKTtcbiAgfSk7XG5cbiAgLy8gYXBwZW5kIHRvIHF1ZXJ5IHN0cmluZ1xuICB0aGlzLnF1ZXJ5LmogPSB0aGlzLmluZGV4O1xuXG4gIC8vIHByZXZlbnQgc3B1cmlvdXMgZXJyb3JzIGZyb20gYmVpbmcgZW1pdHRlZCB3aGVuIHRoZSB3aW5kb3cgaXMgdW5sb2FkZWRcbiAgaWYgKGdsb2JhbC5kb2N1bWVudCAmJiBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5zY3JpcHQpIHNlbGYuc2NyaXB0Lm9uZXJyb3IgPSBlbXB0eTtcbiAgICB9LCBmYWxzZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFBvbGxpbmcuXG4gKi9cblxuaW5oZXJpdChKU09OUFBvbGxpbmcsIFBvbGxpbmcpO1xuXG4vKlxuICogSlNPTlAgb25seSBzdXBwb3J0cyBiaW5hcnkgYXMgYmFzZTY0IGVuY29kZWQgc3RyaW5nc1xuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIHNvY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5KU09OUFBvbGxpbmcucHJvdG90eXBlLmRvQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnNjcmlwdCkge1xuICAgIHRoaXMuc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5zY3JpcHQpO1xuICAgIHRoaXMuc2NyaXB0ID0gbnVsbDtcbiAgfVxuXG4gIGlmICh0aGlzLmZvcm0pIHtcbiAgICB0aGlzLmZvcm0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmZvcm0pO1xuICAgIHRoaXMuZm9ybSA9IG51bGw7XG4gICAgdGhpcy5pZnJhbWUgPSBudWxsO1xuICB9XG5cbiAgUG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZS5jYWxsKHRoaXMpO1xufTtcblxuLyoqXG4gKiBTdGFydHMgYSBwb2xsIGN5Y2xlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuZG9Qb2xsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblxuICBpZiAodGhpcy5zY3JpcHQpIHtcbiAgICB0aGlzLnNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuc2NyaXB0KTtcbiAgICB0aGlzLnNjcmlwdCA9IG51bGw7XG4gIH1cblxuICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuICBzY3JpcHQuc3JjID0gdGhpcy51cmkoKTtcbiAgc2NyaXB0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoZSkge1xuICAgIHNlbGYub25FcnJvcignanNvbnAgcG9sbCBlcnJvcicsIGUpO1xuICB9O1xuXG4gIHZhciBpbnNlcnRBdCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTtcbiAgaWYgKGluc2VydEF0KSB7XG4gICAgaW5zZXJ0QXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2NyaXB0LCBpbnNlcnRBdCk7XG4gIH0gZWxzZSB7XG4gICAgKGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuYm9keSkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgfVxuICB0aGlzLnNjcmlwdCA9IHNjcmlwdDtcblxuICB2YXIgaXNVQWdlY2tvID0gJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBuYXZpZ2F0b3IgJiYgL2dlY2tvL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuICBpZiAoaXNVQWdlY2tvKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gICAgfSwgMTAwKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXcml0ZXMgd2l0aCBhIGhpZGRlbiBpZnJhbWUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgdG8gc2VuZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGVkIHVwb24gZmx1c2guXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5KU09OUFBvbGxpbmcucHJvdG90eXBlLmRvV3JpdGUgPSBmdW5jdGlvbiAoZGF0YSwgZm4pIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGlmICghdGhpcy5mb3JtKSB7XG4gICAgdmFyIGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7XG4gICAgdmFyIGFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgIHZhciBpZCA9IHRoaXMuaWZyYW1lSWQgPSAnZWlvX2lmcmFtZV8nICsgdGhpcy5pbmRleDtcbiAgICB2YXIgaWZyYW1lO1xuXG4gICAgZm9ybS5jbGFzc05hbWUgPSAnc29ja2V0aW8nO1xuICAgIGZvcm0uc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgIGZvcm0uc3R5bGUudG9wID0gJy0xMDAwcHgnO1xuICAgIGZvcm0uc3R5bGUubGVmdCA9ICctMTAwMHB4JztcbiAgICBmb3JtLnRhcmdldCA9IGlkO1xuICAgIGZvcm0ubWV0aG9kID0gJ1BPU1QnO1xuICAgIGZvcm0uc2V0QXR0cmlidXRlKCdhY2NlcHQtY2hhcnNldCcsICd1dGYtOCcpO1xuICAgIGFyZWEubmFtZSA9ICdkJztcbiAgICBmb3JtLmFwcGVuZENoaWxkKGFyZWEpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZm9ybSk7XG5cbiAgICB0aGlzLmZvcm0gPSBmb3JtO1xuICAgIHRoaXMuYXJlYSA9IGFyZWE7XG4gIH1cblxuICB0aGlzLmZvcm0uYWN0aW9uID0gdGhpcy51cmkoKTtcblxuICBmdW5jdGlvbiBjb21wbGV0ZSAoKSB7XG4gICAgaW5pdElmcmFtZSgpO1xuICAgIGZuKCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0SWZyYW1lICgpIHtcbiAgICBpZiAoc2VsZi5pZnJhbWUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNlbGYuZm9ybS5yZW1vdmVDaGlsZChzZWxmLmlmcmFtZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHNlbGYub25FcnJvcignanNvbnAgcG9sbGluZyBpZnJhbWUgcmVtb3ZhbCBlcnJvcicsIGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAvLyBpZTYgZHluYW1pYyBpZnJhbWVzIHdpdGggdGFyZ2V0PVwiXCIgc3VwcG9ydCAodGhhbmtzIENocmlzIExhbWJhY2hlcilcbiAgICAgIHZhciBodG1sID0gJzxpZnJhbWUgc3JjPVwiamF2YXNjcmlwdDowXCIgbmFtZT1cIicgKyBzZWxmLmlmcmFtZUlkICsgJ1wiPic7XG4gICAgICBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGh0bWwpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgICAgaWZyYW1lLm5hbWUgPSBzZWxmLmlmcmFtZUlkO1xuICAgICAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0OjAnO1xuICAgIH1cblxuICAgIGlmcmFtZS5pZCA9IHNlbGYuaWZyYW1lSWQ7XG5cbiAgICBzZWxmLmZvcm0uYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICBzZWxmLmlmcmFtZSA9IGlmcmFtZTtcbiAgfVxuXG4gIGluaXRJZnJhbWUoKTtcblxuICAvLyBlc2NhcGUgXFxuIHRvIHByZXZlbnQgaXQgZnJvbSBiZWluZyBjb252ZXJ0ZWQgaW50byBcXHJcXG4gYnkgc29tZSBVQXNcbiAgLy8gZG91YmxlIGVzY2FwaW5nIGlzIHJlcXVpcmVkIGZvciBlc2NhcGVkIG5ldyBsaW5lcyBiZWNhdXNlIHVuZXNjYXBpbmcgb2YgbmV3IGxpbmVzIGNhbiBiZSBkb25lIHNhZmVseSBvbiBzZXJ2ZXItc2lkZVxuICBkYXRhID0gZGF0YS5yZXBsYWNlKHJFc2NhcGVkTmV3bGluZSwgJ1xcXFxcXG4nKTtcbiAgdGhpcy5hcmVhLnZhbHVlID0gZGF0YS5yZXBsYWNlKHJOZXdsaW5lLCAnXFxcXG4nKTtcblxuICB0cnkge1xuICAgIHRoaXMuZm9ybS5zdWJtaXQoKTtcbiAgfSBjYXRjaCAoZSkge31cblxuICBpZiAodGhpcy5pZnJhbWUuYXR0YWNoRXZlbnQpIHtcbiAgICB0aGlzLmlmcmFtZS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5pZnJhbWUucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgfVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5pZnJhbWUub25sb2FkID0gY29tcGxldGU7XG4gIH1cbn07XG4iLCIvKipcbiAqIENyZWF0ZSBhIGJsb2IgYnVpbGRlciBldmVuIHdoZW4gdmVuZG9yIHByZWZpeGVzIGV4aXN0XG4gKi9cblxudmFyIEJsb2JCdWlsZGVyID0gZ2xvYmFsLkJsb2JCdWlsZGVyXG4gIHx8IGdsb2JhbC5XZWJLaXRCbG9iQnVpbGRlclxuICB8fCBnbG9iYWwuTVNCbG9iQnVpbGRlclxuICB8fCBnbG9iYWwuTW96QmxvYkJ1aWxkZXI7XG5cbi8qKlxuICogQ2hlY2sgaWYgQmxvYiBjb25zdHJ1Y3RvciBpcyBzdXBwb3J0ZWRcbiAqL1xuXG52YXIgYmxvYlN1cHBvcnRlZCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYSA9IG5ldyBCbG9iKFsnaGknXSk7XG4gICAgcmV0dXJuIGEuc2l6ZSA9PT0gMjtcbiAgfSBjYXRjaChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59KSgpO1xuXG4vKipcbiAqIENoZWNrIGlmIEJsb2IgY29uc3RydWN0b3Igc3VwcG9ydHMgQXJyYXlCdWZmZXJWaWV3c1xuICogRmFpbHMgaW4gU2FmYXJpIDYsIHNvIHdlIG5lZWQgdG8gbWFwIHRvIEFycmF5QnVmZmVycyB0aGVyZS5cbiAqL1xuXG52YXIgYmxvYlN1cHBvcnRzQXJyYXlCdWZmZXJWaWV3ID0gYmxvYlN1cHBvcnRlZCAmJiAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgdmFyIGIgPSBuZXcgQmxvYihbbmV3IFVpbnQ4QXJyYXkoWzEsMl0pXSk7XG4gICAgcmV0dXJuIGIuc2l6ZSA9PT0gMjtcbiAgfSBjYXRjaChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59KSgpO1xuXG4vKipcbiAqIENoZWNrIGlmIEJsb2JCdWlsZGVyIGlzIHN1cHBvcnRlZFxuICovXG5cbnZhciBibG9iQnVpbGRlclN1cHBvcnRlZCA9IEJsb2JCdWlsZGVyXG4gICYmIEJsb2JCdWlsZGVyLnByb3RvdHlwZS5hcHBlbmRcbiAgJiYgQmxvYkJ1aWxkZXIucHJvdG90eXBlLmdldEJsb2I7XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRoYXQgbWFwcyBBcnJheUJ1ZmZlclZpZXdzIHRvIEFycmF5QnVmZmVyc1xuICogVXNlZCBieSBCbG9iQnVpbGRlciBjb25zdHJ1Y3RvciBhbmQgb2xkIGJyb3dzZXJzIHRoYXQgZGlkbid0XG4gKiBzdXBwb3J0IGl0IGluIHRoZSBCbG9iIGNvbnN0cnVjdG9yLlxuICovXG5cbmZ1bmN0aW9uIG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGNodW5rID0gYXJ5W2ldO1xuICAgIGlmIChjaHVuay5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgdmFyIGJ1ZiA9IGNodW5rLmJ1ZmZlcjtcblxuICAgICAgLy8gaWYgdGhpcyBpcyBhIHN1YmFycmF5LCBtYWtlIGEgY29weSBzbyB3ZSBvbmx5XG4gICAgICAvLyBpbmNsdWRlIHRoZSBzdWJhcnJheSByZWdpb24gZnJvbSB0aGUgdW5kZXJseWluZyBidWZmZXJcbiAgICAgIGlmIChjaHVuay5ieXRlTGVuZ3RoICE9PSBidWYuYnl0ZUxlbmd0aCkge1xuICAgICAgICB2YXIgY29weSA9IG5ldyBVaW50OEFycmF5KGNodW5rLmJ5dGVMZW5ndGgpO1xuICAgICAgICBjb3B5LnNldChuZXcgVWludDhBcnJheShidWYsIGNodW5rLmJ5dGVPZmZzZXQsIGNodW5rLmJ5dGVMZW5ndGgpKTtcbiAgICAgICAgYnVmID0gY29weS5idWZmZXI7XG4gICAgICB9XG5cbiAgICAgIGFyeVtpXSA9IGJ1ZjtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvcihhcnksIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdmFyIGJiID0gbmV3IEJsb2JCdWlsZGVyKCk7XG4gIG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyeS5sZW5ndGg7IGkrKykge1xuICAgIGJiLmFwcGVuZChhcnlbaV0pO1xuICB9XG5cbiAgcmV0dXJuIChvcHRpb25zLnR5cGUpID8gYmIuZ2V0QmxvYihvcHRpb25zLnR5cGUpIDogYmIuZ2V0QmxvYigpO1xufTtcblxuZnVuY3Rpb24gQmxvYkNvbnN0cnVjdG9yKGFyeSwgb3B0aW9ucykge1xuICBtYXBBcnJheUJ1ZmZlclZpZXdzKGFyeSk7XG4gIHJldHVybiBuZXcgQmxvYihhcnksIG9wdGlvbnMgfHwge30pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7XG4gIGlmIChibG9iU3VwcG9ydGVkKSB7XG4gICAgcmV0dXJuIGJsb2JTdXBwb3J0c0FycmF5QnVmZmVyVmlldyA/IGdsb2JhbC5CbG9iIDogQmxvYkNvbnN0cnVjdG9yO1xuICB9IGVsc2UgaWYgKGJsb2JCdWlsZGVyU3VwcG9ydGVkKSB7XG4gICAgcmV0dXJuIEJsb2JCdWlsZGVyQ29uc3RydWN0b3I7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufSkoKTtcbiIsIi8qXG4gKiBiYXNlNjQtYXJyYXlidWZmZXJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uaWtsYXN2aC9iYXNlNjQtYXJyYXlidWZmZXJcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgTmlrbGFzIHZvbiBIZXJ0emVuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKi9cbihmdW5jdGlvbigpe1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgY2hhcnMgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIjtcblxuICAvLyBVc2UgYSBsb29rdXAgdGFibGUgdG8gZmluZCB0aGUgaW5kZXguXG4gIHZhciBsb29rdXAgPSBuZXcgVWludDhBcnJheSgyNTYpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgbG9va3VwW2NoYXJzLmNoYXJDb2RlQXQoaSldID0gaTtcbiAgfVxuXG4gIGV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24oYXJyYXlidWZmZXIpIHtcbiAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlciksXG4gICAgaSwgbGVuID0gYnl0ZXMubGVuZ3RoLCBiYXNlNjQgPSBcIlwiO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSs9Mykge1xuICAgICAgYmFzZTY0ICs9IGNoYXJzW2J5dGVzW2ldID4+IDJdO1xuICAgICAgYmFzZTY0ICs9IGNoYXJzWygoYnl0ZXNbaV0gJiAzKSA8PCA0KSB8IChieXRlc1tpICsgMV0gPj4gNCldO1xuICAgICAgYmFzZTY0ICs9IGNoYXJzWygoYnl0ZXNbaSArIDFdICYgMTUpIDw8IDIpIHwgKGJ5dGVzW2kgKyAyXSA+PiA2KV07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbYnl0ZXNbaSArIDJdICYgNjNdO1xuICAgIH1cblxuICAgIGlmICgobGVuICUgMykgPT09IDIpIHtcbiAgICAgIGJhc2U2NCA9IGJhc2U2NC5zdWJzdHJpbmcoMCwgYmFzZTY0Lmxlbmd0aCAtIDEpICsgXCI9XCI7XG4gICAgfSBlbHNlIGlmIChsZW4gJSAzID09PSAxKSB7XG4gICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAyKSArIFwiPT1cIjtcbiAgICB9XG5cbiAgICByZXR1cm4gYmFzZTY0O1xuICB9O1xuXG4gIGV4cG9ydHMuZGVjb2RlID0gIGZ1bmN0aW9uKGJhc2U2NCkge1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBiYXNlNjQubGVuZ3RoICogMC43NSxcbiAgICBsZW4gPSBiYXNlNjQubGVuZ3RoLCBpLCBwID0gMCxcbiAgICBlbmNvZGVkMSwgZW5jb2RlZDIsIGVuY29kZWQzLCBlbmNvZGVkNDtcblxuICAgIGlmIChiYXNlNjRbYmFzZTY0Lmxlbmd0aCAtIDFdID09PSBcIj1cIikge1xuICAgICAgYnVmZmVyTGVuZ3RoLS07XG4gICAgICBpZiAoYmFzZTY0W2Jhc2U2NC5sZW5ndGggLSAyXSA9PT0gXCI9XCIpIHtcbiAgICAgICAgYnVmZmVyTGVuZ3RoLS07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGFycmF5YnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGJ1ZmZlckxlbmd0aCksXG4gICAgYnl0ZXMgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlcik7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKz00KSB7XG4gICAgICBlbmNvZGVkMSA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpKV07XG4gICAgICBlbmNvZGVkMiA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpKzEpXTtcbiAgICAgIGVuY29kZWQzID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkrMildO1xuICAgICAgZW5jb2RlZDQgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSszKV07XG5cbiAgICAgIGJ5dGVzW3ArK10gPSAoZW5jb2RlZDEgPDwgMikgfCAoZW5jb2RlZDIgPj4gNCk7XG4gICAgICBieXRlc1twKytdID0gKChlbmNvZGVkMiAmIDE1KSA8PCA0KSB8IChlbmNvZGVkMyA+PiAyKTtcbiAgICAgIGJ5dGVzW3ArK10gPSAoKGVuY29kZWQzICYgMykgPDwgNikgfCAoZW5jb2RlZDQgJiA2Myk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5YnVmZmVyO1xuICB9O1xufSkoKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XHJcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcclxuXHR9XHJcblx0cmV0dXJuIG1vZHVsZTtcclxufTtcclxuIiwiLyohIGh0dHBzOi8vbXRocy5iZS91dGY4anMgdjIuMS4yIGJ5IEBtYXRoaWFzICovXG47KGZ1bmN0aW9uKHJvb3QpIHtcblxuXHQvLyBEZXRlY3QgZnJlZSB2YXJpYWJsZXMgYGV4cG9ydHNgXG5cdHZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHM7XG5cblx0Ly8gRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWBcblx0dmFyIGZyZWVNb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJlxuXHRcdG1vZHVsZS5leHBvcnRzID09IGZyZWVFeHBvcnRzICYmIG1vZHVsZTtcblxuXHQvLyBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCwgZnJvbSBOb2RlLmpzIG9yIEJyb3dzZXJpZmllZCBjb2RlLFxuXHQvLyBhbmQgdXNlIGl0IGFzIGByb290YFxuXHR2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsO1xuXHRpZiAoZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHwgZnJlZUdsb2JhbC53aW5kb3cgPT09IGZyZWVHbG9iYWwpIHtcblx0XHRyb290ID0gZnJlZUdsb2JhbDtcblx0fVxuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdHZhciBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG5cdC8vIFRha2VuIGZyb20gaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlXG5cdGZ1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKSB7XG5cdFx0dmFyIG91dHB1dCA9IFtdO1xuXHRcdHZhciBjb3VudGVyID0gMDtcblx0XHR2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcblx0XHR2YXIgdmFsdWU7XG5cdFx0dmFyIGV4dHJhO1xuXHRcdHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHR2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHRcdC8vIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3RlclxuXHRcdFx0XHRleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRcdGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBsb3cgc3Vycm9nYXRlXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGUgbmV4dFxuXHRcdFx0XHRcdC8vIGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpclxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0XHRjb3VudGVyLS07XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdC8vIFRha2VuIGZyb20gaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlXG5cdGZ1bmN0aW9uIHVjczJlbmNvZGUoYXJyYXkpIHtcblx0XHR2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXHRcdHZhciBpbmRleCA9IC0xO1xuXHRcdHZhciB2YWx1ZTtcblx0XHR2YXIgb3V0cHV0ID0gJyc7XG5cdFx0d2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcblx0XHRcdHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXHRcdFx0aWYgKHZhbHVlID4gMHhGRkZGKSB7XG5cdFx0XHRcdHZhbHVlIC09IDB4MTAwMDA7XG5cdFx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApO1xuXHRcdFx0XHR2YWx1ZSA9IDB4REMwMCB8IHZhbHVlICYgMHgzRkY7XG5cdFx0XHR9XG5cdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlKTtcblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdGZ1bmN0aW9uIGNoZWNrU2NhbGFyVmFsdWUoY29kZVBvaW50LCBzdHJpY3QpIHtcblx0XHRpZiAoY29kZVBvaW50ID49IDB4RDgwMCAmJiBjb2RlUG9pbnQgPD0gMHhERkZGKSB7XG5cdFx0XHRpZiAoc3RyaWN0KSB7XG5cdFx0XHRcdHRocm93IEVycm9yKFxuXHRcdFx0XHRcdCdMb25lIHN1cnJvZ2F0ZSBVKycgKyBjb2RlUG9pbnQudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkgK1xuXHRcdFx0XHRcdCcgaXMgbm90IGEgc2NhbGFyIHZhbHVlJ1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHRmdW5jdGlvbiBjcmVhdGVCeXRlKGNvZGVQb2ludCwgc2hpZnQpIHtcblx0XHRyZXR1cm4gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IHNoaWZ0KSAmIDB4M0YpIHwgMHg4MCk7XG5cdH1cblxuXHRmdW5jdGlvbiBlbmNvZGVDb2RlUG9pbnQoY29kZVBvaW50LCBzdHJpY3QpIHtcblx0XHRpZiAoKGNvZGVQb2ludCAmIDB4RkZGRkZGODApID09IDApIHsgLy8gMS1ieXRlIHNlcXVlbmNlXG5cdFx0XHRyZXR1cm4gc3RyaW5nRnJvbUNoYXJDb2RlKGNvZGVQb2ludCk7XG5cdFx0fVxuXHRcdHZhciBzeW1ib2wgPSAnJztcblx0XHRpZiAoKGNvZGVQb2ludCAmIDB4RkZGRkY4MDApID09IDApIHsgLy8gMi1ieXRlIHNlcXVlbmNlXG5cdFx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gNikgJiAweDFGKSB8IDB4QzApO1xuXHRcdH1cblx0XHRlbHNlIGlmICgoY29kZVBvaW50ICYgMHhGRkZGMDAwMCkgPT0gMCkgeyAvLyAzLWJ5dGUgc2VxdWVuY2Vcblx0XHRcdGlmICghY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQsIHN0cmljdCkpIHtcblx0XHRcdFx0Y29kZVBvaW50ID0gMHhGRkZEO1xuXHRcdFx0fVxuXHRcdFx0c3ltYm9sID0gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IDEyKSAmIDB4MEYpIHwgMHhFMCk7XG5cdFx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDYpO1xuXHRcdH1cblx0XHRlbHNlIGlmICgoY29kZVBvaW50ICYgMHhGRkUwMDAwMCkgPT0gMCkgeyAvLyA0LWJ5dGUgc2VxdWVuY2Vcblx0XHRcdHN5bWJvbCA9IHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiAxOCkgJiAweDA3KSB8IDB4RjApO1xuXHRcdFx0c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCAxMik7XG5cdFx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDYpO1xuXHRcdH1cblx0XHRzeW1ib2wgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKChjb2RlUG9pbnQgJiAweDNGKSB8IDB4ODApO1xuXHRcdHJldHVybiBzeW1ib2w7XG5cdH1cblxuXHRmdW5jdGlvbiB1dGY4ZW5jb2RlKHN0cmluZywgb3B0cykge1xuXHRcdG9wdHMgPSBvcHRzIHx8IHt9O1xuXHRcdHZhciBzdHJpY3QgPSBmYWxzZSAhPT0gb3B0cy5zdHJpY3Q7XG5cblx0XHR2YXIgY29kZVBvaW50cyA9IHVjczJkZWNvZGUoc3RyaW5nKTtcblx0XHR2YXIgbGVuZ3RoID0gY29kZVBvaW50cy5sZW5ndGg7XG5cdFx0dmFyIGluZGV4ID0gLTE7XG5cdFx0dmFyIGNvZGVQb2ludDtcblx0XHR2YXIgYnl0ZVN0cmluZyA9ICcnO1xuXHRcdHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG5cdFx0XHRjb2RlUG9pbnQgPSBjb2RlUG9pbnRzW2luZGV4XTtcblx0XHRcdGJ5dGVTdHJpbmcgKz0gZW5jb2RlQ29kZVBvaW50KGNvZGVQb2ludCwgc3RyaWN0KTtcblx0XHR9XG5cdFx0cmV0dXJuIGJ5dGVTdHJpbmc7XG5cdH1cblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHRmdW5jdGlvbiByZWFkQ29udGludWF0aW9uQnl0ZSgpIHtcblx0XHRpZiAoYnl0ZUluZGV4ID49IGJ5dGVDb3VudCkge1xuXHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgYnl0ZSBpbmRleCcpO1xuXHRcdH1cblxuXHRcdHZhciBjb250aW51YXRpb25CeXRlID0gYnl0ZUFycmF5W2J5dGVJbmRleF0gJiAweEZGO1xuXHRcdGJ5dGVJbmRleCsrO1xuXG5cdFx0aWYgKChjb250aW51YXRpb25CeXRlICYgMHhDMCkgPT0gMHg4MCkge1xuXHRcdFx0cmV0dXJuIGNvbnRpbnVhdGlvbkJ5dGUgJiAweDNGO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGVuZCB1cCBoZXJlLCBpdOKAmXMgbm90IGEgY29udGludWF0aW9uIGJ5dGVcblx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBjb250aW51YXRpb24gYnl0ZScpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGVjb2RlU3ltYm9sKHN0cmljdCkge1xuXHRcdHZhciBieXRlMTtcblx0XHR2YXIgYnl0ZTI7XG5cdFx0dmFyIGJ5dGUzO1xuXHRcdHZhciBieXRlNDtcblx0XHR2YXIgY29kZVBvaW50O1xuXG5cdFx0aWYgKGJ5dGVJbmRleCA+IGJ5dGVDb3VudCkge1xuXHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgYnl0ZSBpbmRleCcpO1xuXHRcdH1cblxuXHRcdGlmIChieXRlSW5kZXggPT0gYnl0ZUNvdW50KSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gUmVhZCBmaXJzdCBieXRlXG5cdFx0Ynl0ZTEgPSBieXRlQXJyYXlbYnl0ZUluZGV4XSAmIDB4RkY7XG5cdFx0Ynl0ZUluZGV4Kys7XG5cblx0XHQvLyAxLWJ5dGUgc2VxdWVuY2UgKG5vIGNvbnRpbnVhdGlvbiBieXRlcylcblx0XHRpZiAoKGJ5dGUxICYgMHg4MCkgPT0gMCkge1xuXHRcdFx0cmV0dXJuIGJ5dGUxO1xuXHRcdH1cblxuXHRcdC8vIDItYnl0ZSBzZXF1ZW5jZVxuXHRcdGlmICgoYnl0ZTEgJiAweEUwKSA9PSAweEMwKSB7XG5cdFx0XHRieXRlMiA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgxRikgPDwgNikgfCBieXRlMjtcblx0XHRcdGlmIChjb2RlUG9pbnQgPj0gMHg4MCkge1xuXHRcdFx0XHRyZXR1cm4gY29kZVBvaW50O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgY29udGludWF0aW9uIGJ5dGUnKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyAzLWJ5dGUgc2VxdWVuY2UgKG1heSBpbmNsdWRlIHVucGFpcmVkIHN1cnJvZ2F0ZXMpXG5cdFx0aWYgKChieXRlMSAmIDB4RjApID09IDB4RTApIHtcblx0XHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGJ5dGUzID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGNvZGVQb2ludCA9ICgoYnl0ZTEgJiAweDBGKSA8PCAxMikgfCAoYnl0ZTIgPDwgNikgfCBieXRlMztcblx0XHRcdGlmIChjb2RlUG9pbnQgPj0gMHgwODAwKSB7XG5cdFx0XHRcdHJldHVybiBjaGVja1NjYWxhclZhbHVlKGNvZGVQb2ludCwgc3RyaWN0KSA/IGNvZGVQb2ludCA6IDB4RkZGRDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gNC1ieXRlIHNlcXVlbmNlXG5cdFx0aWYgKChieXRlMSAmIDB4RjgpID09IDB4RjApIHtcblx0XHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGJ5dGUzID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGJ5dGU0ID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGNvZGVQb2ludCA9ICgoYnl0ZTEgJiAweDA3KSA8PCAweDEyKSB8IChieXRlMiA8PCAweDBDKSB8XG5cdFx0XHRcdChieXRlMyA8PCAweDA2KSB8IGJ5dGU0O1xuXHRcdFx0aWYgKGNvZGVQb2ludCA+PSAweDAxMDAwMCAmJiBjb2RlUG9pbnQgPD0gMHgxMEZGRkYpIHtcblx0XHRcdFx0cmV0dXJuIGNvZGVQb2ludDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBVVEYtOCBkZXRlY3RlZCcpO1xuXHR9XG5cblx0dmFyIGJ5dGVBcnJheTtcblx0dmFyIGJ5dGVDb3VudDtcblx0dmFyIGJ5dGVJbmRleDtcblx0ZnVuY3Rpb24gdXRmOGRlY29kZShieXRlU3RyaW5nLCBvcHRzKSB7XG5cdFx0b3B0cyA9IG9wdHMgfHwge307XG5cdFx0dmFyIHN0cmljdCA9IGZhbHNlICE9PSBvcHRzLnN0cmljdDtcblxuXHRcdGJ5dGVBcnJheSA9IHVjczJkZWNvZGUoYnl0ZVN0cmluZyk7XG5cdFx0Ynl0ZUNvdW50ID0gYnl0ZUFycmF5Lmxlbmd0aDtcblx0XHRieXRlSW5kZXggPSAwO1xuXHRcdHZhciBjb2RlUG9pbnRzID0gW107XG5cdFx0dmFyIHRtcDtcblx0XHR3aGlsZSAoKHRtcCA9IGRlY29kZVN5bWJvbChzdHJpY3QpKSAhPT0gZmFsc2UpIHtcblx0XHRcdGNvZGVQb2ludHMucHVzaCh0bXApO1xuXHRcdH1cblx0XHRyZXR1cm4gdWNzMmVuY29kZShjb2RlUG9pbnRzKTtcblx0fVxuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdHZhciB1dGY4ID0ge1xuXHRcdCd2ZXJzaW9uJzogJzIuMS4yJyxcblx0XHQnZW5jb2RlJzogdXRmOGVuY29kZSxcblx0XHQnZGVjb2RlJzogdXRmOGRlY29kZVxuXHR9O1xuXG5cdC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIHNwZWNpZmljIGNvbmRpdGlvbiBwYXR0ZXJuc1xuXHQvLyBsaWtlIHRoZSBmb2xsb3dpbmc6XG5cdGlmIChcblx0XHR0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJlxuXHRcdGRlZmluZS5hbWRcblx0KSB7XG5cdFx0ZGVmaW5lKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHV0Zjg7XG5cdFx0fSk7XG5cdH1cdGVsc2UgaWYgKGZyZWVFeHBvcnRzICYmICFmcmVlRXhwb3J0cy5ub2RlVHlwZSkge1xuXHRcdGlmIChmcmVlTW9kdWxlKSB7IC8vIGluIE5vZGUuanMgb3IgUmluZ29KUyB2MC44LjArXG5cdFx0XHRmcmVlTW9kdWxlLmV4cG9ydHMgPSB1dGY4O1xuXHRcdH0gZWxzZSB7IC8vIGluIE5hcndoYWwgb3IgUmluZ29KUyB2MC43LjAtXG5cdFx0XHR2YXIgb2JqZWN0ID0ge307XG5cdFx0XHR2YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3QuaGFzT3duUHJvcGVydHk7XG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gdXRmOCkge1xuXHRcdFx0XHRoYXNPd25Qcm9wZXJ0eS5jYWxsKHV0ZjgsIGtleSkgJiYgKGZyZWVFeHBvcnRzW2tleV0gPSB1dGY4W2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHsgLy8gaW4gUmhpbm8gb3IgYSB3ZWIgYnJvd3NlclxuXHRcdHJvb3QudXRmOCA9IHV0Zjg7XG5cdH1cblxufSh0aGlzKSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGFmdGVyXG5cbmZ1bmN0aW9uIGFmdGVyKGNvdW50LCBjYWxsYmFjaywgZXJyX2NiKSB7XG4gICAgdmFyIGJhaWwgPSBmYWxzZVxuICAgIGVycl9jYiA9IGVycl9jYiB8fCBub29wXG4gICAgcHJveHkuY291bnQgPSBjb3VudFxuXG4gICAgcmV0dXJuIChjb3VudCA9PT0gMCkgPyBjYWxsYmFjaygpIDogcHJveHlcblxuICAgIGZ1bmN0aW9uIHByb3h5KGVyciwgcmVzdWx0KSB7XG4gICAgICAgIGlmIChwcm94eS5jb3VudCA8PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FmdGVyIGNhbGxlZCB0b28gbWFueSB0aW1lcycpXG4gICAgICAgIH1cbiAgICAgICAgLS1wcm94eS5jb3VudFxuXG4gICAgICAgIC8vIGFmdGVyIGZpcnN0IGVycm9yLCByZXN0IGFyZSBwYXNzZWQgdG8gZXJyX2NiXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGJhaWwgPSB0cnVlXG4gICAgICAgICAgICBjYWxsYmFjayhlcnIpXG4gICAgICAgICAgICAvLyBmdXR1cmUgZXJyb3IgY2FsbGJhY2tzIHdpbGwgZ28gdG8gZXJyb3IgaGFuZGxlclxuICAgICAgICAgICAgY2FsbGJhY2sgPSBlcnJfY2JcbiAgICAgICAgfSBlbHNlIGlmIChwcm94eS5jb3VudCA9PT0gMCAmJiAhYmFpbCkge1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0KVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBub29wKCkge31cbiIsIi8qKlxuICogQW4gYWJzdHJhY3Rpb24gZm9yIHNsaWNpbmcgYW4gYXJyYXlidWZmZXIgZXZlbiB3aGVuXG4gKiBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgaXMgbm90IHN1cHBvcnRlZFxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcnJheWJ1ZmZlciwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBhcnJheWJ1ZmZlci5ieXRlTGVuZ3RoO1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIGVuZCA9IGVuZCB8fCBieXRlcztcblxuICBpZiAoYXJyYXlidWZmZXIuc2xpY2UpIHsgcmV0dXJuIGFycmF5YnVmZmVyLnNsaWNlKHN0YXJ0LCBlbmQpOyB9XG5cbiAgaWYgKHN0YXJ0IDwgMCkgeyBzdGFydCArPSBieXRlczsgfVxuICBpZiAoZW5kIDwgMCkgeyBlbmQgKz0gYnl0ZXM7IH1cbiAgaWYgKGVuZCA+IGJ5dGVzKSB7IGVuZCA9IGJ5dGVzOyB9XG5cbiAgaWYgKHN0YXJ0ID49IGJ5dGVzIHx8IHN0YXJ0ID49IGVuZCB8fCBieXRlcyA9PT0gMCkge1xuICAgIHJldHVybiBuZXcgQXJyYXlCdWZmZXIoMCk7XG4gIH1cblxuICB2YXIgYWJ2ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpO1xuICB2YXIgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkoZW5kIC0gc3RhcnQpO1xuICBmb3IgKHZhciBpID0gc3RhcnQsIGlpID0gMDsgaSA8IGVuZDsgaSsrLCBpaSsrKSB7XG4gICAgcmVzdWx0W2lpXSA9IGFidltpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0LmJ1ZmZlcjtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayhcbiAgICAgIHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aClcbiAgICApKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuXG4gKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXG4gKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguXG4gKlxuICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cblxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXlcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUICE9PSB1bmRlZmluZWRcbiAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVFxuICA6IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuLypcbiAqIEV4cG9ydCBrTWF4TGVuZ3RoIGFmdGVyIHR5cGVkIGFycmF5IHN1cHBvcnQgaXMgZGV0ZXJtaW5lZC5cbiAqL1xuZXhwb3J0cy5rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpXG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBhcnIuX19wcm90b19fID0ge19fcHJvdG9fXzogVWludDhBcnJheS5wcm90b3R5cGUsIGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfX1cbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MiAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZFxuICAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nICYmIC8vIGNocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YFxuICAgICAgICBhcnIuc3ViYXJyYXkoMSwgMSkuYnl0ZUxlbmd0aCA9PT0gMCAvLyBpZTEwIGhhcyBicm9rZW4gYHN1YmFycmF5YFxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24ga01heExlbmd0aCAoKSB7XG4gIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVFxuICAgID8gMHg3ZmZmZmZmZlxuICAgIDogMHgzZmZmZmZmZlxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKHRoYXQsIGxlbmd0aCkge1xuICBpZiAoa01heExlbmd0aCgpIDwgbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoJylcbiAgfVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICBpZiAodGhhdCA9PT0gbnVsbCkge1xuICAgICAgdGhhdCA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuICAgIH1cbiAgICB0aGF0Lmxlbmd0aCA9IGxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuLy8gVE9ETzogTGVnYWN5LCBub3QgbmVlZGVkIGFueW1vcmUuIFJlbW92ZSBpbiBuZXh0IG1ham9yIHZlcnNpb24uXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGFyci5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gZnJvbSAodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG4gIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJlxuICAgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gICAgLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTdcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywge1xuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2MobnVsbCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlICh0aGF0LCBzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7XG4gICAgICB0aGF0W2ldID0gMFxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHRoYXQsIHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSB0aGF0LndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICB0aGF0ID0gdGhhdC5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGFycmF5LmJ5dGVMZW5ndGggLy8gdGhpcyB0aHJvd3MgaWYgYGFycmF5YCBpcyBub3QgYSB2YWxpZCBBcnJheUJ1ZmZlclxuXG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdvZmZzZXRcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2xlbmd0aFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gYXJyYXlcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpXG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKVxuXG4gICAgaWYgKHRoYXQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhhdFxuICAgIH1cblxuICAgIG9iai5jb3B5KHRoYXQsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gdGhhdFxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikge1xuICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBpc25hbihvYmoubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIDApXG4gICAgICB9XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmopXG4gICAgfVxuXG4gICAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBpc0FycmF5KG9iai5kYXRhKSkge1xuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqLmRhdGEpXG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBrTWF4TGVuZ3RoKClgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0ga01heExlbmd0aCgpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIGtNYXhMZW5ndGgoKS50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIHZhciB4ID0gYS5sZW5ndGhcbiAgdmFyIHkgPSBiLmxlbmd0aFxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIWlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IHN0cmluZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIGFuZCBgaXMtYnVmZmVyYCAoaW4gU2FmYXJpIDUtNykgdG8gZGV0ZWN0XG4vLyBCdWZmZXIgaW5zdGFuY2VzLlxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCB8IDBcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKVxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0ICAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJlxuICAgICAgICB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbIHZhbCBdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKGlzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICAvLyBsZWdhY3kgd3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpIC0gcmVtb3ZlIGluIHYwLjEzXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlICYgKDB4ZmYgPDwgKDggKiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSkpKSA+Pj5cbiAgICAgIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogOFxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmZcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcbiAgdmFyIGlcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmIChjb2RlIDwgMjU2KSB7XG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiB1dGY4VG9CeXRlcyhuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpLnRvU3RyaW5nKCkpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGlzbmFuICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gdmFsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG4iLCJcbi8qKlxuICogR2V0cyB0aGUga2V5cyBmb3IgYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm4ge0FycmF5fSBrZXlzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMgKG9iail7XG4gIHZhciBhcnIgPSBbXTtcbiAgdmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAoaGFzLmNhbGwob2JqLCBpKSkge1xuICAgICAgYXJyLnB1c2goaSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnI7XG59O1xuIiwiLyoqXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzLlxuICovXG5cbnZhciBYTUxIdHRwUmVxdWVzdCA9IHJlcXVpcmUoJ3htbGh0dHByZXF1ZXN0LXNzbCcpO1xudmFyIFBvbGxpbmcgPSByZXF1aXJlKCcuL3BvbGxpbmcnKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29tcG9uZW50LWluaGVyaXQnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2VuZ2luZS5pby1jbGllbnQ6cG9sbGluZy14aHInKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFhIUjtcbm1vZHVsZS5leHBvcnRzLlJlcXVlc3QgPSBSZXF1ZXN0O1xuXG4vKipcbiAqIEVtcHR5IGZ1bmN0aW9uXG4gKi9cblxuZnVuY3Rpb24gZW1wdHkgKCkge31cblxuLyoqXG4gKiBYSFIgUG9sbGluZyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBYSFIgKG9wdHMpIHtcbiAgUG9sbGluZy5jYWxsKHRoaXMsIG9wdHMpO1xuICB0aGlzLnJlcXVlc3RUaW1lb3V0ID0gb3B0cy5yZXF1ZXN0VGltZW91dDtcbiAgdGhpcy5leHRyYUhlYWRlcnMgPSBvcHRzLmV4dHJhSGVhZGVycztcblxuICBpZiAoZ2xvYmFsLmxvY2F0aW9uKSB7XG4gICAgdmFyIGlzU1NMID0gJ2h0dHBzOicgPT09IGxvY2F0aW9uLnByb3RvY29sO1xuICAgIHZhciBwb3J0ID0gbG9jYXRpb24ucG9ydDtcblxuICAgIC8vIHNvbWUgdXNlciBhZ2VudHMgaGF2ZSBlbXB0eSBgbG9jYXRpb24ucG9ydGBcbiAgICBpZiAoIXBvcnQpIHtcbiAgICAgIHBvcnQgPSBpc1NTTCA/IDQ0MyA6IDgwO1xuICAgIH1cblxuICAgIHRoaXMueGQgPSBvcHRzLmhvc3RuYW1lICE9PSBnbG9iYWwubG9jYXRpb24uaG9zdG5hbWUgfHxcbiAgICAgIHBvcnQgIT09IG9wdHMucG9ydDtcbiAgICB0aGlzLnhzID0gb3B0cy5zZWN1cmUgIT09IGlzU1NMO1xuICB9XG59XG5cbi8qKlxuICogSW5oZXJpdHMgZnJvbSBQb2xsaW5nLlxuICovXG5cbmluaGVyaXQoWEhSLCBQb2xsaW5nKTtcblxuLyoqXG4gKiBYSFIgc3VwcG9ydHMgYmluYXJ5XG4gKi9cblxuWEhSLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeSA9IHRydWU7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHJlcXVlc3QuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuWEhSLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIG9wdHMudXJpID0gdGhpcy51cmkoKTtcbiAgb3B0cy54ZCA9IHRoaXMueGQ7XG4gIG9wdHMueHMgPSB0aGlzLnhzO1xuICBvcHRzLmFnZW50ID0gdGhpcy5hZ2VudCB8fCBmYWxzZTtcbiAgb3B0cy5zdXBwb3J0c0JpbmFyeSA9IHRoaXMuc3VwcG9ydHNCaW5hcnk7XG4gIG9wdHMuZW5hYmxlc1hEUiA9IHRoaXMuZW5hYmxlc1hEUjtcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgb3B0cy5wZnggPSB0aGlzLnBmeDtcbiAgb3B0cy5rZXkgPSB0aGlzLmtleTtcbiAgb3B0cy5wYXNzcGhyYXNlID0gdGhpcy5wYXNzcGhyYXNlO1xuICBvcHRzLmNlcnQgPSB0aGlzLmNlcnQ7XG4gIG9wdHMuY2EgPSB0aGlzLmNhO1xuICBvcHRzLmNpcGhlcnMgPSB0aGlzLmNpcGhlcnM7XG4gIG9wdHMucmVqZWN0VW5hdXRob3JpemVkID0gdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gIG9wdHMucmVxdWVzdFRpbWVvdXQgPSB0aGlzLnJlcXVlc3RUaW1lb3V0O1xuXG4gIC8vIG90aGVyIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIG9wdHMuZXh0cmFIZWFkZXJzID0gdGhpcy5leHRyYUhlYWRlcnM7XG5cbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KG9wdHMpO1xufTtcblxuLyoqXG4gKiBTZW5kcyBkYXRhLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhIHRvIHNlbmQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsZWQgdXBvbiBmbHVzaC5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblhIUi5wcm90b3R5cGUuZG9Xcml0ZSA9IGZ1bmN0aW9uIChkYXRhLCBmbikge1xuICB2YXIgaXNCaW5hcnkgPSB0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycgJiYgZGF0YSAhPT0gdW5kZWZpbmVkO1xuICB2YXIgcmVxID0gdGhpcy5yZXF1ZXN0KHsgbWV0aG9kOiAnUE9TVCcsIGRhdGE6IGRhdGEsIGlzQmluYXJ5OiBpc0JpbmFyeSB9KTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICByZXEub24oJ3N1Y2Nlc3MnLCBmbik7XG4gIHJlcS5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgc2VsZi5vbkVycm9yKCd4aHIgcG9zdCBlcnJvcicsIGVycik7XG4gIH0pO1xuICB0aGlzLnNlbmRYaHIgPSByZXE7XG59O1xuXG4vKipcbiAqIFN0YXJ0cyBhIHBvbGwgY3ljbGUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuWEhSLnByb3RvdHlwZS5kb1BvbGwgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCd4aHIgcG9sbCcpO1xuICB2YXIgcmVxID0gdGhpcy5yZXF1ZXN0KCk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgcmVxLm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBzZWxmLm9uRGF0YShkYXRhKTtcbiAgfSk7XG4gIHJlcS5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgc2VsZi5vbkVycm9yKCd4aHIgcG9sbCBlcnJvcicsIGVycik7XG4gIH0pO1xuICB0aGlzLnBvbGxYaHIgPSByZXE7XG59O1xuXG4vKipcbiAqIFJlcXVlc3QgY29uc3RydWN0b3JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBSZXF1ZXN0IChvcHRzKSB7XG4gIHRoaXMubWV0aG9kID0gb3B0cy5tZXRob2QgfHwgJ0dFVCc7XG4gIHRoaXMudXJpID0gb3B0cy51cmk7XG4gIHRoaXMueGQgPSAhIW9wdHMueGQ7XG4gIHRoaXMueHMgPSAhIW9wdHMueHM7XG4gIHRoaXMuYXN5bmMgPSBmYWxzZSAhPT0gb3B0cy5hc3luYztcbiAgdGhpcy5kYXRhID0gdW5kZWZpbmVkICE9PSBvcHRzLmRhdGEgPyBvcHRzLmRhdGEgOiBudWxsO1xuICB0aGlzLmFnZW50ID0gb3B0cy5hZ2VudDtcbiAgdGhpcy5pc0JpbmFyeSA9IG9wdHMuaXNCaW5hcnk7XG4gIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBvcHRzLnN1cHBvcnRzQmluYXJ5O1xuICB0aGlzLmVuYWJsZXNYRFIgPSBvcHRzLmVuYWJsZXNYRFI7XG4gIHRoaXMucmVxdWVzdFRpbWVvdXQgPSBvcHRzLnJlcXVlc3RUaW1lb3V0O1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLnBmeCA9IG9wdHMucGZ4O1xuICB0aGlzLmtleSA9IG9wdHMua2V5O1xuICB0aGlzLnBhc3NwaHJhc2UgPSBvcHRzLnBhc3NwaHJhc2U7XG4gIHRoaXMuY2VydCA9IG9wdHMuY2VydDtcbiAgdGhpcy5jYSA9IG9wdHMuY2E7XG4gIHRoaXMuY2lwaGVycyA9IG9wdHMuY2lwaGVycztcbiAgdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQgPSBvcHRzLnJlamVjdFVuYXV0aG9yaXplZDtcblxuICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuXG4gIHRoaXMuY3JlYXRlKCk7XG59XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFJlcXVlc3QucHJvdG90eXBlKTtcblxuLyoqXG4gKiBDcmVhdGVzIHRoZSBYSFIgb2JqZWN0IGFuZCBzZW5kcyB0aGUgcmVxdWVzdC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBvcHRzID0geyBhZ2VudDogdGhpcy5hZ2VudCwgeGRvbWFpbjogdGhpcy54ZCwgeHNjaGVtZTogdGhpcy54cywgZW5hYmxlc1hEUjogdGhpcy5lbmFibGVzWERSIH07XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIG9wdHMucGZ4ID0gdGhpcy5wZng7XG4gIG9wdHMua2V5ID0gdGhpcy5rZXk7XG4gIG9wdHMucGFzc3BocmFzZSA9IHRoaXMucGFzc3BocmFzZTtcbiAgb3B0cy5jZXJ0ID0gdGhpcy5jZXJ0O1xuICBvcHRzLmNhID0gdGhpcy5jYTtcbiAgb3B0cy5jaXBoZXJzID0gdGhpcy5jaXBoZXJzO1xuICBvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9IHRoaXMucmVqZWN0VW5hdXRob3JpemVkO1xuXG4gIHZhciB4aHIgPSB0aGlzLnhociA9IG5ldyBYTUxIdHRwUmVxdWVzdChvcHRzKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRyeSB7XG4gICAgZGVidWcoJ3hociBvcGVuICVzOiAlcycsIHRoaXMubWV0aG9kLCB0aGlzLnVyaSk7XG4gICAgeGhyLm9wZW4odGhpcy5tZXRob2QsIHRoaXMudXJpLCB0aGlzLmFzeW5jKTtcbiAgICB0cnkge1xuICAgICAgaWYgKHRoaXMuZXh0cmFIZWFkZXJzKSB7XG4gICAgICAgIHhoci5zZXREaXNhYmxlSGVhZGVyQ2hlY2sgJiYgeGhyLnNldERpc2FibGVIZWFkZXJDaGVjayh0cnVlKTtcbiAgICAgICAgZm9yICh2YXIgaSBpbiB0aGlzLmV4dHJhSGVhZGVycykge1xuICAgICAgICAgIGlmICh0aGlzLmV4dHJhSGVhZGVycy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoaSwgdGhpcy5leHRyYUhlYWRlcnNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICBpZiAoJ1BPU1QnID09PSB0aGlzLm1ldGhvZCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHRoaXMuaXNCaW5hcnkpIHtcbiAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04Jyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCAnKi8qJyk7XG4gICAgfSBjYXRjaCAoZSkge31cblxuICAgIC8vIGllNiBjaGVja1xuICAgIGlmICgnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlcXVlc3RUaW1lb3V0KSB7XG4gICAgICB4aHIudGltZW91dCA9IHRoaXMucmVxdWVzdFRpbWVvdXQ7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaGFzWERSKCkpIHtcbiAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYub25Mb2FkKCk7XG4gICAgICB9O1xuICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYub25FcnJvcih4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gMikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgY29udGVudFR5cGUgPSB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ0NvbnRlbnQtVHlwZScpO1xuICAgICAgICAgICAgaWYgKHNlbGYuc3VwcG9ydHNCaW5hcnkgJiYgY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nKSB7XG4gICAgICAgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKDQgIT09IHhoci5yZWFkeVN0YXRlKSByZXR1cm47XG4gICAgICAgIGlmICgyMDAgPT09IHhoci5zdGF0dXMgfHwgMTIyMyA9PT0geGhyLnN0YXR1cykge1xuICAgICAgICAgIHNlbGYub25Mb2FkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbWFrZSBzdXJlIHRoZSBgZXJyb3JgIGV2ZW50IGhhbmRsZXIgdGhhdCdzIHVzZXItc2V0XG4gICAgICAgICAgLy8gZG9lcyBub3QgdGhyb3cgaW4gdGhlIHNhbWUgdGljayBhbmQgZ2V0cyBjYXVnaHQgaGVyZVxuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5vbkVycm9yKHhoci5zdGF0dXMpO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGRlYnVnKCd4aHIgZGF0YSAlcycsIHRoaXMuZGF0YSk7XG4gICAgeGhyLnNlbmQodGhpcy5kYXRhKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIE5lZWQgdG8gZGVmZXIgc2luY2UgLmNyZWF0ZSgpIGlzIGNhbGxlZCBkaXJlY3RseSBmaHJvbSB0aGUgY29uc3RydWN0b3JcbiAgICAvLyBhbmQgdGh1cyB0aGUgJ2Vycm9yJyBldmVudCBjYW4gb25seSBiZSBvbmx5IGJvdW5kICphZnRlciogdGhpcyBleGNlcHRpb25cbiAgICAvLyBvY2N1cnMuICBUaGVyZWZvcmUsIGFsc28sIHdlIGNhbm5vdCB0aHJvdyBoZXJlIGF0IGFsbC5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYub25FcnJvcihlKTtcbiAgICB9LCAwKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZ2xvYmFsLmRvY3VtZW50KSB7XG4gICAgdGhpcy5pbmRleCA9IFJlcXVlc3QucmVxdWVzdHNDb3VudCsrO1xuICAgIFJlcXVlc3QucmVxdWVzdHNbdGhpcy5pbmRleF0gPSB0aGlzO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHN1Y2Nlc3NmdWwgcmVzcG9uc2UuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUub25TdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQoJ3N1Y2Nlc3MnKTtcbiAgdGhpcy5jbGVhbnVwKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCBpZiB3ZSBoYXZlIGRhdGEuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5lbWl0KCdkYXRhJywgZGF0YSk7XG4gIHRoaXMub25TdWNjZXNzKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVycm9yLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB0aGlzLmNsZWFudXAodHJ1ZSk7XG59O1xuXG4vKipcbiAqIENsZWFucyB1cCBob3VzZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gKGZyb21FcnJvcikge1xuICBpZiAoJ3VuZGVmaW5lZCcgPT09IHR5cGVvZiB0aGlzLnhociB8fCBudWxsID09PSB0aGlzLnhocikge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyB4bWxodHRwcmVxdWVzdFxuICBpZiAodGhpcy5oYXNYRFIoKSkge1xuICAgIHRoaXMueGhyLm9ubG9hZCA9IHRoaXMueGhyLm9uZXJyb3IgPSBlbXB0eTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBlbXB0eTtcbiAgfVxuXG4gIGlmIChmcm9tRXJyb3IpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy54aHIuYWJvcnQoKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG5cbiAgaWYgKGdsb2JhbC5kb2N1bWVudCkge1xuICAgIGRlbGV0ZSBSZXF1ZXN0LnJlcXVlc3RzW3RoaXMuaW5kZXhdO1xuICB9XG5cbiAgdGhpcy54aHIgPSBudWxsO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBsb2FkLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uTG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGRhdGE7XG4gIHRyeSB7XG4gICAgdmFyIGNvbnRlbnRUeXBlO1xuICAgIHRyeSB7XG4gICAgICBjb250ZW50VHlwZSA9IHRoaXMueGhyLmdldFJlc3BvbnNlSGVhZGVyKCdDb250ZW50LVR5cGUnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIGlmIChjb250ZW50VHlwZSA9PT0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpIHtcbiAgICAgIGRhdGEgPSB0aGlzLnhoci5yZXNwb25zZSB8fCB0aGlzLnhoci5yZXNwb25zZVRleHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSB0aGlzLnhoci5yZXNwb25zZVRleHQ7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgdGhpcy5vbkVycm9yKGUpO1xuICB9XG4gIGlmIChudWxsICE9IGRhdGEpIHtcbiAgICB0aGlzLm9uRGF0YShkYXRhKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDaGVjayBpZiBpdCBoYXMgWERvbWFpblJlcXVlc3QuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuaGFzWERSID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBnbG9iYWwuWERvbWFpblJlcXVlc3QgJiYgIXRoaXMueHMgJiYgdGhpcy5lbmFibGVzWERSO1xufTtcblxuLyoqXG4gKiBBYm9ydHMgdGhlIHJlcXVlc3QuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jbGVhbnVwKCk7XG59O1xuXG4vKipcbiAqIEFib3J0cyBwZW5kaW5nIHJlcXVlc3RzIHdoZW4gdW5sb2FkaW5nIHRoZSB3aW5kb3cuIFRoaXMgaXMgbmVlZGVkIHRvIHByZXZlbnRcbiAqIG1lbW9yeSBsZWFrcyAoZS5nLiB3aGVuIHVzaW5nIElFKSBhbmQgdG8gZW5zdXJlIHRoYXQgbm8gc3B1cmlvdXMgZXJyb3IgaXNcbiAqIGVtaXR0ZWQuXG4gKi9cblxuUmVxdWVzdC5yZXF1ZXN0c0NvdW50ID0gMDtcblJlcXVlc3QucmVxdWVzdHMgPSB7fTtcblxuaWYgKGdsb2JhbC5kb2N1bWVudCkge1xuICBpZiAoZ2xvYmFsLmF0dGFjaEV2ZW50KSB7XG4gICAgZ2xvYmFsLmF0dGFjaEV2ZW50KCdvbnVubG9hZCcsIHVubG9hZEhhbmRsZXIpO1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIHVubG9hZEhhbmRsZXIsIGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1bmxvYWRIYW5kbGVyICgpIHtcbiAgZm9yICh2YXIgaSBpbiBSZXF1ZXN0LnJlcXVlc3RzKSB7XG4gICAgaWYgKFJlcXVlc3QucmVxdWVzdHMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgIFJlcXVlc3QucmVxdWVzdHNbaV0uYWJvcnQoKTtcbiAgICB9XG4gIH1cbn1cbiIsIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqXG4gKiBMb2dpYyBib3Jyb3dlZCBmcm9tIE1vZGVybml6cjpcbiAqXG4gKiAgIC0gaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2NvcnMuanNcbiAqL1xuXG50cnkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAnd2l0aENyZWRlbnRpYWxzJyBpbiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbn0gY2F0Y2ggKGVycikge1xuICAvLyBpZiBYTUxIdHRwIHN1cHBvcnQgaXMgZGlzYWJsZWQgaW4gSUUgdGhlbiBpdCB3aWxsIHRocm93XG4gIC8vIHdoZW4gdHJ5aW5nIHRvIGNyZWF0ZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xufVxuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciB0cmFuc3BvcnRzID0gcmVxdWlyZSgnLi90cmFuc3BvcnRzL2luZGV4Jyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdlbmdpbmUuaW8tY2xpZW50OnNvY2tldCcpO1xudmFyIGluZGV4ID0gcmVxdWlyZSgnaW5kZXhvZicpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcbnZhciBwYXJzZXVyaSA9IHJlcXVpcmUoJ3BhcnNldXJpJyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNvY2tldDtcblxuLyoqXG4gKiBTb2NrZXQgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSB1cmkgb3Igb3B0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gU29ja2V0ICh1cmksIG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNvY2tldCkpIHJldHVybiBuZXcgU29ja2V0KHVyaSwgb3B0cyk7XG5cbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgaWYgKHVyaSAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIHVyaSkge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gbnVsbDtcbiAgfVxuXG4gIGlmICh1cmkpIHtcbiAgICB1cmkgPSBwYXJzZXVyaSh1cmkpO1xuICAgIG9wdHMuaG9zdG5hbWUgPSB1cmkuaG9zdDtcbiAgICBvcHRzLnNlY3VyZSA9IHVyaS5wcm90b2NvbCA9PT0gJ2h0dHBzJyB8fCB1cmkucHJvdG9jb2wgPT09ICd3c3MnO1xuICAgIG9wdHMucG9ydCA9IHVyaS5wb3J0O1xuICAgIGlmICh1cmkucXVlcnkpIG9wdHMucXVlcnkgPSB1cmkucXVlcnk7XG4gIH0gZWxzZSBpZiAob3B0cy5ob3N0KSB7XG4gICAgb3B0cy5ob3N0bmFtZSA9IHBhcnNldXJpKG9wdHMuaG9zdCkuaG9zdDtcbiAgfVxuXG4gIHRoaXMuc2VjdXJlID0gbnVsbCAhPSBvcHRzLnNlY3VyZSA/IG9wdHMuc2VjdXJlXG4gICAgOiAoZ2xvYmFsLmxvY2F0aW9uICYmICdodHRwczonID09PSBsb2NhdGlvbi5wcm90b2NvbCk7XG5cbiAgaWYgKG9wdHMuaG9zdG5hbWUgJiYgIW9wdHMucG9ydCkge1xuICAgIC8vIGlmIG5vIHBvcnQgaXMgc3BlY2lmaWVkIG1hbnVhbGx5LCB1c2UgdGhlIHByb3RvY29sIGRlZmF1bHRcbiAgICBvcHRzLnBvcnQgPSB0aGlzLnNlY3VyZSA/ICc0NDMnIDogJzgwJztcbiAgfVxuXG4gIHRoaXMuYWdlbnQgPSBvcHRzLmFnZW50IHx8IGZhbHNlO1xuICB0aGlzLmhvc3RuYW1lID0gb3B0cy5ob3N0bmFtZSB8fFxuICAgIChnbG9iYWwubG9jYXRpb24gPyBsb2NhdGlvbi5ob3N0bmFtZSA6ICdsb2NhbGhvc3QnKTtcbiAgdGhpcy5wb3J0ID0gb3B0cy5wb3J0IHx8IChnbG9iYWwubG9jYXRpb24gJiYgbG9jYXRpb24ucG9ydFxuICAgICAgPyBsb2NhdGlvbi5wb3J0XG4gICAgICA6ICh0aGlzLnNlY3VyZSA/IDQ0MyA6IDgwKSk7XG4gIHRoaXMucXVlcnkgPSBvcHRzLnF1ZXJ5IHx8IHt9O1xuICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB0aGlzLnF1ZXJ5KSB0aGlzLnF1ZXJ5ID0gcGFyc2Vxcy5kZWNvZGUodGhpcy5xdWVyeSk7XG4gIHRoaXMudXBncmFkZSA9IGZhbHNlICE9PSBvcHRzLnVwZ3JhZGU7XG4gIHRoaXMucGF0aCA9IChvcHRzLnBhdGggfHwgJy9lbmdpbmUuaW8nKS5yZXBsYWNlKC9cXC8kLywgJycpICsgJy8nO1xuICB0aGlzLmZvcmNlSlNPTlAgPSAhIW9wdHMuZm9yY2VKU09OUDtcbiAgdGhpcy5qc29ucCA9IGZhbHNlICE9PSBvcHRzLmpzb25wO1xuICB0aGlzLmZvcmNlQmFzZTY0ID0gISFvcHRzLmZvcmNlQmFzZTY0O1xuICB0aGlzLmVuYWJsZXNYRFIgPSAhIW9wdHMuZW5hYmxlc1hEUjtcbiAgdGhpcy50aW1lc3RhbXBQYXJhbSA9IG9wdHMudGltZXN0YW1wUGFyYW0gfHwgJ3QnO1xuICB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzID0gb3B0cy50aW1lc3RhbXBSZXF1ZXN0cztcbiAgdGhpcy50cmFuc3BvcnRzID0gb3B0cy50cmFuc3BvcnRzIHx8IFsncG9sbGluZycsICd3ZWJzb2NrZXQnXTtcbiAgdGhpcy50cmFuc3BvcnRPcHRpb25zID0gb3B0cy50cmFuc3BvcnRPcHRpb25zIHx8IHt9O1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnJztcbiAgdGhpcy53cml0ZUJ1ZmZlciA9IFtdO1xuICB0aGlzLnByZXZCdWZmZXJMZW4gPSAwO1xuICB0aGlzLnBvbGljeVBvcnQgPSBvcHRzLnBvbGljeVBvcnQgfHwgODQzO1xuICB0aGlzLnJlbWVtYmVyVXBncmFkZSA9IG9wdHMucmVtZW1iZXJVcGdyYWRlIHx8IGZhbHNlO1xuICB0aGlzLmJpbmFyeVR5cGUgPSBudWxsO1xuICB0aGlzLm9ubHlCaW5hcnlVcGdyYWRlcyA9IG9wdHMub25seUJpbmFyeVVwZ3JhZGVzO1xuICB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlID0gZmFsc2UgIT09IG9wdHMucGVyTWVzc2FnZURlZmxhdGUgPyAob3B0cy5wZXJNZXNzYWdlRGVmbGF0ZSB8fCB7fSkgOiBmYWxzZTtcblxuICBpZiAodHJ1ZSA9PT0gdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSkgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSA9IHt9O1xuICBpZiAodGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSAmJiBudWxsID09IHRoaXMucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkKSB7XG4gICAgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZS50aHJlc2hvbGQgPSAxMDI0O1xuICB9XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMucGZ4ID0gb3B0cy5wZnggfHwgbnVsbDtcbiAgdGhpcy5rZXkgPSBvcHRzLmtleSB8fCBudWxsO1xuICB0aGlzLnBhc3NwaHJhc2UgPSBvcHRzLnBhc3NwaHJhc2UgfHwgbnVsbDtcbiAgdGhpcy5jZXJ0ID0gb3B0cy5jZXJ0IHx8IG51bGw7XG4gIHRoaXMuY2EgPSBvcHRzLmNhIHx8IG51bGw7XG4gIHRoaXMuY2lwaGVycyA9IG9wdHMuY2lwaGVycyB8fCBudWxsO1xuICB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdHMucmVqZWN0VW5hdXRob3JpemVkID09PSB1bmRlZmluZWQgPyB0cnVlIDogb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gIHRoaXMuZm9yY2VOb2RlID0gISFvcHRzLmZvcmNlTm9kZTtcblxuICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT09ICdvYmplY3QnICYmIGdsb2JhbDtcbiAgaWYgKGZyZWVHbG9iYWwuZ2xvYmFsID09PSBmcmVlR2xvYmFsKSB7XG4gICAgaWYgKG9wdHMuZXh0cmFIZWFkZXJzICYmIE9iamVjdC5rZXlzKG9wdHMuZXh0cmFIZWFkZXJzKS5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuICAgIH1cblxuICAgIGlmIChvcHRzLmxvY2FsQWRkcmVzcykge1xuICAgICAgdGhpcy5sb2NhbEFkZHJlc3MgPSBvcHRzLmxvY2FsQWRkcmVzcztcbiAgICB9XG4gIH1cblxuICAvLyBzZXQgb24gaGFuZHNoYWtlXG4gIHRoaXMuaWQgPSBudWxsO1xuICB0aGlzLnVwZ3JhZGVzID0gbnVsbDtcbiAgdGhpcy5waW5nSW50ZXJ2YWwgPSBudWxsO1xuICB0aGlzLnBpbmdUaW1lb3V0ID0gbnVsbDtcblxuICAvLyBzZXQgb24gaGVhcnRiZWF0XG4gIHRoaXMucGluZ0ludGVydmFsVGltZXIgPSBudWxsO1xuICB0aGlzLnBpbmdUaW1lb3V0VGltZXIgPSBudWxsO1xuXG4gIHRoaXMub3BlbigpO1xufVxuXG5Tb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFNvY2tldC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG9jb2wgPSBwYXJzZXIucHJvdG9jb2w7IC8vIHRoaXMgaXMgYW4gaW50XG5cbi8qKlxuICogRXhwb3NlIGRlcHMgZm9yIGxlZ2FjeSBjb21wYXRpYmlsaXR5XG4gKiBhbmQgc3RhbmRhbG9uZSBicm93c2VyIGFjY2Vzcy5cbiAqL1xuXG5Tb2NrZXQuU29ja2V0ID0gU29ja2V0O1xuU29ja2V0LlRyYW5zcG9ydCA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0Jyk7XG5Tb2NrZXQudHJhbnNwb3J0cyA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0cy9pbmRleCcpO1xuU29ja2V0LnBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcblxuLyoqXG4gKiBDcmVhdGVzIHRyYW5zcG9ydCBvZiB0aGUgZ2l2ZW4gdHlwZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNwb3J0IG5hbWVcbiAqIEByZXR1cm4ge1RyYW5zcG9ydH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuY3JlYXRlVHJhbnNwb3J0ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVidWcoJ2NyZWF0aW5nIHRyYW5zcG9ydCBcIiVzXCInLCBuYW1lKTtcbiAgdmFyIHF1ZXJ5ID0gY2xvbmUodGhpcy5xdWVyeSk7XG5cbiAgLy8gYXBwZW5kIGVuZ2luZS5pbyBwcm90b2NvbCBpZGVudGlmaWVyXG4gIHF1ZXJ5LkVJTyA9IHBhcnNlci5wcm90b2NvbDtcblxuICAvLyB0cmFuc3BvcnQgbmFtZVxuICBxdWVyeS50cmFuc3BvcnQgPSBuYW1lO1xuXG4gIC8vIHBlci10cmFuc3BvcnQgb3B0aW9uc1xuICB2YXIgb3B0aW9ucyA9IHRoaXMudHJhbnNwb3J0T3B0aW9uc1tuYW1lXSB8fCB7fTtcblxuICAvLyBzZXNzaW9uIGlkIGlmIHdlIGFscmVhZHkgaGF2ZSBvbmVcbiAgaWYgKHRoaXMuaWQpIHF1ZXJ5LnNpZCA9IHRoaXMuaWQ7XG5cbiAgdmFyIHRyYW5zcG9ydCA9IG5ldyB0cmFuc3BvcnRzW25hbWVdKHtcbiAgICBxdWVyeTogcXVlcnksXG4gICAgc29ja2V0OiB0aGlzLFxuICAgIGFnZW50OiBvcHRpb25zLmFnZW50IHx8IHRoaXMuYWdlbnQsXG4gICAgaG9zdG5hbWU6IG9wdGlvbnMuaG9zdG5hbWUgfHwgdGhpcy5ob3N0bmFtZSxcbiAgICBwb3J0OiBvcHRpb25zLnBvcnQgfHwgdGhpcy5wb3J0LFxuICAgIHNlY3VyZTogb3B0aW9ucy5zZWN1cmUgfHwgdGhpcy5zZWN1cmUsXG4gICAgcGF0aDogb3B0aW9ucy5wYXRoIHx8IHRoaXMucGF0aCxcbiAgICBmb3JjZUpTT05QOiBvcHRpb25zLmZvcmNlSlNPTlAgfHwgdGhpcy5mb3JjZUpTT05QLFxuICAgIGpzb25wOiBvcHRpb25zLmpzb25wIHx8IHRoaXMuanNvbnAsXG4gICAgZm9yY2VCYXNlNjQ6IG9wdGlvbnMuZm9yY2VCYXNlNjQgfHwgdGhpcy5mb3JjZUJhc2U2NCxcbiAgICBlbmFibGVzWERSOiBvcHRpb25zLmVuYWJsZXNYRFIgfHwgdGhpcy5lbmFibGVzWERSLFxuICAgIHRpbWVzdGFtcFJlcXVlc3RzOiBvcHRpb25zLnRpbWVzdGFtcFJlcXVlc3RzIHx8IHRoaXMudGltZXN0YW1wUmVxdWVzdHMsXG4gICAgdGltZXN0YW1wUGFyYW06IG9wdGlvbnMudGltZXN0YW1wUGFyYW0gfHwgdGhpcy50aW1lc3RhbXBQYXJhbSxcbiAgICBwb2xpY3lQb3J0OiBvcHRpb25zLnBvbGljeVBvcnQgfHwgdGhpcy5wb2xpY3lQb3J0LFxuICAgIHBmeDogb3B0aW9ucy5wZnggfHwgdGhpcy5wZngsXG4gICAga2V5OiBvcHRpb25zLmtleSB8fCB0aGlzLmtleSxcbiAgICBwYXNzcGhyYXNlOiBvcHRpb25zLnBhc3NwaHJhc2UgfHwgdGhpcy5wYXNzcGhyYXNlLFxuICAgIGNlcnQ6IG9wdGlvbnMuY2VydCB8fCB0aGlzLmNlcnQsXG4gICAgY2E6IG9wdGlvbnMuY2EgfHwgdGhpcy5jYSxcbiAgICBjaXBoZXJzOiBvcHRpb25zLmNpcGhlcnMgfHwgdGhpcy5jaXBoZXJzLFxuICAgIHJlamVjdFVuYXV0aG9yaXplZDogb3B0aW9ucy5yZWplY3RVbmF1dGhvcml6ZWQgfHwgdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQsXG4gICAgcGVyTWVzc2FnZURlZmxhdGU6IG9wdGlvbnMucGVyTWVzc2FnZURlZmxhdGUgfHwgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSxcbiAgICBleHRyYUhlYWRlcnM6IG9wdGlvbnMuZXh0cmFIZWFkZXJzIHx8IHRoaXMuZXh0cmFIZWFkZXJzLFxuICAgIGZvcmNlTm9kZTogb3B0aW9ucy5mb3JjZU5vZGUgfHwgdGhpcy5mb3JjZU5vZGUsXG4gICAgbG9jYWxBZGRyZXNzOiBvcHRpb25zLmxvY2FsQWRkcmVzcyB8fCB0aGlzLmxvY2FsQWRkcmVzcyxcbiAgICByZXF1ZXN0VGltZW91dDogb3B0aW9ucy5yZXF1ZXN0VGltZW91dCB8fCB0aGlzLnJlcXVlc3RUaW1lb3V0LFxuICAgIHByb3RvY29sczogb3B0aW9ucy5wcm90b2NvbHMgfHwgdm9pZCAoMClcbiAgfSk7XG5cbiAgcmV0dXJuIHRyYW5zcG9ydDtcbn07XG5cbmZ1bmN0aW9uIGNsb25lIChvYmopIHtcbiAgdmFyIG8gPSB7fTtcbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICBvW2ldID0gb2JqW2ldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbztcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplcyB0cmFuc3BvcnQgdG8gdXNlIGFuZCBzdGFydHMgcHJvYmUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblNvY2tldC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRyYW5zcG9ydDtcbiAgaWYgKHRoaXMucmVtZW1iZXJVcGdyYWRlICYmIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgJiYgdGhpcy50cmFuc3BvcnRzLmluZGV4T2YoJ3dlYnNvY2tldCcpICE9PSAtMSkge1xuICAgIHRyYW5zcG9ydCA9ICd3ZWJzb2NrZXQnO1xuICB9IGVsc2UgaWYgKDAgPT09IHRoaXMudHJhbnNwb3J0cy5sZW5ndGgpIHtcbiAgICAvLyBFbWl0IGVycm9yIG9uIG5leHQgdGljayBzbyBpdCBjYW4gYmUgbGlzdGVuZWQgdG9cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgJ05vIHRyYW5zcG9ydHMgYXZhaWxhYmxlJyk7XG4gICAgfSwgMCk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2Uge1xuICAgIHRyYW5zcG9ydCA9IHRoaXMudHJhbnNwb3J0c1swXTtcbiAgfVxuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3BlbmluZyc7XG5cbiAgLy8gUmV0cnkgd2l0aCB0aGUgbmV4dCB0cmFuc3BvcnQgaWYgdGhlIHRyYW5zcG9ydCBpcyBkaXNhYmxlZCAoanNvbnA6IGZhbHNlKVxuICB0cnkge1xuICAgIHRyYW5zcG9ydCA9IHRoaXMuY3JlYXRlVHJhbnNwb3J0KHRyYW5zcG9ydCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aGlzLnRyYW5zcG9ydHMuc2hpZnQoKTtcbiAgICB0aGlzLm9wZW4oKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0cmFuc3BvcnQub3BlbigpO1xuICB0aGlzLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjdXJyZW50IHRyYW5zcG9ydC4gRGlzYWJsZXMgdGhlIGV4aXN0aW5nIG9uZSAoaWYgYW55KS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnNldFRyYW5zcG9ydCA9IGZ1bmN0aW9uICh0cmFuc3BvcnQpIHtcbiAgZGVidWcoJ3NldHRpbmcgdHJhbnNwb3J0ICVzJywgdHJhbnNwb3J0Lm5hbWUpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgaWYgKHRoaXMudHJhbnNwb3J0KSB7XG4gICAgZGVidWcoJ2NsZWFyaW5nIGV4aXN0aW5nIHRyYW5zcG9ydCAlcycsIHRoaXMudHJhbnNwb3J0Lm5hbWUpO1xuICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICB9XG5cbiAgLy8gc2V0IHVwIHRyYW5zcG9ydFxuICB0aGlzLnRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcblxuICAvLyBzZXQgdXAgdHJhbnNwb3J0IGxpc3RlbmVyc1xuICB0cmFuc3BvcnRcbiAgLm9uKCdkcmFpbicsIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uRHJhaW4oKTtcbiAgfSlcbiAgLm9uKCdwYWNrZXQnLCBmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgc2VsZi5vblBhY2tldChwYWNrZXQpO1xuICB9KVxuICAub24oJ2Vycm9yJywgZnVuY3Rpb24gKGUpIHtcbiAgICBzZWxmLm9uRXJyb3IoZSk7XG4gIH0pXG4gIC5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbkNsb3NlKCd0cmFuc3BvcnQgY2xvc2UnKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFByb2JlcyBhIHRyYW5zcG9ydC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNwb3J0IG5hbWVcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUucHJvYmUgPSBmdW5jdGlvbiAobmFtZSkge1xuICBkZWJ1ZygncHJvYmluZyB0cmFuc3BvcnQgXCIlc1wiJywgbmFtZSk7XG4gIHZhciB0cmFuc3BvcnQgPSB0aGlzLmNyZWF0ZVRyYW5zcG9ydChuYW1lLCB7IHByb2JlOiAxIH0pO1xuICB2YXIgZmFpbGVkID0gZmFsc2U7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gb25UcmFuc3BvcnRPcGVuICgpIHtcbiAgICBpZiAoc2VsZi5vbmx5QmluYXJ5VXBncmFkZXMpIHtcbiAgICAgIHZhciB1cGdyYWRlTG9zZXNCaW5hcnkgPSAhdGhpcy5zdXBwb3J0c0JpbmFyeSAmJiBzZWxmLnRyYW5zcG9ydC5zdXBwb3J0c0JpbmFyeTtcbiAgICAgIGZhaWxlZCA9IGZhaWxlZCB8fCB1cGdyYWRlTG9zZXNCaW5hcnk7XG4gICAgfVxuICAgIGlmIChmYWlsZWQpIHJldHVybjtcblxuICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIG9wZW5lZCcsIG5hbWUpO1xuICAgIHRyYW5zcG9ydC5zZW5kKFt7IHR5cGU6ICdwaW5nJywgZGF0YTogJ3Byb2JlJyB9XSk7XG4gICAgdHJhbnNwb3J0Lm9uY2UoJ3BhY2tldCcsIGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgIGlmIChmYWlsZWQpIHJldHVybjtcbiAgICAgIGlmICgncG9uZycgPT09IG1zZy50eXBlICYmICdwcm9iZScgPT09IG1zZy5kYXRhKSB7XG4gICAgICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIHBvbmcnLCBuYW1lKTtcbiAgICAgICAgc2VsZi51cGdyYWRpbmcgPSB0cnVlO1xuICAgICAgICBzZWxmLmVtaXQoJ3VwZ3JhZGluZycsIHRyYW5zcG9ydCk7XG4gICAgICAgIGlmICghdHJhbnNwb3J0KSByZXR1cm47XG4gICAgICAgIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSAnd2Vic29ja2V0JyA9PT0gdHJhbnNwb3J0Lm5hbWU7XG5cbiAgICAgICAgZGVidWcoJ3BhdXNpbmcgY3VycmVudCB0cmFuc3BvcnQgXCIlc1wiJywgc2VsZi50cmFuc3BvcnQubmFtZSk7XG4gICAgICAgIHNlbGYudHJhbnNwb3J0LnBhdXNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoZmFpbGVkKSByZXR1cm47XG4gICAgICAgICAgaWYgKCdjbG9zZWQnID09PSBzZWxmLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgICAgICAgICBkZWJ1ZygnY2hhbmdpbmcgdHJhbnNwb3J0IGFuZCBzZW5kaW5nIHVwZ3JhZGUgcGFja2V0Jyk7XG5cbiAgICAgICAgICBjbGVhbnVwKCk7XG5cbiAgICAgICAgICBzZWxmLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO1xuICAgICAgICAgIHRyYW5zcG9ydC5zZW5kKFt7IHR5cGU6ICd1cGdyYWRlJyB9XSk7XG4gICAgICAgICAgc2VsZi5lbWl0KCd1cGdyYWRlJywgdHJhbnNwb3J0KTtcbiAgICAgICAgICB0cmFuc3BvcnQgPSBudWxsO1xuICAgICAgICAgIHNlbGYudXBncmFkaW5nID0gZmFsc2U7XG4gICAgICAgICAgc2VsZi5mbHVzaCgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIGZhaWxlZCcsIG5hbWUpO1xuICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdwcm9iZSBlcnJvcicpO1xuICAgICAgICBlcnIudHJhbnNwb3J0ID0gdHJhbnNwb3J0Lm5hbWU7XG4gICAgICAgIHNlbGYuZW1pdCgndXBncmFkZUVycm9yJywgZXJyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZyZWV6ZVRyYW5zcG9ydCAoKSB7XG4gICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuXG4gICAgLy8gQW55IGNhbGxiYWNrIGNhbGxlZCBieSB0cmFuc3BvcnQgc2hvdWxkIGJlIGlnbm9yZWQgc2luY2Ugbm93XG4gICAgZmFpbGVkID0gdHJ1ZTtcblxuICAgIGNsZWFudXAoKTtcblxuICAgIHRyYW5zcG9ydC5jbG9zZSgpO1xuICAgIHRyYW5zcG9ydCA9IG51bGw7XG4gIH1cblxuICAvLyBIYW5kbGUgYW55IGVycm9yIHRoYXQgaGFwcGVucyB3aGlsZSBwcm9iaW5nXG4gIGZ1bmN0aW9uIG9uZXJyb3IgKGVycikge1xuICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcigncHJvYmUgZXJyb3I6ICcgKyBlcnIpO1xuICAgIGVycm9yLnRyYW5zcG9ydCA9IHRyYW5zcG9ydC5uYW1lO1xuXG4gICAgZnJlZXplVHJhbnNwb3J0KCk7XG5cbiAgICBkZWJ1ZygncHJvYmUgdHJhbnNwb3J0IFwiJXNcIiBmYWlsZWQgYmVjYXVzZSBvZiBlcnJvcjogJXMnLCBuYW1lLCBlcnIpO1xuXG4gICAgc2VsZi5lbWl0KCd1cGdyYWRlRXJyb3InLCBlcnJvcik7XG4gIH1cblxuICBmdW5jdGlvbiBvblRyYW5zcG9ydENsb3NlICgpIHtcbiAgICBvbmVycm9yKCd0cmFuc3BvcnQgY2xvc2VkJyk7XG4gIH1cblxuICAvLyBXaGVuIHRoZSBzb2NrZXQgaXMgY2xvc2VkIHdoaWxlIHdlJ3JlIHByb2JpbmdcbiAgZnVuY3Rpb24gb25jbG9zZSAoKSB7XG4gICAgb25lcnJvcignc29ja2V0IGNsb3NlZCcpO1xuICB9XG5cbiAgLy8gV2hlbiB0aGUgc29ja2V0IGlzIHVwZ3JhZGVkIHdoaWxlIHdlJ3JlIHByb2JpbmdcbiAgZnVuY3Rpb24gb251cGdyYWRlICh0bykge1xuICAgIGlmICh0cmFuc3BvcnQgJiYgdG8ubmFtZSAhPT0gdHJhbnNwb3J0Lm5hbWUpIHtcbiAgICAgIGRlYnVnKCdcIiVzXCIgd29ya3MgLSBhYm9ydGluZyBcIiVzXCInLCB0by5uYW1lLCB0cmFuc3BvcnQubmFtZSk7XG4gICAgICBmcmVlemVUcmFuc3BvcnQoKTtcbiAgICB9XG4gIH1cblxuICAvLyBSZW1vdmUgYWxsIGxpc3RlbmVycyBvbiB0aGUgdHJhbnNwb3J0IGFuZCBvbiBzZWxmXG4gIGZ1bmN0aW9uIGNsZWFudXAgKCkge1xuICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcignb3BlbicsIG9uVHJhbnNwb3J0T3Blbik7XG4gICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvblRyYW5zcG9ydENsb3NlKTtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VwZ3JhZGluZycsIG9udXBncmFkZSk7XG4gIH1cblxuICB0cmFuc3BvcnQub25jZSgnb3BlbicsIG9uVHJhbnNwb3J0T3Blbik7XG4gIHRyYW5zcG9ydC5vbmNlKCdlcnJvcicsIG9uZXJyb3IpO1xuICB0cmFuc3BvcnQub25jZSgnY2xvc2UnLCBvblRyYW5zcG9ydENsb3NlKTtcblxuICB0aGlzLm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG4gIHRoaXMub25jZSgndXBncmFkaW5nJywgb251cGdyYWRlKTtcblxuICB0cmFuc3BvcnQub3BlbigpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2hlbiBjb25uZWN0aW9uIGlzIGRlZW1lZCBvcGVuLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdzb2NrZXQgb3BlbicpO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSAnd2Vic29ja2V0JyA9PT0gdGhpcy50cmFuc3BvcnQubmFtZTtcbiAgdGhpcy5lbWl0KCdvcGVuJyk7XG4gIHRoaXMuZmx1c2goKTtcblxuICAvLyB3ZSBjaGVjayBmb3IgYHJlYWR5U3RhdGVgIGluIGNhc2UgYW4gYG9wZW5gXG4gIC8vIGxpc3RlbmVyIGFscmVhZHkgY2xvc2VkIHRoZSBzb2NrZXRcbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlICYmIHRoaXMudXBncmFkZSAmJiB0aGlzLnRyYW5zcG9ydC5wYXVzZSkge1xuICAgIGRlYnVnKCdzdGFydGluZyB1cGdyYWRlIHByb2JlcycpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy51cGdyYWRlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRoaXMucHJvYmUodGhpcy51cGdyYWRlc1tpXSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEhhbmRsZXMgYSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vblBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8XG4gICAgICAnY2xvc2luZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIGRlYnVnKCdzb2NrZXQgcmVjZWl2ZTogdHlwZSBcIiVzXCIsIGRhdGEgXCIlc1wiJywgcGFja2V0LnR5cGUsIHBhY2tldC5kYXRhKTtcblxuICAgIHRoaXMuZW1pdCgncGFja2V0JywgcGFja2V0KTtcblxuICAgIC8vIFNvY2tldCBpcyBsaXZlIC0gYW55IHBhY2tldCBjb3VudHNcbiAgICB0aGlzLmVtaXQoJ2hlYXJ0YmVhdCcpO1xuXG4gICAgc3dpdGNoIChwYWNrZXQudHlwZSkge1xuICAgICAgY2FzZSAnb3Blbic6XG4gICAgICAgIHRoaXMub25IYW5kc2hha2UoSlNPTi5wYXJzZShwYWNrZXQuZGF0YSkpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAncG9uZyc6XG4gICAgICAgIHRoaXMuc2V0UGluZygpO1xuICAgICAgICB0aGlzLmVtaXQoJ3BvbmcnKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignc2VydmVyIGVycm9yJyk7XG4gICAgICAgIGVyci5jb2RlID0gcGFja2V0LmRhdGE7XG4gICAgICAgIHRoaXMub25FcnJvcihlcnIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnbWVzc2FnZSc6XG4gICAgICAgIHRoaXMuZW1pdCgnZGF0YScsIHBhY2tldC5kYXRhKTtcbiAgICAgICAgdGhpcy5lbWl0KCdtZXNzYWdlJywgcGFja2V0LmRhdGEpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZGVidWcoJ3BhY2tldCByZWNlaXZlZCB3aXRoIHNvY2tldCByZWFkeVN0YXRlIFwiJXNcIicsIHRoaXMucmVhZHlTdGF0ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gaGFuZHNoYWtlIGNvbXBsZXRpb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGhhbmRzaGFrZSBvYmpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25IYW5kc2hha2UgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmVtaXQoJ2hhbmRzaGFrZScsIGRhdGEpO1xuICB0aGlzLmlkID0gZGF0YS5zaWQ7XG4gIHRoaXMudHJhbnNwb3J0LnF1ZXJ5LnNpZCA9IGRhdGEuc2lkO1xuICB0aGlzLnVwZ3JhZGVzID0gdGhpcy5maWx0ZXJVcGdyYWRlcyhkYXRhLnVwZ3JhZGVzKTtcbiAgdGhpcy5waW5nSW50ZXJ2YWwgPSBkYXRhLnBpbmdJbnRlcnZhbDtcbiAgdGhpcy5waW5nVGltZW91dCA9IGRhdGEucGluZ1RpbWVvdXQ7XG4gIHRoaXMub25PcGVuKCk7XG4gIC8vIEluIGNhc2Ugb3BlbiBoYW5kbGVyIGNsb3NlcyBzb2NrZXRcbiAgaWYgKCdjbG9zZWQnID09PSB0aGlzLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgdGhpcy5zZXRQaW5nKCk7XG5cbiAgLy8gUHJvbG9uZyBsaXZlbmVzcyBvZiBzb2NrZXQgb24gaGVhcnRiZWF0XG4gIHRoaXMucmVtb3ZlTGlzdGVuZXIoJ2hlYXJ0YmVhdCcsIHRoaXMub25IZWFydGJlYXQpO1xuICB0aGlzLm9uKCdoZWFydGJlYXQnLCB0aGlzLm9uSGVhcnRiZWF0KTtcbn07XG5cbi8qKlxuICogUmVzZXRzIHBpbmcgdGltZW91dC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uSGVhcnRiZWF0ID0gZnVuY3Rpb24gKHRpbWVvdXQpIHtcbiAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1RpbWVvdXRUaW1lcik7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgc2VsZi5waW5nVGltZW91dFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCdjbG9zZWQnID09PSBzZWxmLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgICBzZWxmLm9uQ2xvc2UoJ3BpbmcgdGltZW91dCcpO1xuICB9LCB0aW1lb3V0IHx8IChzZWxmLnBpbmdJbnRlcnZhbCArIHNlbGYucGluZ1RpbWVvdXQpKTtcbn07XG5cbi8qKlxuICogUGluZ3Mgc2VydmVyIGV2ZXJ5IGB0aGlzLnBpbmdJbnRlcnZhbGAgYW5kIGV4cGVjdHMgcmVzcG9uc2VcbiAqIHdpdGhpbiBgdGhpcy5waW5nVGltZW91dGAgb3IgY2xvc2VzIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zZXRQaW5nID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGNsZWFyVGltZW91dChzZWxmLnBpbmdJbnRlcnZhbFRpbWVyKTtcbiAgc2VsZi5waW5nSW50ZXJ2YWxUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGRlYnVnKCd3cml0aW5nIHBpbmcgcGFja2V0IC0gZXhwZWN0aW5nIHBvbmcgd2l0aGluICVzbXMnLCBzZWxmLnBpbmdUaW1lb3V0KTtcbiAgICBzZWxmLnBpbmcoKTtcbiAgICBzZWxmLm9uSGVhcnRiZWF0KHNlbGYucGluZ1RpbWVvdXQpO1xuICB9LCBzZWxmLnBpbmdJbnRlcnZhbCk7XG59O1xuXG4vKipcbiogU2VuZHMgYSBwaW5nIHBhY2tldC5cbipcbiogQGFwaSBwcml2YXRlXG4qL1xuXG5Tb2NrZXQucHJvdG90eXBlLnBpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5zZW5kUGFja2V0KCdwaW5nJywgZnVuY3Rpb24gKCkge1xuICAgIHNlbGYuZW1pdCgncGluZycpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIG9uIGBkcmFpbmAgZXZlbnRcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uRHJhaW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMud3JpdGVCdWZmZXIuc3BsaWNlKDAsIHRoaXMucHJldkJ1ZmZlckxlbik7XG5cbiAgLy8gc2V0dGluZyBwcmV2QnVmZmVyTGVuID0gMCBpcyB2ZXJ5IGltcG9ydGFudFxuICAvLyBmb3IgZXhhbXBsZSwgd2hlbiB1cGdyYWRpbmcsIHVwZ3JhZGUgcGFja2V0IGlzIHNlbnQgb3ZlcixcbiAgLy8gYW5kIGEgbm9uemVybyBwcmV2QnVmZmVyTGVuIGNvdWxkIGNhdXNlIHByb2JsZW1zIG9uIGBkcmFpbmBcbiAgdGhpcy5wcmV2QnVmZmVyTGVuID0gMDtcblxuICBpZiAoMCA9PT0gdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICB0aGlzLmVtaXQoJ2RyYWluJyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5mbHVzaCgpO1xuICB9XG59O1xuXG4vKipcbiAqIEZsdXNoIHdyaXRlIGJ1ZmZlcnMuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdjbG9zZWQnICE9PSB0aGlzLnJlYWR5U3RhdGUgJiYgdGhpcy50cmFuc3BvcnQud3JpdGFibGUgJiZcbiAgICAhdGhpcy51cGdyYWRpbmcgJiYgdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICBkZWJ1ZygnZmx1c2hpbmcgJWQgcGFja2V0cyBpbiBzb2NrZXQnLCB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCk7XG4gICAgdGhpcy50cmFuc3BvcnQuc2VuZCh0aGlzLndyaXRlQnVmZmVyKTtcbiAgICAvLyBrZWVwIHRyYWNrIG9mIGN1cnJlbnQgbGVuZ3RoIG9mIHdyaXRlQnVmZmVyXG4gICAgLy8gc3BsaWNlIHdyaXRlQnVmZmVyIGFuZCBjYWxsYmFja0J1ZmZlciBvbiBgZHJhaW5gXG4gICAgdGhpcy5wcmV2QnVmZmVyTGVuID0gdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGg7XG4gICAgdGhpcy5lbWl0KCdmbHVzaCcpO1xuICB9XG59O1xuXG4vKipcbiAqIFNlbmRzIGEgbWVzc2FnZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gKiBAcmV0dXJuIHtTb2NrZXR9IGZvciBjaGFpbmluZy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS53cml0ZSA9XG5Tb2NrZXQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAobXNnLCBvcHRpb25zLCBmbikge1xuICB0aGlzLnNlbmRQYWNrZXQoJ21lc3NhZ2UnLCBtc2csIG9wdGlvbnMsIGZuKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNlbmRzIGEgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYWNrZXQgdHlwZS5cbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuc2VuZFBhY2tldCA9IGZ1bmN0aW9uICh0eXBlLCBkYXRhLCBvcHRpb25zLCBmbikge1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGRhdGEpIHtcbiAgICBmbiA9IGRhdGE7XG4gICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2Ygb3B0aW9ucykge1xuICAgIGZuID0gb3B0aW9ucztcbiAgICBvcHRpb25zID0gbnVsbDtcbiAgfVxuXG4gIGlmICgnY2xvc2luZycgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnY2xvc2VkJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMuY29tcHJlc3MgPSBmYWxzZSAhPT0gb3B0aW9ucy5jb21wcmVzcztcblxuICB2YXIgcGFja2V0ID0ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgZGF0YTogZGF0YSxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH07XG4gIHRoaXMuZW1pdCgncGFja2V0Q3JlYXRlJywgcGFja2V0KTtcbiAgdGhpcy53cml0ZUJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gIGlmIChmbikgdGhpcy5vbmNlKCdmbHVzaCcsIGZuKTtcbiAgdGhpcy5mbHVzaCgpO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NpbmcnO1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKSB7XG4gICAgICB0aGlzLm9uY2UoJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy51cGdyYWRpbmcpIHtcbiAgICAgICAgICB3YWl0Rm9yVXBncmFkZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy51cGdyYWRpbmcpIHtcbiAgICAgIHdhaXRGb3JVcGdyYWRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2xvc2UgKCkge1xuICAgIHNlbGYub25DbG9zZSgnZm9yY2VkIGNsb3NlJyk7XG4gICAgZGVidWcoJ3NvY2tldCBjbG9zaW5nIC0gdGVsbGluZyB0cmFuc3BvcnQgdG8gY2xvc2UnKTtcbiAgICBzZWxmLnRyYW5zcG9ydC5jbG9zZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xlYW51cEFuZENsb3NlICgpIHtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCd1cGdyYWRlJywgY2xlYW51cEFuZENsb3NlKTtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCd1cGdyYWRlRXJyb3InLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgIGNsb3NlKCk7XG4gIH1cblxuICBmdW5jdGlvbiB3YWl0Rm9yVXBncmFkZSAoKSB7XG4gICAgLy8gd2FpdCBmb3IgdXBncmFkZSB0byBmaW5pc2ggc2luY2Ugd2UgY2FuJ3Qgc2VuZCBwYWNrZXRzIHdoaWxlIHBhdXNpbmcgYSB0cmFuc3BvcnRcbiAgICBzZWxmLm9uY2UoJ3VwZ3JhZGUnLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgIHNlbGYub25jZSgndXBncmFkZUVycm9yJywgY2xlYW51cEFuZENsb3NlKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgZXJyb3JcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gIGRlYnVnKCdzb2NrZXQgZXJyb3IgJWonLCBlcnIpO1xuICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB0aGlzLm9uQ2xvc2UoJ3RyYW5zcG9ydCBlcnJvcicsIGVycik7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAocmVhc29uLCBkZXNjKSB7XG4gIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnY2xvc2luZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIGRlYnVnKCdzb2NrZXQgY2xvc2Ugd2l0aCByZWFzb246IFwiJXNcIicsIHJlYXNvbik7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgLy8gY2xlYXIgdGltZXJzXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ0ludGVydmFsVGltZXIpO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnBpbmdUaW1lb3V0VGltZXIpO1xuXG4gICAgLy8gc3RvcCBldmVudCBmcm9tIGZpcmluZyBhZ2FpbiBmb3IgdHJhbnNwb3J0XG4gICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCdjbG9zZScpO1xuXG4gICAgLy8gZW5zdXJlIHRyYW5zcG9ydCB3b24ndCBzdGF5IG9wZW5cbiAgICB0aGlzLnRyYW5zcG9ydC5jbG9zZSgpO1xuXG4gICAgLy8gaWdub3JlIGZ1cnRoZXIgdHJhbnNwb3J0IGNvbW11bmljYXRpb25cbiAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcblxuICAgIC8vIHNldCByZWFkeSBzdGF0ZVxuICAgIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuXG4gICAgLy8gY2xlYXIgc2Vzc2lvbiBpZFxuICAgIHRoaXMuaWQgPSBudWxsO1xuXG4gICAgLy8gZW1pdCBjbG9zZSBldmVudFxuICAgIHRoaXMuZW1pdCgnY2xvc2UnLCByZWFzb24sIGRlc2MpO1xuXG4gICAgLy8gY2xlYW4gYnVmZmVycyBhZnRlciwgc28gdXNlcnMgY2FuIHN0aWxsXG4gICAgLy8gZ3JhYiB0aGUgYnVmZmVycyBvbiBgY2xvc2VgIGV2ZW50XG4gICAgc2VsZi53cml0ZUJ1ZmZlciA9IFtdO1xuICAgIHNlbGYucHJldkJ1ZmZlckxlbiA9IDA7XG4gIH1cbn07XG5cbi8qKlxuICogRmlsdGVycyB1cGdyYWRlcywgcmV0dXJuaW5nIG9ubHkgdGhvc2UgbWF0Y2hpbmcgY2xpZW50IHRyYW5zcG9ydHMuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gc2VydmVyIHVwZ3JhZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5maWx0ZXJVcGdyYWRlcyA9IGZ1bmN0aW9uICh1cGdyYWRlcykge1xuICB2YXIgZmlsdGVyZWRVcGdyYWRlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgaiA9IHVwZ3JhZGVzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgIGlmICh+aW5kZXgodGhpcy50cmFuc3BvcnRzLCB1cGdyYWRlc1tpXSkpIGZpbHRlcmVkVXBncmFkZXMucHVzaCh1cGdyYWRlc1tpXSk7XG4gIH1cbiAgcmV0dXJuIGZpbHRlcmVkVXBncmFkZXM7XG59O1xuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG5cbi8qKlxuICogRXhwb3J0cyBwYXJzZXJcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICpcbiAqL1xubW9kdWxlLmV4cG9ydHMucGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xuIiwiLypnbG9iYWwgQmxvYixGaWxlKi9cblxuLyoqXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzXG4gKi9cblxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG52YXIgaXNCdWYgPSByZXF1aXJlKCcuL2lzLWJ1ZmZlcicpO1xudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciB3aXRoTmF0aXZlQmxvYiA9IHR5cGVvZiBnbG9iYWwuQmxvYiA9PT0gJ2Z1bmN0aW9uJyB8fCB0b1N0cmluZy5jYWxsKGdsb2JhbC5CbG9iKSA9PT0gJ1tvYmplY3QgQmxvYkNvbnN0cnVjdG9yXSc7XG52YXIgd2l0aE5hdGl2ZUZpbGUgPSB0eXBlb2YgZ2xvYmFsLkZpbGUgPT09ICdmdW5jdGlvbicgfHwgdG9TdHJpbmcuY2FsbChnbG9iYWwuRmlsZSkgPT09ICdbb2JqZWN0IEZpbGVDb25zdHJ1Y3Rvcl0nO1xuXG4vKipcbiAqIFJlcGxhY2VzIGV2ZXJ5IEJ1ZmZlciB8IEFycmF5QnVmZmVyIGluIHBhY2tldCB3aXRoIGEgbnVtYmVyZWQgcGxhY2Vob2xkZXIuXG4gKiBBbnl0aGluZyB3aXRoIGJsb2JzIG9yIGZpbGVzIHNob3VsZCBiZSBmZWQgdGhyb3VnaCByZW1vdmVCbG9icyBiZWZvcmUgY29taW5nXG4gKiBoZXJlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQgLSBzb2NrZXQuaW8gZXZlbnQgcGFja2V0XG4gKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggZGVjb25zdHJ1Y3RlZCBwYWNrZXQgYW5kIGxpc3Qgb2YgYnVmZmVyc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmRlY29uc3RydWN0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0KSB7XG4gIHZhciBidWZmZXJzID0gW107XG4gIHZhciBwYWNrZXREYXRhID0gcGFja2V0LmRhdGE7XG4gIHZhciBwYWNrID0gcGFja2V0O1xuICBwYWNrLmRhdGEgPSBfZGVjb25zdHJ1Y3RQYWNrZXQocGFja2V0RGF0YSwgYnVmZmVycyk7XG4gIHBhY2suYXR0YWNobWVudHMgPSBidWZmZXJzLmxlbmd0aDsgLy8gbnVtYmVyIG9mIGJpbmFyeSAnYXR0YWNobWVudHMnXG4gIHJldHVybiB7cGFja2V0OiBwYWNrLCBidWZmZXJzOiBidWZmZXJzfTtcbn07XG5cbmZ1bmN0aW9uIF9kZWNvbnN0cnVjdFBhY2tldChkYXRhLCBidWZmZXJzKSB7XG4gIGlmICghZGF0YSkgcmV0dXJuIGRhdGE7XG5cbiAgaWYgKGlzQnVmKGRhdGEpKSB7XG4gICAgdmFyIHBsYWNlaG9sZGVyID0geyBfcGxhY2Vob2xkZXI6IHRydWUsIG51bTogYnVmZmVycy5sZW5ndGggfTtcbiAgICBidWZmZXJzLnB1c2goZGF0YSk7XG4gICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkoZGF0YSkpIHtcbiAgICB2YXIgbmV3RGF0YSA9IG5ldyBBcnJheShkYXRhLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBuZXdEYXRhW2ldID0gX2RlY29uc3RydWN0UGFja2V0KGRhdGFbaV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3RGF0YTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgJiYgIShkYXRhIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICB2YXIgbmV3RGF0YSA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICBuZXdEYXRhW2tleV0gPSBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtrZXldLCBidWZmZXJzKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0RhdGE7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogUmVjb25zdHJ1Y3RzIGEgYmluYXJ5IHBhY2tldCBmcm9tIGl0cyBwbGFjZWhvbGRlciBwYWNrZXQgYW5kIGJ1ZmZlcnNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0IC0gZXZlbnQgcGFja2V0IHdpdGggcGxhY2Vob2xkZXJzXG4gKiBAcGFyYW0ge0FycmF5fSBidWZmZXJzIC0gYmluYXJ5IGJ1ZmZlcnMgdG8gcHV0IGluIHBsYWNlaG9sZGVyIHBvc2l0aW9uc1xuICogQHJldHVybiB7T2JqZWN0fSByZWNvbnN0cnVjdGVkIHBhY2tldFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnJlY29uc3RydWN0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0LCBidWZmZXJzKSB7XG4gIHBhY2tldC5kYXRhID0gX3JlY29uc3RydWN0UGFja2V0KHBhY2tldC5kYXRhLCBidWZmZXJzKTtcbiAgcGFja2V0LmF0dGFjaG1lbnRzID0gdW5kZWZpbmVkOyAvLyBubyBsb25nZXIgdXNlZnVsXG4gIHJldHVybiBwYWNrZXQ7XG59O1xuXG5mdW5jdGlvbiBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YSwgYnVmZmVycykge1xuICBpZiAoIWRhdGEpIHJldHVybiBkYXRhO1xuXG4gIGlmIChkYXRhICYmIGRhdGEuX3BsYWNlaG9sZGVyKSB7XG4gICAgcmV0dXJuIGJ1ZmZlcnNbZGF0YS5udW1dOyAvLyBhcHByb3ByaWF0ZSBidWZmZXIgKHNob3VsZCBiZSBuYXR1cmFsIG9yZGVyIGFueXdheSlcbiAgfSBlbHNlIGlmIChpc0FycmF5KGRhdGEpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkYXRhW2ldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFbaV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgZGF0YVtrZXldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFba2V5XSwgYnVmZmVycyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQXN5bmNocm9ub3VzbHkgcmVtb3ZlcyBCbG9icyBvciBGaWxlcyBmcm9tIGRhdGEgdmlhXG4gKiBGaWxlUmVhZGVyJ3MgcmVhZEFzQXJyYXlCdWZmZXIgbWV0aG9kLiBVc2VkIGJlZm9yZSBlbmNvZGluZ1xuICogZGF0YSBhcyBtc2dwYWNrLiBDYWxscyBjYWxsYmFjayB3aXRoIHRoZSBibG9ibGVzcyBkYXRhLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5yZW1vdmVCbG9icyA9IGZ1bmN0aW9uKGRhdGEsIGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIF9yZW1vdmVCbG9icyhvYmosIGN1cktleSwgY29udGFpbmluZ09iamVjdCkge1xuICAgIGlmICghb2JqKSByZXR1cm4gb2JqO1xuXG4gICAgLy8gY29udmVydCBhbnkgYmxvYlxuICAgIGlmICgod2l0aE5hdGl2ZUJsb2IgJiYgb2JqIGluc3RhbmNlb2YgQmxvYikgfHxcbiAgICAgICAgKHdpdGhOYXRpdmVGaWxlICYmIG9iaiBpbnN0YW5jZW9mIEZpbGUpKSB7XG4gICAgICBwZW5kaW5nQmxvYnMrKztcblxuICAgICAgLy8gYXN5bmMgZmlsZXJlYWRlclxuICAgICAgdmFyIGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHsgLy8gdGhpcy5yZXN1bHQgPT0gYXJyYXlidWZmZXJcbiAgICAgICAgaWYgKGNvbnRhaW5pbmdPYmplY3QpIHtcbiAgICAgICAgICBjb250YWluaW5nT2JqZWN0W2N1cktleV0gPSB0aGlzLnJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBibG9ibGVzc0RhdGEgPSB0aGlzLnJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIG5vdGhpbmcgcGVuZGluZyBpdHMgY2FsbGJhY2sgdGltZVxuICAgICAgICBpZighIC0tcGVuZGluZ0Jsb2JzKSB7XG4gICAgICAgICAgY2FsbGJhY2soYmxvYmxlc3NEYXRhKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZmlsZVJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihvYmopOyAvLyBibG9iIC0+IGFycmF5YnVmZmVyXG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9iaikpIHsgLy8gaGFuZGxlIGFycmF5XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgICBfcmVtb3ZlQmxvYnMob2JqW2ldLCBpLCBvYmopO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgIWlzQnVmKG9iaikpIHsgLy8gYW5kIG9iamVjdFxuICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICBfcmVtb3ZlQmxvYnMob2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgcGVuZGluZ0Jsb2JzID0gMDtcbiAgdmFyIGJsb2JsZXNzRGF0YSA9IGRhdGE7XG4gIF9yZW1vdmVCbG9icyhibG9ibGVzc0RhdGEpO1xuICBpZiAoIXBlbmRpbmdCbG9icykge1xuICAgIGNhbGxiYWNrKGJsb2JsZXNzRGF0YSk7XG4gIH1cbn07XG4iLCIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWwpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oKD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICBpZiAobXMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtcyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgcmV0dXJuIHBsdXJhbChtcywgZCwgJ2RheScpIHx8XG4gICAgcGx1cmFsKG1zLCBoLCAnaG91cicpIHx8XG4gICAgcGx1cmFsKG1zLCBtLCAnbWludXRlJykgfHxcbiAgICBwbHVyYWwobXMsIHMsICdzZWNvbmQnKSB8fFxuICAgIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBuLCBuYW1lKSB7XG4gIGlmIChtcyA8IG4pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG1zIDwgbiAqIDEuNSkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKG1zIC8gbikgKyAnICcgKyBuYW1lO1xuICB9XG4gIHJldHVybiBNYXRoLmNlaWwobXMgLyBuKSArICcgJyArIG5hbWUgKyAncyc7XG59XG4iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gY3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Z1snZGVmYXVsdCddID0gY3JlYXRlRGVidWc7XG5leHBvcnRzLmNvZXJjZSA9IGNvZXJjZTtcbmV4cG9ydHMuZGlzYWJsZSA9IGRpc2FibGU7XG5leHBvcnRzLmVuYWJsZSA9IGVuYWJsZTtcbmV4cG9ydHMuZW5hYmxlZCA9IGVuYWJsZWQ7XG5leHBvcnRzLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblxuLyoqXG4gKiBBY3RpdmUgYGRlYnVnYCBpbnN0YW5jZXMuXG4gKi9cbmV4cG9ydHMuaW5zdGFuY2VzID0gW107XG5cbi8qKlxuICogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG4gKi9cblxuZXhwb3J0cy5uYW1lcyA9IFtdO1xuZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4vKipcbiAqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cbiAqXG4gKiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzID0ge307XG5cbi8qKlxuICogU2VsZWN0IGEgY29sb3IuXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcbiAgdmFyIGhhc2ggPSAwLCBpO1xuXG4gIGZvciAoaSBpbiBuYW1lc3BhY2UpIHtcbiAgICBoYXNoICA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG4gICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgfVxuXG4gIHJldHVybiBleHBvcnRzLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGV4cG9ydHMuY29sb3JzLmxlbmd0aF07XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXG4gIHZhciBwcmV2VGltZTtcblxuICBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICAvLyBkaXNhYmxlZD9cbiAgICBpZiAoIWRlYnVnLmVuYWJsZWQpIHJldHVybjtcblxuICAgIHZhciBzZWxmID0gZGVidWc7XG5cbiAgICAvLyBzZXQgYGRpZmZgIHRpbWVzdGFtcFxuICAgIHZhciBjdXJyID0gK25ldyBEYXRlKCk7XG4gICAgdmFyIG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcbiAgICBzZWxmLmRpZmYgPSBtcztcbiAgICBzZWxmLnByZXYgPSBwcmV2VGltZTtcbiAgICBzZWxmLmN1cnIgPSBjdXJyO1xuICAgIHByZXZUaW1lID0gY3VycjtcblxuICAgIC8vIHR1cm4gdGhlIGBhcmd1bWVudHNgIGludG8gYSBwcm9wZXIgQXJyYXlcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgYXJnc1swXSA9IGV4cG9ydHMuY29lcmNlKGFyZ3NbMF0pO1xuXG4gICAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgYXJnc1swXSkge1xuICAgICAgLy8gYW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cbiAgICAgIGFyZ3MudW5zaGlmdCgnJU8nKTtcbiAgICB9XG5cbiAgICAvLyBhcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgYXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIGZ1bmN0aW9uKG1hdGNoLCBmb3JtYXQpIHtcbiAgICAgIC8vIGlmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcbiAgICAgIGlmIChtYXRjaCA9PT0gJyUlJykgcmV0dXJuIG1hdGNoO1xuICAgICAgaW5kZXgrKztcbiAgICAgIHZhciBmb3JtYXR0ZXIgPSBleHBvcnRzLmZvcm1hdHRlcnNbZm9ybWF0XTtcbiAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZm9ybWF0dGVyKSB7XG4gICAgICAgIHZhciB2YWwgPSBhcmdzW2luZGV4XTtcbiAgICAgICAgbWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG4gICAgICAgIC8vIG5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcbiAgICAgICAgYXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuXG4gICAgLy8gYXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcbiAgICBleHBvcnRzLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuICAgIHZhciBsb2dGbiA9IGRlYnVnLmxvZyB8fCBleHBvcnRzLmxvZyB8fCBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO1xuICAgIGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICB9XG5cbiAgZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICBkZWJ1Zy5lbmFibGVkID0gZXhwb3J0cy5lbmFibGVkKG5hbWVzcGFjZSk7XG4gIGRlYnVnLnVzZUNvbG9ycyA9IGV4cG9ydHMudXNlQ29sb3JzKCk7XG4gIGRlYnVnLmNvbG9yID0gc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcbiAgZGVidWcuZGVzdHJveSA9IGRlc3Ryb3k7XG5cbiAgLy8gZW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBleHBvcnRzLmluaXQpIHtcbiAgICBleHBvcnRzLmluaXQoZGVidWcpO1xuICB9XG5cbiAgZXhwb3J0cy5pbnN0YW5jZXMucHVzaChkZWJ1Zyk7XG5cbiAgcmV0dXJuIGRlYnVnO1xufVxuXG5mdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgdmFyIGluZGV4ID0gZXhwb3J0cy5pbnN0YW5jZXMuaW5kZXhPZih0aGlzKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIGV4cG9ydHMuaW5zdGFuY2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuICogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuICBleHBvcnRzLnNhdmUobmFtZXNwYWNlcyk7XG5cbiAgZXhwb3J0cy5uYW1lcyA9IFtdO1xuICBleHBvcnRzLnNraXBzID0gW107XG5cbiAgdmFyIGk7XG4gIHZhciBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG4gIHZhciBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKCFzcGxpdFtpXSkgY29udGludWU7IC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG4gICAgbmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG4gICAgaWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuICAgICAgZXhwb3J0cy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBleHBvcnRzLmluc3RhbmNlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpbnN0YW5jZSA9IGV4cG9ydHMuaW5zdGFuY2VzW2ldO1xuICAgIGluc3RhbmNlLmVuYWJsZWQgPSBleHBvcnRzLmVuYWJsZWQoaW5zdGFuY2UubmFtZXNwYWNlKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgZXhwb3J0cy5lbmFibGUoJycpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG4gIGlmIChuYW1lW25hbWUubGVuZ3RoIC0gMV0gPT09ICcqJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBpLCBsZW47XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENvZXJjZSBgdmFsYC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWxcbiAqIEByZXR1cm4ge01peGVkfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuICBpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG4gIHJldHVybiB2YWw7XG59XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHBhcnNldXJpID0gcmVxdWlyZSgncGFyc2V1cmknKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1jbGllbnQ6dXJsJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB1cmw7XG5cbi8qKlxuICogVVJMIHBhcnNlci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge09iamVjdH0gQW4gb2JqZWN0IG1lYW50IHRvIG1pbWljIHdpbmRvdy5sb2NhdGlvbi5cbiAqICAgICAgICAgICAgICAgICBEZWZhdWx0cyB0byB3aW5kb3cubG9jYXRpb24uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHVybCAodXJpLCBsb2MpIHtcbiAgdmFyIG9iaiA9IHVyaTtcblxuICAvLyBkZWZhdWx0IHRvIHdpbmRvdy5sb2NhdGlvblxuICBsb2MgPSBsb2MgfHwgZ2xvYmFsLmxvY2F0aW9uO1xuICBpZiAobnVsbCA9PSB1cmkpIHVyaSA9IGxvYy5wcm90b2NvbCArICcvLycgKyBsb2MuaG9zdDtcblxuICAvLyByZWxhdGl2ZSBwYXRoIHN1cHBvcnRcbiAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdXJpKSB7XG4gICAgaWYgKCcvJyA9PT0gdXJpLmNoYXJBdCgwKSkge1xuICAgICAgaWYgKCcvJyA9PT0gdXJpLmNoYXJBdCgxKSkge1xuICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyB1cmk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmkgPSBsb2MuaG9zdCArIHVyaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIS9eKGh0dHBzP3x3c3M/KTpcXC9cXC8vLnRlc3QodXJpKSkge1xuICAgICAgZGVidWcoJ3Byb3RvY29sLWxlc3MgdXJsICVzJywgdXJpKTtcbiAgICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIGxvYykge1xuICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyAnLy8nICsgdXJpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJpID0gJ2h0dHBzOi8vJyArIHVyaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBwYXJzZVxuICAgIGRlYnVnKCdwYXJzZSAlcycsIHVyaSk7XG4gICAgb2JqID0gcGFyc2V1cmkodXJpKTtcbiAgfVxuXG4gIC8vIG1ha2Ugc3VyZSB3ZSB0cmVhdCBgbG9jYWxob3N0OjgwYCBhbmQgYGxvY2FsaG9zdGAgZXF1YWxseVxuICBpZiAoIW9iai5wb3J0KSB7XG4gICAgaWYgKC9eKGh0dHB8d3MpJC8udGVzdChvYmoucHJvdG9jb2wpKSB7XG4gICAgICBvYmoucG9ydCA9ICc4MCc7XG4gICAgfSBlbHNlIGlmICgvXihodHRwfHdzKXMkLy50ZXN0KG9iai5wcm90b2NvbCkpIHtcbiAgICAgIG9iai5wb3J0ID0gJzQ0Myc7XG4gICAgfVxuICB9XG5cbiAgb2JqLnBhdGggPSBvYmoucGF0aCB8fCAnLyc7XG5cbiAgdmFyIGlwdjYgPSBvYmouaG9zdC5pbmRleE9mKCc6JykgIT09IC0xO1xuICB2YXIgaG9zdCA9IGlwdjYgPyAnWycgKyBvYmouaG9zdCArICddJyA6IG9iai5ob3N0O1xuXG4gIC8vIGRlZmluZSB1bmlxdWUgaWRcbiAgb2JqLmlkID0gb2JqLnByb3RvY29sICsgJzovLycgKyBob3N0ICsgJzonICsgb2JqLnBvcnQ7XG4gIC8vIGRlZmluZSBocmVmXG4gIG9iai5ocmVmID0gb2JqLnByb3RvY29sICsgJzovLycgKyBob3N0ICsgKGxvYyAmJiBsb2MucG9ydCA9PT0gb2JqLnBvcnQgPyAnJyA6ICgnOicgKyBvYmoucG9ydCkpO1xuXG4gIHJldHVybiBvYmo7XG59XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgdXJsID0gcmVxdWlyZSgnLi91cmwnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgTWFuYWdlciA9IHJlcXVpcmUoJy4vbWFuYWdlcicpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudCcpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGxvb2t1cDtcblxuLyoqXG4gKiBNYW5hZ2VycyBjYWNoZS5cbiAqL1xuXG52YXIgY2FjaGUgPSBleHBvcnRzLm1hbmFnZXJzID0ge307XG5cbi8qKlxuICogTG9va3MgdXAgYW4gZXhpc3RpbmcgYE1hbmFnZXJgIGZvciBtdWx0aXBsZXhpbmcuXG4gKiBJZiB0aGUgdXNlciBzdW1tb25zOlxuICpcbiAqICAgYGlvKCdodHRwOi8vbG9jYWxob3N0L2EnKTtgXG4gKiAgIGBpbygnaHR0cDovL2xvY2FsaG9zdC9iJyk7YFxuICpcbiAqIFdlIHJldXNlIHRoZSBleGlzdGluZyBpbnN0YW5jZSBiYXNlZCBvbiBzYW1lIHNjaGVtZS9wb3J0L2hvc3QsXG4gKiBhbmQgd2UgaW5pdGlhbGl6ZSBzb2NrZXRzIGZvciBlYWNoIG5hbWVzcGFjZS5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGxvb2t1cCAodXJpLCBvcHRzKSB7XG4gIGlmICh0eXBlb2YgdXJpID09PSAnb2JqZWN0Jykge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgdmFyIHBhcnNlZCA9IHVybCh1cmkpO1xuICB2YXIgc291cmNlID0gcGFyc2VkLnNvdXJjZTtcbiAgdmFyIGlkID0gcGFyc2VkLmlkO1xuICB2YXIgcGF0aCA9IHBhcnNlZC5wYXRoO1xuICB2YXIgc2FtZU5hbWVzcGFjZSA9IGNhY2hlW2lkXSAmJiBwYXRoIGluIGNhY2hlW2lkXS5uc3BzO1xuICB2YXIgbmV3Q29ubmVjdGlvbiA9IG9wdHMuZm9yY2VOZXcgfHwgb3B0c1snZm9yY2UgbmV3IGNvbm5lY3Rpb24nXSB8fFxuICAgICAgICAgICAgICAgICAgICAgIGZhbHNlID09PSBvcHRzLm11bHRpcGxleCB8fCBzYW1lTmFtZXNwYWNlO1xuXG4gIHZhciBpbztcblxuICBpZiAobmV3Q29ubmVjdGlvbikge1xuICAgIGRlYnVnKCdpZ25vcmluZyBzb2NrZXQgY2FjaGUgZm9yICVzJywgc291cmNlKTtcbiAgICBpbyA9IE1hbmFnZXIoc291cmNlLCBvcHRzKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWNhY2hlW2lkXSkge1xuICAgICAgZGVidWcoJ25ldyBpbyBpbnN0YW5jZSBmb3IgJXMnLCBzb3VyY2UpO1xuICAgICAgY2FjaGVbaWRdID0gTWFuYWdlcihzb3VyY2UsIG9wdHMpO1xuICAgIH1cbiAgICBpbyA9IGNhY2hlW2lkXTtcbiAgfVxuICBpZiAocGFyc2VkLnF1ZXJ5ICYmICFvcHRzLnF1ZXJ5KSB7XG4gICAgb3B0cy5xdWVyeSA9IHBhcnNlZC5xdWVyeTtcbiAgfVxuICByZXR1cm4gaW8uc29ja2V0KHBhcnNlZC5wYXRoLCBvcHRzKTtcbn1cblxuLyoqXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5wcm90b2NvbCA9IHBhcnNlci5wcm90b2NvbDtcblxuLyoqXG4gKiBgY29ubmVjdGAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVyaVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmNvbm5lY3QgPSBsb29rdXA7XG5cbi8qKlxuICogRXhwb3NlIGNvbnN0cnVjdG9ycyBmb3Igc3RhbmRhbG9uZSBidWlsZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuTWFuYWdlciA9IHJlcXVpcmUoJy4vbWFuYWdlcicpO1xuZXhwb3J0cy5Tb2NrZXQgPSByZXF1aXJlKCcuL3NvY2tldCcpO1xuIiwiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5yb29tcy1saXN0LWl0ZW0ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y3ZjdmOTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAganVzdGlmeS1jb250ZW50OiBzdGFydDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2Q3ZDdkNzsgfVxcbiAgLnJvb21zLWxpc3QtaXRlbSBpbWcge1xcbiAgICB3aWR0aDogNTBweDtcXG4gICAgaGVpZ2h0OiA1MHB4O1xcbiAgICBib3JkZXItcmFkaXVzOiA1MHB4O1xcbiAgICBmbGV4LWdyb3c6IDA7XFxuICAgIG1hcmdpbjogMTVweDsgfVxcbiAgLnJvb21zLWxpc3QtaXRlbSBkaXYge1xcbiAgICBkaXNwbGF5OiBibG9jazsgfVxcbiAgICAucm9vbXMtbGlzdC1pdGVtIGRpdiBoNCB7XFxuICAgICAgZm9udC1zaXplOiAxNHB4O1xcbiAgICAgIGNvbG9yOiAjOWY5ZjlkO1xcbiAgICAgIG1hcmdpbi10b3A6IDEwcHg7XFxuICAgICAgcGFkZGluZzogNXB4OyB9XFxuICAgICAgLnJvb21zLWxpc3QtaXRlbSBkaXYgaDQgc3Ryb25nIHtcXG4gICAgICAgIGNvbG9yOiAjNGQ0ZDRlOyB9XFxuICAgIC5yb29tcy1saXN0LWl0ZW0gZGl2IHAge1xcbiAgICAgIGZvbnQtc2l6ZTogMTJweDtcXG4gICAgICBjb2xvcjogI2E0YThhNztcXG4gICAgICBwYWRkaW5nOiA1cHg7IH1cXG4gICAgLnJvb21zLWxpc3QtaXRlbSBkaXYgLnNtYWxsLWRhdGUge1xcbiAgICAgIGZvbnQtc2l6ZTogMTJweDtcXG4gICAgICBwYWRkaW5nLWJvdHRvbTogMTBweDsgfVxcblxcbi5yb29tcy1saXN0LWl0ZW06aG92ZXIge1xcbiAgb3BhY2l0eTogMC44OyB9XFxuXFxuLnVucmVhZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzhjOGNkOyB9XFxuICAudW5yZWFkIGRpdiBwIHtcXG4gICAgY29sb3I6ICM4ZThlODI7IH1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9Sb29tc0xpc3RDb21wb25lbnQuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9Sb29tc0xpc3RDb21wb25lbnQuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vUm9vbXNMaXN0Q29tcG9uZW50LnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQgJy4vUm9vbXNMaXN0Q29tcG9uZW50LnNjc3MnXG5pbXBvcnQge1xuICBTSE9XX0NSRUFURV9ST09NX1BBTkVMLFxuICByZXF1ZXN0Um9vbURhdGFcbn0gZnJvbSAnQWN0aW9ucy9pbmRleCdcblxuY2xhc3MgUm9vbXNMaXN0Q29tcG9uZW50IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpXG4gIH1cblxuICBoYW5kbGVDcmVhdGVSb29tID0gKGV2ZW50KSA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIHRoaXMucHJvcHMuc2hvd0NyZWF0ZVJvb21QYW5lbCgpXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgcm9vbXNMaXN0LFxuICAgICAgcmVxdWVzdFJvb21EYXRhXG4gICAgfSA9IHRoaXMucHJvcHNcblxuICAgIGlmKCFyb29tc0xpc3QubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxwPk5vIHJvb21zIHlldDwvcD5cbiAgICAgICAgICA8YSBocmVmPScjJyBvbkNsaWNrPXt0aGlzLmhhbmRsZUNyZWF0ZVJvb219PkNyZWF0ZSByb29tPC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIClcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuKFxuICAgICAgPGRpdj5cbiAgICAgICAgPGEgaHJlZj0nIycgb25DbGljaz17dGhpcy5oYW5kbGVDcmVhdGVSb29tfT5DcmVhdGUgcm9vbTwvYT5cbiAgICAgICAge3Jvb21zTGlzdC5tYXAociA9PiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Jvb21zLWxpc3QtaXRlbSdcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHJlcXVlc3RSb29tRGF0YShyLl9pZCl9ID5cbiAgICAgICAgICAgIDxpbWcgc3JjPSdodHRwczovL3BpY3N1bS5waG90b3MvNTAvNTAvP3JhbmRvbScgLz5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxoND48c3Ryb25nPntyLnRpdGxlfTwvc3Ryb25nPjwvaDQ+XG4gICAgICAgICAgICAgIDxwPntyLmxhc3RNZXNzYWdlLnVzZXJuYW1lfToge3IubGFzdE1lc3NhZ2UuY29udGVudH08L3A+XG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT0nc21hbGwtZGF0ZSc+e3IubGFzdE1lc3NhZ2UuZGF0ZX08L3A+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKSl9XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn0gXG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSkgPT4ge1xuICByZXR1cm4ge1xuICAgIHJvb21zTGlzdDogc3RhdGUucm9vbXNMaXN0XG4gIH1cbn1cblxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgc2hvd0NyZWF0ZVJvb21QYW5lbDogKCkgPT4gZGlzcGF0Y2goe3R5cGU6IFNIT1dfQ1JFQVRFX1JPT01fUEFORUx9KSxcbiAgICByZXF1ZXN0Um9vbURhdGE6IChpZCkgPT4gZGlzcGF0Y2gocmVxdWVzdFJvb21EYXRhKGlkKSlcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICBtYXBTdGF0ZVRvUHJvcHMsXG4gIG1hcERpc3BhdGNoVG9Qcm9wcylcbiAgKFJvb21zTGlzdENvbXBvbmVudCkiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XHJcblx0aWYgKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcclxuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcclxuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxyXG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJleHBvcnRzXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxyXG5cdFx0fSk7XHJcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcclxuXHR9XHJcblx0cmV0dXJuIG1vZHVsZTtcclxufTtcclxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW52YXJpYW50KFxuICAgICAgZmFsc2UsXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbVxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzID0gZW1wdHlGdW5jdGlvbjtcbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCBSb29tc0xpc3RDb21wb25lbnQgZnJvbSAnLi9Sb29tc0xpc3RDb21wb25lbnQnXG5pbXBvcnQgU2VhcmNoUm9vbXNMaXN0Q29tcG9uZW50IGZyb20gJy4vU2VhcmNoUm9vbXNMaXN0Q29tcG9uZW50J1xuaW1wb3J0IFJvb21Db21wb25lbnQgZnJvbSAnLi9Sb29tQ29tcG9uZW50J1xuaW1wb3J0IElucHV0Q29tcG9uZW50IGZyb20gJy4vSW5wdXRDb21wb25lbnQnXG5pbXBvcnQgJy4vQXBwLnNjc3MnXG5pbXBvcnQgc29ja2V0IGZyb20gJ1Jvb3QvU29ja2V0J1xuaW1wb3J0IHtcbiAgcmVxdWVzdFJvb21zTGlzdCxcbiAgcmVjZWl2ZVJvb21zTGlzdCxcbiAgcmVjZWl2ZVVzZXJzTGlzdCxcbiAgcmVjZWl2ZU1lc3NhZ2Vcbn0gZnJvbSAnQWN0aW9ucy9pbmRleCdcbmltcG9ydCBDcmVhdGVSb29tUGFuZWwgZnJvbSAnLi9DcmVhdGVSb29tUGFuZWwnXG5cbmNsYXNzIEFwcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpXG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7XG4gICAgICByZXF1ZXN0Um9vbXNMaXN0LFxuICAgICAgcmVjZWl2ZVJvb21zTGlzdCxcbiAgICAgIHJlY2VpdmVVc2Vyc0xpc3QsXG4gICAgICByZWNlaXZlTWVzc2FnZSxcbiAgICAgIGN1cnJlbnRVc2VyXG4gICAgfSA9IHRoaXMucHJvcHNcblxuICAgIHNvY2tldC5vbignUkVDRUlWRV9ST09NU19MSVNUJywgKHJvb21zTGlzdCkgPT4ge1xuICAgICAgLy9jb25zb2xlLmxvZyhgUmVjZWl2ZWQgcm9vbXMgbGlzdDogJHtyb29tc0xpc3R9YClcbiAgICAgIHJlY2VpdmVSb29tc0xpc3QoSlNPTi5wYXJzZShyb29tc0xpc3QpKVxuICAgIH0pXG5cbiAgICBzb2NrZXQub24oJ1JFQ0VJVkVfVVNFUlNfTElTVCcsICh1c2Vyc0xpc3QpID0+IHtcbiAgICAgIC8vY29uc29sZS5sb2coYFJlY2VpdmVkIHVzZXJzIGxpc3Q6ICR7dXNlcnNMaXN0fWApXG4gICAgICByZWNlaXZlVXNlcnNMaXN0KEpTT04ucGFyc2UodXNlcnNMaXN0KSlcbiAgICB9KVxuXG4gICAgc29ja2V0Lm9uKCdSRUNFSVZFX01FU1NBR0UnLCAobWVzc2FnZSkgPT4ge1xuICAgICAgcmVjZWl2ZU1lc3NhZ2UoSlNPTi5wYXJzZShtZXNzYWdlKSlcbiAgICB9KVxuXG4gICAgLy8gUmVxdWVzdGluZyByb29tcyBsaXN0IHRoZSBmaXJzdCB0aW1lXG4gICAgcmVxdWVzdFJvb21zTGlzdChjdXJyZW50VXNlci5pZClcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBpc0NyZWF0ZVJvb21QYW5lbE9wZW5cbiAgICB9ID0gdGhpcy5wcm9wc1xuXG4gICAgcmV0dXJuKFxuICAgICAgPGRpdiBpZD0nYXBwLWNvbnRhaW5lcic+XG4gICAgICAgIHtpc0NyZWF0ZVJvb21QYW5lbE9wZW4gPyA8Q3JlYXRlUm9vbVBhbmVsIC8+IDogbnVsbH1cbiAgICAgICAgPGgxPkNoYXQgYXBwPC9oMT5cbiAgICAgICAgPGRpdiBpZD0nYm9keS1jb250YWluZXInPlxuICAgICAgICAgIDxkaXYgaWQ9J2xlZnQtY29udGFpbmVyJz5cbiAgICAgICAgICAgIDxTZWFyY2hSb29tc0xpc3RDb21wb25lbnQgLz5cbiAgICAgICAgICAgIDxSb29tc0xpc3RDb21wb25lbnQgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGlkPSdyaWdodC1jb250YWluZXInPlxuICAgICAgICAgICAgPGRpdiBpZD0nY29udmVyc2F0aW9uLWNvbnRhaW5lcic+XG4gICAgICAgICAgICAgIDxSb29tQ29tcG9uZW50IC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgaWQ9J2lucHV0LWNvbnRhaW5lcic+XG4gICAgICAgICAgICAgIDxJbnB1dENvbXBvbmVudCAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSkgPT4ge1xuICByZXR1cm4ge1xuICAgIGN1cnJlbnRVc2VyOiBzdGF0ZS5jdXJyZW50VXNlcixcbiAgICBpc0NyZWF0ZVJvb21QYW5lbE9wZW46IHN0YXRlLmlzQ3JlYXRlUm9vbVBhbmVsT3BlblxuICB9XG59XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaCkgPT4ge1xuICByZXR1cm4ge1xuICAgIHJlcXVlc3RSb29tc0xpc3Q6IChpZCkgPT4gZGlzcGF0Y2gocmVxdWVzdFJvb21zTGlzdChpZCkpLFxuICAgIHJlY2VpdmVSb29tc0xpc3Q6IChyb29tc0xpc3QpID0+IGRpc3BhdGNoKHJlY2VpdmVSb29tc0xpc3Qocm9vbXNMaXN0KSksXG4gICAgcmVjZWl2ZVVzZXJzTGlzdDogKHVzZXJzTGlzdCkgPT4gZGlzcGF0Y2gocmVjZWl2ZVVzZXJzTGlzdCh1c2Vyc0xpc3QpKSxcbiAgICByZWNlaXZlTWVzc2FnZTogKG1lc3NhZ2UpID0+IGRpc3BhdGNoKHJlY2VpdmVNZXNzYWdlKG1lc3NhZ2UpKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwRGlzcGF0Y2hUb1Byb3BzKVxuICAoQXBwKSIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNOb2RlKG9iamVjdCkge1xuICB2YXIgZG9jID0gb2JqZWN0ID8gb2JqZWN0Lm93bmVyRG9jdW1lbnQgfHwgb2JqZWN0IDogZG9jdW1lbnQ7XG4gIHZhciBkZWZhdWx0VmlldyA9IGRvYy5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG4gIHJldHVybiAhIShvYmplY3QgJiYgKHR5cGVvZiBkZWZhdWx0Vmlldy5Ob2RlID09PSAnZnVuY3Rpb24nID8gb2JqZWN0IGluc3RhbmNlb2YgZGVmYXVsdFZpZXcuTm9kZSA6IHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmplY3Qubm9kZVR5cGUgPT09ICdudW1iZXInICYmIHR5cGVvZiBvYmplY3Qubm9kZU5hbWUgPT09ICdzdHJpbmcnKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNOb2RlOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL2lzTm9kZScpO1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIHRleHQgbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNUZXh0Tm9kZShvYmplY3QpIHtcbiAgcmV0dXJuIGlzTm9kZShvYmplY3QpICYmIG9iamVjdC5ub2RlVHlwZSA9PSAzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVGV4dE5vZGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbnZhciBpc1RleHROb2RlID0gcmVxdWlyZSgnLi9pc1RleHROb2RlJyk7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIERPTSBub2RlIGNvbnRhaW5zIG9yIGlzIGFub3RoZXIgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZSkge1xuICBpZiAoIW91dGVyTm9kZSB8fCAhaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZSA9PT0gaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShvdXRlck5vZGUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUoaW5uZXJOb2RlKSkge1xuICAgIHJldHVybiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUucGFyZW50Tm9kZSk7XG4gIH0gZWxzZSBpZiAoJ2NvbnRhaW5zJyBpbiBvdXRlck5vZGUpIHtcbiAgICByZXR1cm4gb3V0ZXJOb2RlLmNvbnRhaW5zKGlubmVyTm9kZSk7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuICEhKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihpbm5lck5vZGUpICYgMTYpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRhaW5zTm9kZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKiBcbiAqL1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gKi9cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gU2FtZVZhbHVlIGFsZ29yaXRobVxuICBpZiAoeCA9PT0geSkge1xuICAgIC8vIFN0ZXBzIDEtNSwgNy0xMFxuICAgIC8vIFN0ZXBzIDYuYi02LmU6ICswICE9IC0wXG4gICAgLy8gQWRkZWQgdGhlIG5vbnplcm8geSBjaGVjayB0byBtYWtlIEZsb3cgaGFwcHksIGJ1dCBpdCBpcyByZWR1bmRhbnRcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICAvLyBTdGVwIDYuYTogTmFOID09IE5hTlxuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBlcXVhbGl0eSBieSBpdGVyYXRpbmcgdGhyb3VnaCBrZXlzIG9uIGFuIG9iamVjdCBhbmQgcmV0dXJuaW5nIGZhbHNlXG4gKiB3aGVuIGFueSBrZXkgaGFzIHZhbHVlcyB3aGljaCBhcmUgbm90IHN0cmljdGx5IGVxdWFsIGJldHdlZW4gdGhlIGFyZ3VtZW50cy5cbiAqIFJldHVybnMgdHJ1ZSB3aGVuIHRoZSB2YWx1ZXMgb2YgYWxsIGtleXMgYXJlIHN0cmljdGx5IGVxdWFsLlxuICovXG5mdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNoYWxsb3dFcXVhbDsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBmYi13d3cvdHlwZW9mLXVuZGVmaW5lZCAqL1xuXG4vKipcbiAqIFNhbWUgYXMgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBidXQgd3JhcHMgaW4gYSB0cnktY2F0Y2ggYmxvY2suIEluIElFIGl0IGlzXG4gKiBub3Qgc2FmZSB0byBjYWxsIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaWYgdGhlcmUgaXMgbm90aGluZyBmb2N1c2VkLlxuICpcbiAqIFRoZSBhY3RpdmVFbGVtZW50IHdpbGwgYmUgbnVsbCBvbmx5IGlmIHRoZSBkb2N1bWVudCBvciBkb2N1bWVudCBib2R5IGlzIG5vdFxuICogeWV0IGRlZmluZWQuXG4gKlxuICogQHBhcmFtIHs/RE9NRG9jdW1lbnR9IGRvYyBEZWZhdWx0cyB0byBjdXJyZW50IGRvY3VtZW50LlxuICogQHJldHVybiB7P0RPTUVsZW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnQoZG9jKSAvKj9ET01FbGVtZW50Ki97XG4gIGRvYyA9IGRvYyB8fCAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDogdW5kZWZpbmVkKTtcbiAgaWYgKHR5cGVvZiBkb2MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jLmFjdGl2ZUVsZW1lbnQgfHwgZG9jLmJvZHk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZG9jLmJvZHk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBY3RpdmVFbGVtZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbi8qKlxuICogU2ltcGxlLCBsaWdodHdlaWdodCBtb2R1bGUgYXNzaXN0aW5nIHdpdGggdGhlIGRldGVjdGlvbiBhbmQgY29udGV4dCBvZlxuICogV29ya2VyLiBIZWxwcyBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXMgYW5kIGFsbG93cyBjb2RlIHRvIHJlYXNvbiBhYm91dFxuICogd2hldGhlciBvciBub3QgdGhleSBhcmUgaW4gYSBXb3JrZXIsIGV2ZW4gaWYgdGhleSBuZXZlciBpbmNsdWRlIHRoZSBtYWluXG4gKiBgUmVhY3RXb3JrZXJgIGRlcGVuZGVuY3kuXG4gKi9cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHtcblxuICBjYW5Vc2VET006IGNhblVzZURPTSxcblxuICBjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblxuICBjYW5Vc2VFdmVudExpc3RlbmVyczogY2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cbiAgY2FuVXNlVmlld3BvcnQ6IGNhblVzZURPTSAmJiAhIXdpbmRvdy5zY3JlZW4sXG5cbiAgaXNJbldvcmtlcjogIWNhblVzZURPTSAvLyBGb3Igbm93LCB0aGlzIGlzIHRydWUgLSBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDsiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjQuMFxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIiksY2E9cmVxdWlyZShcInJlYWN0XCIpLG09cmVxdWlyZShcImZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpLHA9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksdj1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlGdW5jdGlvblwiKSxkYT1yZXF1aXJlKFwiZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudFwiKSxlYT1yZXF1aXJlKFwiZmJqcy9saWIvc2hhbGxvd0VxdWFsXCIpLGZhPXJlcXVpcmUoXCJmYmpzL2xpYi9jb250YWluc05vZGVcIiksaGE9cmVxdWlyZShcImZianMvbGliL2VtcHR5T2JqZWN0XCIpO1xuZnVuY3Rpb24gQShhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGM9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGQ9MDtkPGI7ZCsrKWMrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2QrMV0pO2FhKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsYyl9Y2E/dm9pZCAwOkEoXCIyMjdcIik7XG5mdW5jdGlvbiBpYShhLGIsYyxkLGUsZixnLGgsayl7dGhpcy5faGFzQ2F1Z2h0RXJyb3I9ITE7dGhpcy5fY2F1Z2h0RXJyb3I9bnVsbDt2YXIgbj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxuKX1jYXRjaChyKXt0aGlzLl9jYXVnaHRFcnJvcj1yLHRoaXMuX2hhc0NhdWdodEVycm9yPSEwfX1cbnZhciBCPXtfY2F1Z2h0RXJyb3I6bnVsbCxfaGFzQ2F1Z2h0RXJyb3I6ITEsX3JldGhyb3dFcnJvcjpudWxsLF9oYXNSZXRocm93RXJyb3I6ITEsaW52b2tlR3VhcmRlZENhbGxiYWNrOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsaCxrKXtpYS5hcHBseShCLGFyZ3VtZW50cyl9LGludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcjpmdW5jdGlvbihhLGIsYyxkLGUsZixnLGgsayl7Qi5pbnZva2VHdWFyZGVkQ2FsbGJhY2suYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKEIuaGFzQ2F1Z2h0RXJyb3IoKSl7dmFyIG49Qi5jbGVhckNhdWdodEVycm9yKCk7Qi5faGFzUmV0aHJvd0Vycm9yfHwoQi5faGFzUmV0aHJvd0Vycm9yPSEwLEIuX3JldGhyb3dFcnJvcj1uKX19LHJldGhyb3dDYXVnaHRFcnJvcjpmdW5jdGlvbigpe3JldHVybiBrYS5hcHBseShCLGFyZ3VtZW50cyl9LGhhc0NhdWdodEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIEIuX2hhc0NhdWdodEVycm9yfSxjbGVhckNhdWdodEVycm9yOmZ1bmN0aW9uKCl7aWYoQi5faGFzQ2F1Z2h0RXJyb3Ipe3ZhciBhPVxuQi5fY2F1Z2h0RXJyb3I7Qi5fY2F1Z2h0RXJyb3I9bnVsbDtCLl9oYXNDYXVnaHRFcnJvcj0hMTtyZXR1cm4gYX1BKFwiMTk4XCIpfX07ZnVuY3Rpb24ga2EoKXtpZihCLl9oYXNSZXRocm93RXJyb3Ipe3ZhciBhPUIuX3JldGhyb3dFcnJvcjtCLl9yZXRocm93RXJyb3I9bnVsbDtCLl9oYXNSZXRocm93RXJyb3I9ITE7dGhyb3cgYTt9fXZhciBsYT1udWxsLG1hPXt9O1xuZnVuY3Rpb24gbmEoKXtpZihsYSlmb3IodmFyIGEgaW4gbWEpe3ZhciBiPW1hW2FdLGM9bGEuaW5kZXhPZihhKTstMTxjP3ZvaWQgMDpBKFwiOTZcIixhKTtpZighb2FbY10pe2IuZXh0cmFjdEV2ZW50cz92b2lkIDA6QShcIjk3XCIsYSk7b2FbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0sZz1iLGg9ZDtwYS5oYXNPd25Qcm9wZXJ0eShoKT9BKFwiOTlcIixoKTp2b2lkIDA7cGFbaF09Zjt2YXIgaz1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGspe2ZvcihlIGluIGspay5oYXNPd25Qcm9wZXJ0eShlKSYmcWEoa1tlXSxnLGgpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KHFhKGYucmVnaXN0cmF0aW9uTmFtZSxnLGgpLGU9ITApOmU9ITE7ZT92b2lkIDA6QShcIjk4XCIsZCxhKX19fX1cbmZ1bmN0aW9uIHFhKGEsYixjKXtyYVthXT9BKFwiMTAwXCIsYSk6dm9pZCAwO3JhW2FdPWI7c2FbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgb2E9W10scGE9e30scmE9e30sc2E9e307ZnVuY3Rpb24gdGEoYSl7bGE/QShcIjEwMVwiKTp2b2lkIDA7bGE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7bmEoKX1mdW5jdGlvbiB1YShhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTttYS5oYXNPd25Qcm9wZXJ0eShjKSYmbWFbY109PT1kfHwobWFbY10/QShcIjEwMlwiLGMpOnZvaWQgMCxtYVtjXT1kLGI9ITApfWImJm5hKCl9XG52YXIgdmE9e3BsdWdpbnM6b2EsZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzOnBhLHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzOnJhLHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXM6c2EscG9zc2libGVSZWdpc3RyYXRpb25OYW1lczpudWxsLGluamVjdEV2ZW50UGx1Z2luT3JkZXI6dGEsaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOnVhfSx3YT1udWxsLHhhPW51bGwseWE9bnVsbDtmdW5jdGlvbiB6YShhLGIsYyxkKXtiPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PXlhKGQpO0IuaW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yKGIsYyx2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBBYShhLGIpe251bGw9PWI/QShcIjMwXCIpOnZvaWQgMDtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19ZnVuY3Rpb24gQmEoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIENhPW51bGw7XG5mdW5jdGlvbiBEYShhLGIpe2lmKGEpe3ZhciBjPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGQ9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShjKSlmb3IodmFyIGU9MDtlPGMubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2UrKyl6YShhLGIsY1tlXSxkW2VdKTtlbHNlIGMmJnphKGEsYixjLGQpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fWZ1bmN0aW9uIEVhKGEpe3JldHVybiBEYShhLCEwKX1mdW5jdGlvbiBGYShhKXtyZXR1cm4gRGEoYSwhMSl9dmFyIEdhPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOnRhLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTp1YX07XG5mdW5jdGlvbiBIYShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPXdhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2MmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP0EoXCIyMzFcIixiLHR5cGVvZiBjKTp2b2lkIDA7XG5yZXR1cm4gY31mdW5jdGlvbiBJYShhLGIpe251bGwhPT1hJiYoQ2E9QWEoQ2EsYSkpO2E9Q2E7Q2E9bnVsbDthJiYoYj9CYShhLEVhKTpCYShhLEZhKSxDYT9BKFwiOTVcIik6dm9pZCAwLEIucmV0aHJvd0NhdWdodEVycm9yKCkpfWZ1bmN0aW9uIEphKGEsYixjLGQpe2Zvcih2YXIgZT1udWxsLGY9MDtmPG9hLmxlbmd0aDtmKyspe3ZhciBnPW9hW2ZdO2cmJihnPWcuZXh0cmFjdEV2ZW50cyhhLGIsYyxkKSkmJihlPUFhKGUsZykpfUlhKGUsITEpfXZhciBLYT17aW5qZWN0aW9uOkdhLGdldExpc3RlbmVyOkhhLHJ1bkV2ZW50c0luQmF0Y2g6SWEscnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaDpKYX0sTGE9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksQz1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK0xhLE1hPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrTGE7XG5mdW5jdGlvbiBOYShhKXtpZihhW0NdKXJldHVybiBhW0NdO2Zvcig7IWFbQ107KWlmKGEucGFyZW50Tm9kZSlhPWEucGFyZW50Tm9kZTtlbHNlIHJldHVybiBudWxsO2E9YVtDXTtyZXR1cm4gNT09PWEudGFnfHw2PT09YS50YWc/YTpudWxsfWZ1bmN0aW9uIE9hKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTtBKFwiMzNcIil9ZnVuY3Rpb24gUGEoYSl7cmV0dXJuIGFbTWFdfHxudWxsfXZhciBRYT17cHJlY2FjaGVGaWJlck5vZGU6ZnVuY3Rpb24oYSxiKXtiW0NdPWF9LGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlOk5hLGdldEluc3RhbmNlRnJvbU5vZGU6ZnVuY3Rpb24oYSl7YT1hW0NdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZz9udWxsOmF9LGdldE5vZGVGcm9tSW5zdGFuY2U6T2EsZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZTpQYSx1cGRhdGVGaWJlclByb3BzOmZ1bmN0aW9uKGEsYil7YVtNYV09Yn19O1xuZnVuY3Rpb24gRihhKXtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfWZ1bmN0aW9uIFJhKGEsYixjKXtmb3IodmFyIGQ9W107YTspZC5wdXNoKGEpLGE9RihhKTtmb3IoYT1kLmxlbmd0aDswPGEtLTspYihkW2FdLFwiY2FwdHVyZWRcIixjKTtmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKWIoZFthXSxcImJ1YmJsZWRcIixjKX1mdW5jdGlvbiBTYShhLGIsYyl7aWYoYj1IYShhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPUFhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPUFhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfWZ1bmN0aW9uIFRhKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMmJlJhKGEuX3RhcmdldEluc3QsU2EsYSl9XG5mdW5jdGlvbiBVYShhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXt2YXIgYj1hLl90YXJnZXRJbnN0O2I9Yj9GKGIpOm51bGw7UmEoYixTYSxhKX19ZnVuY3Rpb24gVmEoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9SGEoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPUFhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPUFhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBYYShhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJlZhKGEuX3RhcmdldEluc3QsbnVsbCxhKX1mdW5jdGlvbiBZYShhKXtCYShhLFRhKX1cbmZ1bmN0aW9uIFphKGEsYixjLGQpe2lmKGMmJmQpYTp7dmFyIGU9Yztmb3IodmFyIGY9ZCxnPTAsaD1lO2g7aD1GKGgpKWcrKztoPTA7Zm9yKHZhciBrPWY7aztrPUYoaykpaCsrO2Zvcig7MDxnLWg7KWU9RihlKSxnLS07Zm9yKDswPGgtZzspZj1GKGYpLGgtLTtmb3IoO2ctLTspe2lmKGU9PT1mfHxlPT09Zi5hbHRlcm5hdGUpYnJlYWsgYTtlPUYoZSk7Zj1GKGYpfWU9bnVsbH1lbHNlIGU9bnVsbDtmPWU7Zm9yKGU9W107YyYmYyE9PWY7KXtnPWMuYWx0ZXJuYXRlO2lmKG51bGwhPT1nJiZnPT09ZilicmVhaztlLnB1c2goYyk7Yz1GKGMpfWZvcihjPVtdO2QmJmQhPT1mOyl7Zz1kLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PWYpYnJlYWs7Yy5wdXNoKGQpO2Q9RihkKX1mb3IoZD0wO2Q8ZS5sZW5ndGg7ZCsrKVZhKGVbZF0sXCJidWJibGVkXCIsYSk7Zm9yKGE9Yy5sZW5ndGg7MDxhLS07KVZhKGNbYV0sXCJjYXB0dXJlZFwiLGIpfVxudmFyICRhPXthY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzOllhLGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0OmZ1bmN0aW9uKGEpe0JhKGEsVWEpfSxhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXM6WmEsYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXM6ZnVuY3Rpb24oYSl7QmEoYSxYYSl9fTtmdW5jdGlvbiBhYihhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO2NbXCJtc1wiK2FdPVwiTVNcIitiO2NbXCJPXCIrYV09XCJvXCIrYi50b0xvd2VyQ2FzZSgpO3JldHVybiBjfVxudmFyIGJiPXthbmltYXRpb25lbmQ6YWIoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246YWIoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDphYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDphYihcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LGNiPXt9LGRiPXt9O20uY2FuVXNlRE9NJiYoZGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgYmIuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgYmIuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgYmIuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgYmIudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtcbmZ1bmN0aW9uIGViKGEpe2lmKGNiW2FdKXJldHVybiBjYlthXTtpZighYmJbYV0pcmV0dXJuIGE7dmFyIGI9YmJbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gZGIpcmV0dXJuIGNiW2FdPWJbY107cmV0dXJuIGF9dmFyIGZiPWViKFwiYW5pbWF0aW9uZW5kXCIpLGdiPWViKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLGhiPWViKFwiYW5pbWF0aW9uc3RhcnRcIiksaWI9ZWIoXCJ0cmFuc2l0aW9uZW5kXCIpLGpiPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxrYj1udWxsO1xuZnVuY3Rpb24gbGIoKXsha2ImJm0uY2FuVXNlRE9NJiYoa2I9XCJ0ZXh0Q29udGVudFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50P1widGV4dENvbnRlbnRcIjpcImlubmVyVGV4dFwiKTtyZXR1cm4ga2J9dmFyIEc9e19yb290Om51bGwsX3N0YXJ0VGV4dDpudWxsLF9mYWxsYmFja1RleHQ6bnVsbH07ZnVuY3Rpb24gbWIoKXtpZihHLl9mYWxsYmFja1RleHQpcmV0dXJuIEcuX2ZhbGxiYWNrVGV4dDt2YXIgYSxiPUcuX3N0YXJ0VGV4dCxjPWIubGVuZ3RoLGQsZT1uYigpLGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7Ry5fZmFsbGJhY2tUZXh0PWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCk7cmV0dXJuIEcuX2ZhbGxiYWNrVGV4dH1mdW5jdGlvbiBuYigpe3JldHVyblwidmFsdWVcImluIEcuX3Jvb3Q/Ry5fcm9vdC52YWx1ZTpHLl9yb290W2xiKCldfVxudmFyIG9iPVwiZGlzcGF0Y2hDb25maWcgX3RhcmdldEluc3QgbmF0aXZlRXZlbnQgaXNEZWZhdWx0UHJldmVudGVkIGlzUHJvcGFnYXRpb25TdG9wcGVkIF9kaXNwYXRjaExpc3RlbmVycyBfZGlzcGF0Y2hJbnN0YW5jZXNcIi5zcGxpdChcIiBcIikscGI9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OnYudGhhdFJldHVybnNOdWxsLGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG5mdW5jdGlvbiBIKGEsYixjLGQpe3RoaXMuZGlzcGF0Y2hDb25maWc9YTt0aGlzLl90YXJnZXRJbnN0PWI7dGhpcy5uYXRpdmVFdmVudD1jO2E9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7Zm9yKHZhciBlIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShlKSYmKChiPWFbZV0pP3RoaXNbZV09YihjKTpcInRhcmdldFwiPT09ZT90aGlzLnRhcmdldD1kOnRoaXNbZV09Y1tlXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWMuZGVmYXVsdFByZXZlbnRlZD9jLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1jLnJldHVyblZhbHVlKT92LnRoYXRSZXR1cm5zVHJ1ZTp2LnRoYXRSZXR1cm5zRmFsc2U7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD12LnRoYXRSZXR1cm5zRmFsc2U7cmV0dXJuIHRoaXN9XG5wKEgucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9di50aGF0UmV0dXJuc1RydWUpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9di50aGF0UmV0dXJuc1RydWUpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9di50aGF0UmV0dXJuc1RydWV9LGlzUGVyc2lzdGVudDp2LnRoYXRSZXR1cm5zRmFsc2UsXG5kZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsYjtmb3IoYiBpbiBhKXRoaXNbYl09bnVsbDtmb3IoYT0wO2E8b2IubGVuZ3RoO2ErKyl0aGlzW29iW2FdXT1udWxsfX0pO0guSW50ZXJmYWNlPXBiO0guZXh0ZW5kPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXt9ZnVuY3Rpb24gYygpe3JldHVybiBkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgZD10aGlzO2IucHJvdG90eXBlPWQucHJvdG90eXBlO3ZhciBlPW5ldyBiO3AoZSxjLnByb3RvdHlwZSk7Yy5wcm90b3R5cGU9ZTtjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jO2MuSW50ZXJmYWNlPXAoe30sZC5JbnRlcmZhY2UsYSk7Yy5leHRlbmQ9ZC5leHRlbmQ7cWIoYyk7cmV0dXJuIGN9O3FiKEgpO1xuZnVuY3Rpb24gcmIoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9ZnVuY3Rpb24gc2IoYSl7YSBpbnN0YW5jZW9mIHRoaXM/dm9pZCAwOkEoXCIyMjNcIik7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfWZ1bmN0aW9uIHFiKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPXJiO2EucmVsZWFzZT1zYn12YXIgdGI9SC5leHRlbmQoe2RhdGE6bnVsbH0pLHViPUguZXh0ZW5kKHtkYXRhOm51bGx9KSx2Yj1bOSwxMywyNywzMl0sd2I9bS5jYW5Vc2VET00mJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LHhiPW51bGw7bS5jYW5Vc2VET00mJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKHhiPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgeWI9bS5jYW5Vc2VET00mJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiF4Yix6Yj1tLmNhblVzZURPTSYmKCF3Ynx8eGImJjg8eGImJjExPj14YiksQWI9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksQmI9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25lbmQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9udXBkYXRlIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfX0sQ2I9ITE7XG5mdW5jdGlvbiBEYihhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PXZiLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJibHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gRWIoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgRmI9ITE7ZnVuY3Rpb24gR2IoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIEViKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtDYj0hMDtyZXR1cm4gQWI7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09QWImJkNiP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIEhiKGEsYil7aWYoRmIpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IXdiJiZEYihhLGIpPyhhPW1iKCksRy5fcm9vdD1udWxsLEcuX3N0YXJ0VGV4dD1udWxsLEcuX2ZhbGxiYWNrVGV4dD1udWxsLEZiPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiB6Yj9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBJYj17ZXZlbnRUeXBlczpCYixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXZvaWQgMDt2YXIgZj12b2lkIDA7aWYod2IpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6ZT1CYi5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6ZT1CYi5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmU9QmIuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1lPXZvaWQgMH1lbHNlIEZiP0RiKGEsYykmJihlPUJiLmNvbXBvc2l0aW9uRW5kKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGU9QmIuY29tcG9zaXRpb25TdGFydCk7ZT8oemImJihGYnx8ZSE9PUJiLmNvbXBvc2l0aW9uU3RhcnQ/ZT09PUJiLmNvbXBvc2l0aW9uRW5kJiZGYiYmKGY9bWIoKSk6KEcuX3Jvb3Q9ZCxHLl9zdGFydFRleHQ9bmIoKSxGYj0hMCkpLGU9dGIuZ2V0UG9vbGVkKGUsYixjLGQpLGY/ZS5kYXRhPVxuZjooZj1FYihjKSxudWxsIT09ZiYmKGUuZGF0YT1mKSksWWEoZSksZj1lKTpmPW51bGw7KGE9eWI/R2IoYSxjKTpIYihhLGMpKT8oYj11Yi5nZXRQb29sZWQoQmIuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLFlhKGIpKTpiPW51bGw7cmV0dXJuIG51bGw9PT1mP2I6bnVsbD09PWI/ZjpbZixiXX19LEpiPW51bGwsS2I9e2luamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQ6ZnVuY3Rpb24oYSl7SmI9YX19LExiPW51bGwsTWI9bnVsbDtmdW5jdGlvbiBOYihhKXtpZihhPXhhKGEpKXtKYiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIEpiLnJlc3RvcmVDb250cm9sbGVkU3RhdGU/dm9pZCAwOkEoXCIxOTRcIik7dmFyIGI9d2EoYS5zdGF0ZU5vZGUpO0piLnJlc3RvcmVDb250cm9sbGVkU3RhdGUoYS5zdGF0ZU5vZGUsYS50eXBlLGIpfX1mdW5jdGlvbiBPYihhKXtMYj9NYj9NYi5wdXNoKGEpOk1iPVthXTpMYj1hfVxuZnVuY3Rpb24gUGIoKXtyZXR1cm4gbnVsbCE9PUxifHxudWxsIT09TWJ9ZnVuY3Rpb24gUWIoKXtpZihMYil7dmFyIGE9TGIsYj1NYjtNYj1MYj1udWxsO05iKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylOYihiW2FdKX19dmFyIFJiPXtpbmplY3Rpb246S2IsZW5xdWV1ZVN0YXRlUmVzdG9yZTpPYixuZWVkc1N0YXRlUmVzdG9yZTpQYixyZXN0b3JlU3RhdGVJZk5lZWRlZDpRYn07ZnVuY3Rpb24gU2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBUYihhLGIsYyl7cmV0dXJuIGEoYixjKX1mdW5jdGlvbiBVYigpe312YXIgVmI9ITE7ZnVuY3Rpb24gV2IoYSxiKXtpZihWYilyZXR1cm4gYShiKTtWYj0hMDt0cnl7cmV0dXJuIFNiKGEsYil9ZmluYWxseXtWYj0hMSxQYigpJiYoVWIoKSxRYigpKX19XG52YXIgWGI9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gWWIoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFYYlthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gWmIoYSl7YT1hLnRhcmdldHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1cbmZ1bmN0aW9uICRiKGEsYil7aWYoIW0uY2FuVXNlRE9NfHxiJiYhKFwiYWRkRXZlbnRMaXN0ZW5lclwiaW4gZG9jdW1lbnQpKXJldHVybiExO2E9XCJvblwiK2E7Yj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gYWMoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIGJjKGEpe3ZhciBiPWFjKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBjYyhhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9YmMoYSkpfWZ1bmN0aW9uIGRjKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1hYyhhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfVxudmFyIGVjPWNhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyLEk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixmYz1JP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGdjPUk/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixoYz1JP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxpYz1JP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxqYz1JP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxtYz1JP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxuYz1JP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLG9jPUk/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEscGM9ST9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscWM9ST9TeW1ib2wuZm9yKFwicmVhY3QudGltZW91dFwiKTpcbjYwMTEzLHJjPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBzYyhhKXtpZihudWxsPT09YXx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO2E9cmMmJmFbcmNdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG5mdW5jdGlvbiB0YyhhKXt2YXIgYj1hLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGIuZGlzcGxheU5hbWV8fGIubmFtZTtpZihcInN0cmluZ1wiPT09dHlwZW9mIGIpcmV0dXJuIGI7c3dpdGNoKGIpe2Nhc2Ugb2M6cmV0dXJuXCJBc3luY01vZGVcIjtjYXNlIG5jOnJldHVyblwiQ29udGV4dC5Db25zdW1lclwiO2Nhc2UgaGM6cmV0dXJuXCJSZWFjdEZyYWdtZW50XCI7Y2FzZSBnYzpyZXR1cm5cIlJlYWN0UG9ydGFsXCI7Y2FzZSBqYzpyZXR1cm5cIlByb2ZpbGVyKFwiK2EucGVuZGluZ1Byb3BzLmlkK1wiKVwiO2Nhc2UgbWM6cmV0dXJuXCJDb250ZXh0LlByb3ZpZGVyXCI7Y2FzZSBpYzpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIHFjOnJldHVyblwiVGltZW91dFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpc3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgcGM6cmV0dXJuIGE9Yi5yZW5kZXIuZGlzcGxheU5hbWV8fGIucmVuZGVyLm5hbWV8fFwiXCIsXCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK1xuYStcIilcIjpcIkZvcndhcmRSZWZcIn1yZXR1cm4gbnVsbH1mdW5jdGlvbiB2YyhhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxOmNhc2UgMjpjYXNlIDU6dmFyIGM9YS5fZGVidWdPd25lcixkPWEuX2RlYnVnU291cmNlO3ZhciBlPXRjKGEpO3ZhciBmPW51bGw7YyYmKGY9dGMoYykpO2M9ZDtlPVwiXFxuICAgIGluIFwiKyhlfHxcIlVua25vd25cIikrKGM/XCIgKGF0IFwiK2MuZmlsZU5hbWUucmVwbGFjZSgvXi4qW1xcXFxcXC9dLyxcIlwiKStcIjpcIitjLmxpbmVOdW1iZXIrXCIpXCI6Zj9cIiAoY3JlYXRlZCBieSBcIitmK1wiKVwiOlwiXCIpO2JyZWFrIGE7ZGVmYXVsdDplPVwiXCJ9Yis9ZTthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxudmFyIHdjPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyx4Yz17fSx5Yz17fTtmdW5jdGlvbiB6YyhhKXtpZih5Yy5oYXNPd25Qcm9wZXJ0eShhKSlyZXR1cm4hMDtpZih4Yy5oYXNPd25Qcm9wZXJ0eShhKSlyZXR1cm4hMTtpZih3Yy50ZXN0KGEpKXJldHVybiB5Y1thXT0hMDt4Y1thXT0hMDtyZXR1cm4hMX1cbmZ1bmN0aW9uIEFjKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIEJjKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fEFjKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9XG5mdW5jdGlvbiBKKGEsYixjLGQsZSl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yn12YXIgSz17fTtcImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0tbYV09bmV3IEooYSwwLCExLGEsbnVsbCl9KTtcbltbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtLW2JdPW5ldyBKKGIsMSwhMSxhWzFdLG51bGwpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7S1thXT1uZXcgSihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtLW2FdPW5ldyBKKGEsMiwhMSxhLG51bGwpfSk7XG5cImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0tbYV09bmV3IEooYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtLW2FdPW5ldyBKKGEsMywhMCxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0tbYV09bmV3IEooYSw0LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1xuW1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0tbYV09bmV3IEooYSw2LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7S1thXT1uZXcgSihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7dmFyIENjPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gRGMoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoQ2MsXG5EYyk7S1tiXT1uZXcgSihiLDEsITEsYSxudWxsKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOmhyZWYgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoQ2MsRGMpO0tbYl09bmV3IEooYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoQ2MsRGMpO0tbYl09bmV3IEooYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIil9KTtLLnRhYkluZGV4PW5ldyBKKFwidGFiSW5kZXhcIiwxLCExLFwidGFiaW5kZXhcIixudWxsKTtcbmZ1bmN0aW9uIEVjKGEsYixjLGQpe3ZhciBlPUsuaGFzT3duUHJvcGVydHkoYik/S1tiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KEJjKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT96YyhiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxuZnVuY3Rpb24gRmMoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIHAoe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIEdjKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPUhjKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gSWMoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZFYyhhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gSmMoYSxiKXtJYyhhLGIpO3ZhciBjPUhjKGIudmFsdWUpO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWIudHlwZSl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtiLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/S2MoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmS2MoYSxiLnR5cGUsSGMoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBMYyhhLGIpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSlcIlwiPT09YS52YWx1ZSYmKGEudmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlKSxhLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Yj1hLm5hbWU7XCJcIiE9PWImJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO1wiXCIhPT1iJiYoYS5uYW1lPWIpfWZ1bmN0aW9uIEtjKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1cbmZ1bmN0aW9uIEhjKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX12YXIgTWM9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY2hhbmdlIGNsaWNrIGZvY3VzIGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07ZnVuY3Rpb24gTmMoYSxiLGMpe2E9SC5nZXRQb29sZWQoTWMuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtPYihjKTtZYShhKTtyZXR1cm4gYX12YXIgT2M9bnVsbCxQYz1udWxsO2Z1bmN0aW9uIFFjKGEpe0lhKGEsITEpfWZ1bmN0aW9uIFJjKGEpe3ZhciBiPU9hKGEpO2lmKGRjKGIpKXJldHVybiBhfVxuZnVuY3Rpb24gU2MoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgVGM9ITE7bS5jYW5Vc2VET00mJihUYz0kYihcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtmdW5jdGlvbiBVYygpe09jJiYoT2MuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsVmMpLFBjPU9jPW51bGwpfWZ1bmN0aW9uIFZjKGEpe1widmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZSYyhQYykmJihhPU5jKFBjLGEsWmIoYSkpLFdiKFFjLGEpKX1mdW5jdGlvbiBXYyhhLGIsYyl7XCJmb2N1c1wiPT09YT8oVWMoKSxPYz1iLFBjPWMsT2MuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsVmMpKTpcImJsdXJcIj09PWEmJlVjKCl9ZnVuY3Rpb24gWGMoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gUmMoUGMpfVxuZnVuY3Rpb24gWWMoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBSYyhiKX1mdW5jdGlvbiBaYyhhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBSYyhiKX1cbnZhciAkYz17ZXZlbnRUeXBlczpNYyxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOlRjLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9PYShiKTp3aW5kb3csZj12b2lkIDAsZz12b2lkIDAsaD1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XCJzZWxlY3RcIj09PWh8fFwiaW5wdXRcIj09PWgmJlwiZmlsZVwiPT09ZS50eXBlP2Y9U2M6WWIoZSk/VGM/Zj1aYzooZj1YYyxnPVdjKTooaD1lLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09aC50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09ZS50eXBlfHxcInJhZGlvXCI9PT1lLnR5cGUpJiYoZj1ZYyk7aWYoZiYmKGY9ZihhLGIpKSlyZXR1cm4gTmMoZixjLGQpO2cmJmcoYSxlLGIpO1wiYmx1clwiPT09YSYmbnVsbCE9YiYmKGE9Yi5fd3JhcHBlclN0YXRlfHxlLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJktjKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LGFkPUguZXh0ZW5kKHt2aWV3Om51bGwsXG5kZXRhaWw6bnVsbH0pLGJkPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBjZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPWJkW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gZGQoKXtyZXR1cm4gY2R9XG52YXIgZWQ9YWQuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOmRkLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfX0pLGZkPWVkLmV4dGVuZCh7cG9pbnRlcklkOm51bGwsd2lkdGg6bnVsbCxoZWlnaHQ6bnVsbCxwcmVzc3VyZTpudWxsLHRpbHRYOm51bGwsdGlsdFk6bnVsbCxwb2ludGVyVHlwZTpudWxsLGlzUHJpbWFyeTpudWxsfSksZ2Q9e21vdXNlRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0sXG5tb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LHBvaW50ZXJFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckVudGVyXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfSxwb2ludGVyTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX19LGhkPXtldmVudFR5cGVzOmdkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEsZj1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoZSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fCFmJiYhZSlyZXR1cm4gbnVsbDtlPWQud2luZG93PT09ZD9kOihlPWQub3duZXJEb2N1bWVudCk/ZS5kZWZhdWx0Vmlld3x8XG5lLnBhcmVudFdpbmRvdzp3aW5kb3c7Zj8oZj1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/TmEoYik6bnVsbCk6Zj1udWxsO2lmKGY9PT1iKXJldHVybiBudWxsO3ZhciBnPXZvaWQgMCxoPXZvaWQgMCxrPXZvaWQgMCxuPXZvaWQgMDtpZihcIm1vdXNlb3V0XCI9PT1hfHxcIm1vdXNlb3ZlclwiPT09YSlnPWVkLGg9Z2QubW91c2VMZWF2ZSxrPWdkLm1vdXNlRW50ZXIsbj1cIm1vdXNlXCI7ZWxzZSBpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpZz1mZCxoPWdkLnBvaW50ZXJMZWF2ZSxrPWdkLnBvaW50ZXJFbnRlcixuPVwicG9pbnRlclwiO2E9bnVsbD09Zj9lOk9hKGYpO2U9bnVsbD09Yj9lOk9hKGIpO2g9Zy5nZXRQb29sZWQoaCxmLGMsZCk7aC50eXBlPW4rXCJsZWF2ZVwiO2gudGFyZ2V0PWE7aC5yZWxhdGVkVGFyZ2V0PWU7Yz1nLmdldFBvb2xlZChrLGIsYyxkKTtjLnR5cGU9bitcImVudGVyXCI7Yy50YXJnZXQ9ZTtjLnJlbGF0ZWRUYXJnZXQ9YTtaYShoLFxuYyxmLGIpO3JldHVybltoLGNdfX07ZnVuY3Rpb24gaWQoYSl7dmFyIGI9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7aWYoMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMTtmb3IoO2IucmV0dXJuOylpZihiPWIucmV0dXJuLDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDF9cmV0dXJuIDM9PT1iLnRhZz8yOjN9ZnVuY3Rpb24gamQoYSl7MiE9PWlkKGEpP0EoXCIxODhcIik6dm9pZCAwfVxuZnVuY3Rpb24ga2QoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpcmV0dXJuIGI9aWQoYSksMz09PWI/QShcIjE4OFwiKTp2b2lkIDAsMT09PWI/bnVsbDphO2Zvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybixmPWU/ZS5hbHRlcm5hdGU6bnVsbDtpZighZXx8IWYpYnJlYWs7aWYoZS5jaGlsZD09PWYuY2hpbGQpe2Zvcih2YXIgZz1lLmNoaWxkO2c7KXtpZihnPT09YylyZXR1cm4gamQoZSksYTtpZihnPT09ZClyZXR1cm4gamQoZSksYjtnPWcuc2libGluZ31BKFwiMTg4XCIpfWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2c9ITE7Zm9yKHZhciBoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWc/XG52b2lkIDA6QShcIjE4OVwiKX19Yy5hbHRlcm5hdGUhPT1kP0EoXCIxOTBcIik6dm9pZCAwfTMhPT1jLnRhZz9BKFwiMTg4XCIpOnZvaWQgMDtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGxkKGEpe2E9a2QoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBtZChhKXthPWtkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQmJjQhPT1iLnRhZyliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9dmFyIG5kPUguZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxvZD1ILmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLHBkPWFkLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7XG5mdW5jdGlvbiBxZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciByZD17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sc2Q9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LHRkPWFkLmV4dGVuZCh7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1yZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1xZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/c2RbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOmRkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP3FkKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP3FkKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksdWQ9ZWQuZXh0ZW5kKHtkYXRhVHJhbnNmZXI6bnVsbH0pLHZkPWFkLmV4dGVuZCh7dG91Y2hlczpudWxsLHRhcmdldFRvdWNoZXM6bnVsbCxjaGFuZ2VkVG91Y2hlczpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOmRkfSksd2Q9SC5leHRlbmQoe3Byb3BlcnR5TmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSkseGQ9ZWQuZXh0ZW5kKHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW5cbmE/LWEud2hlZWxEZWx0YVg6MH0sZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOm51bGwsZGVsdGFNb2RlOm51bGx9KSx5ZD1bW1wiYWJvcnRcIixcImFib3J0XCJdLFtmYixcImFuaW1hdGlvbkVuZFwiXSxbZ2IsXCJhbmltYXRpb25JdGVyYXRpb25cIl0sW2hiLFwiYW5pbWF0aW9uU3RhcnRcIl0sW1wiY2FucGxheVwiLFwiY2FuUGxheVwiXSxbXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIl0sW1wiZHJhZ1wiLFwiZHJhZ1wiXSxbXCJkcmFnZW50ZXJcIixcImRyYWdFbnRlclwiXSxbXCJkcmFnZXhpdFwiLFwiZHJhZ0V4aXRcIl0sW1wiZHJhZ2xlYXZlXCIsXCJkcmFnTGVhdmVcIl0sW1wiZHJhZ292ZXJcIixcImRyYWdPdmVyXCJdLFtcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiXSxbXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCJdLFtcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCJdLFxuW1wiZW5kZWRcIixcImVuZGVkXCJdLFtcImVycm9yXCIsXCJlcnJvclwiXSxbXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIl0sW1wibG9hZFwiLFwibG9hZFwiXSxbXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCJdLFtcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiXSxbXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiXSxbXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiXSxbXCJtb3VzZW1vdmVcIixcIm1vdXNlTW92ZVwiXSxbXCJtb3VzZW91dFwiLFwibW91c2VPdXRcIl0sW1wibW91c2VvdmVyXCIsXCJtb3VzZU92ZXJcIl0sW1wicGxheWluZ1wiLFwicGxheWluZ1wiXSxbXCJwb2ludGVybW92ZVwiLFwicG9pbnRlck1vdmVcIl0sW1wicG9pbnRlcm91dFwiLFwicG9pbnRlck91dFwiXSxbXCJwb2ludGVyb3ZlclwiLFwicG9pbnRlck92ZXJcIl0sW1wicHJvZ3Jlc3NcIixcInByb2dyZXNzXCJdLFtcInNjcm9sbFwiLFwic2Nyb2xsXCJdLFtcInNlZWtpbmdcIixcInNlZWtpbmdcIl0sW1wic3RhbGxlZFwiLFwic3RhbGxlZFwiXSxcbltcInN1c3BlbmRcIixcInN1c3BlbmRcIl0sW1widGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiXSxbXCJ0b2dnbGVcIixcInRvZ2dsZVwiXSxbXCJ0b3VjaG1vdmVcIixcInRvdWNoTW92ZVwiXSxbaWIsXCJ0cmFuc2l0aW9uRW5kXCJdLFtcIndhaXRpbmdcIixcIndhaXRpbmdcIl0sW1wid2hlZWxcIixcIndoZWVsXCJdXSx6ZD17fSxBZD17fTtmdW5jdGlvbiBCZChhLGIpe3ZhciBjPWFbMF07YT1hWzFdO3ZhciBkPVwib25cIisoYVswXS50b1VwcGVyQ2FzZSgpK2Euc2xpY2UoMSkpO2I9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmQsY2FwdHVyZWQ6ZCtcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltjXSxpc0ludGVyYWN0aXZlOmJ9O3pkW2FdPWI7QWRbY109Yn1cbltbXCJibHVyXCIsXCJibHVyXCJdLFtcImNhbmNlbFwiLFwiY2FuY2VsXCJdLFtcImNsaWNrXCIsXCJjbGlja1wiXSxbXCJjbG9zZVwiLFwiY2xvc2VcIl0sW1wiY29udGV4dG1lbnVcIixcImNvbnRleHRNZW51XCJdLFtcImNvcHlcIixcImNvcHlcIl0sW1wiY3V0XCIsXCJjdXRcIl0sW1wiZGJsY2xpY2tcIixcImRvdWJsZUNsaWNrXCJdLFtcImRyYWdlbmRcIixcImRyYWdFbmRcIl0sW1wiZHJhZ3N0YXJ0XCIsXCJkcmFnU3RhcnRcIl0sW1wiZHJvcFwiLFwiZHJvcFwiXSxbXCJmb2N1c1wiLFwiZm9jdXNcIl0sW1wiaW5wdXRcIixcImlucHV0XCJdLFtcImludmFsaWRcIixcImludmFsaWRcIl0sW1wia2V5ZG93blwiLFwia2V5RG93blwiXSxbXCJrZXlwcmVzc1wiLFwia2V5UHJlc3NcIl0sW1wia2V5dXBcIixcImtleVVwXCJdLFtcIm1vdXNlZG93blwiLFwibW91c2VEb3duXCJdLFtcIm1vdXNldXBcIixcIm1vdXNlVXBcIl0sW1wicGFzdGVcIixcInBhc3RlXCJdLFtcInBhdXNlXCIsXCJwYXVzZVwiXSxbXCJwbGF5XCIsXCJwbGF5XCJdLFtcInBvaW50ZXJjYW5jZWxcIixcInBvaW50ZXJDYW5jZWxcIl0sW1wicG9pbnRlcmRvd25cIixcInBvaW50ZXJEb3duXCJdLFxuW1wicG9pbnRlcnVwXCIsXCJwb2ludGVyVXBcIl0sW1wicmF0ZWNoYW5nZVwiLFwicmF0ZUNoYW5nZVwiXSxbXCJyZXNldFwiLFwicmVzZXRcIl0sW1wic2Vla2VkXCIsXCJzZWVrZWRcIl0sW1wic3VibWl0XCIsXCJzdWJtaXRcIl0sW1widG91Y2hjYW5jZWxcIixcInRvdWNoQ2FuY2VsXCJdLFtcInRvdWNoZW5kXCIsXCJ0b3VjaEVuZFwiXSxbXCJ0b3VjaHN0YXJ0XCIsXCJ0b3VjaFN0YXJ0XCJdLFtcInZvbHVtZWNoYW5nZVwiLFwidm9sdW1lQ2hhbmdlXCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0JkKGEsITApfSk7eWQuZm9yRWFjaChmdW5jdGlvbihhKXtCZChhLCExKX0pO1xudmFyIENkPXtldmVudFR5cGVzOnpkLGlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZTpmdW5jdGlvbihhKXthPUFkW2FdO3JldHVybiB2b2lkIDAhPT1hJiYhMD09PWEuaXNJbnRlcmFjdGl2ZX0sZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1BZFthXTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PXFkKGMpKXJldHVybiBudWxsO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6YT10ZDticmVhaztjYXNlIFwiYmx1clwiOmNhc2UgXCJmb2N1c1wiOmE9cGQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6YT1lZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjphPVxudWQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6YT12ZDticmVhaztjYXNlIGZiOmNhc2UgZ2I6Y2FzZSBoYjphPW5kO2JyZWFrO2Nhc2UgaWI6YT13ZDticmVhaztjYXNlIFwic2Nyb2xsXCI6YT1hZDticmVhaztjYXNlIFwid2hlZWxcIjphPXhkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOmE9b2Q7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6YT1mZDticmVhaztkZWZhdWx0OmE9SH1iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO1lhKGIpO3JldHVybiBifX0sRGQ9Q2QuaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlLFxuRWQ9W107ZnVuY3Rpb24gRmQoYSl7dmFyIGI9YS50YXJnZXRJbnN0O2Rve2lmKCFiKXthLmFuY2VzdG9ycy5wdXNoKGIpO2JyZWFrfXZhciBjO2ZvcihjPWI7Yy5yZXR1cm47KWM9Yy5yZXR1cm47Yz0zIT09Yy50YWc/bnVsbDpjLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKCFjKWJyZWFrO2EuYW5jZXN0b3JzLnB1c2goYik7Yj1OYShjKX13aGlsZShiKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyliPWEuYW5jZXN0b3JzW2NdLEphKGEudG9wTGV2ZWxUeXBlLGIsYS5uYXRpdmVFdmVudCxaYihhLm5hdGl2ZUV2ZW50KSl9dmFyIEdkPSEwO2Z1bmN0aW9uIElkKGEpe0dkPSEhYX1mdW5jdGlvbiBMKGEsYil7aWYoIWIpcmV0dXJuIG51bGw7dmFyIGM9KERkKGEpP0pkOktkKS5iaW5kKG51bGwsYSk7Yi5hZGRFdmVudExpc3RlbmVyKGEsYywhMSl9XG5mdW5jdGlvbiBMZChhLGIpe2lmKCFiKXJldHVybiBudWxsO3ZhciBjPShEZChhKT9KZDpLZCkuYmluZChudWxsLGEpO2IuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITApfWZ1bmN0aW9uIEpkKGEsYil7VGIoS2QsYSxiKX1mdW5jdGlvbiBLZChhLGIpe2lmKEdkKXt2YXIgYz1aYihiKTtjPU5hKGMpO251bGw9PT1jfHxcIm51bWJlclwiIT09dHlwZW9mIGMudGFnfHwyPT09aWQoYyl8fChjPW51bGwpO2lmKEVkLmxlbmd0aCl7dmFyIGQ9RWQucG9wKCk7ZC50b3BMZXZlbFR5cGU9YTtkLm5hdGl2ZUV2ZW50PWI7ZC50YXJnZXRJbnN0PWM7YT1kfWVsc2UgYT17dG9wTGV2ZWxUeXBlOmEsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfTt0cnl7V2IoRmQsYSl9ZmluYWxseXthLnRvcExldmVsVHlwZT1udWxsLGEubmF0aXZlRXZlbnQ9bnVsbCxhLnRhcmdldEluc3Q9bnVsbCxhLmFuY2VzdG9ycy5sZW5ndGg9MCwxMD5FZC5sZW5ndGgmJkVkLnB1c2goYSl9fX1cbnZhciBNZD17Z2V0IF9lbmFibGVkKCl7cmV0dXJuIEdkfSxzZXRFbmFibGVkOklkLGlzRW5hYmxlZDpmdW5jdGlvbigpe3JldHVybiBHZH0sdHJhcEJ1YmJsZWRFdmVudDpMLHRyYXBDYXB0dXJlZEV2ZW50OkxkLGRpc3BhdGNoRXZlbnQ6S2R9LE5kPXt9LE9kPTAsUGQ9XCJfcmVhY3RMaXN0ZW5lcnNJRFwiKyhcIlwiK01hdGgucmFuZG9tKCkpLnNsaWNlKDIpO2Z1bmN0aW9uIFFkKGEpe09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLFBkKXx8KGFbUGRdPU9kKyssTmRbYVtQZF1dPXt9KTtyZXR1cm4gTmRbYVtQZF1dfWZ1bmN0aW9uIFJkKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIFNkKGEsYil7dmFyIGM9UmQoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9UmQoYyl9fWZ1bmN0aW9uIFRkKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJlwidGV4dFwiPT09YS50eXBlfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBVZD1tLmNhblVzZURPTSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFZkPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGZvY3VzIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0sV2Q9bnVsbCxYZD1udWxsLFlkPW51bGwsWmQ9ITE7XG5mdW5jdGlvbiAkZChhLGIpe2lmKFpkfHxudWxsPT1XZHx8V2QhPT1kYSgpKXJldHVybiBudWxsO3ZhciBjPVdkO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJlRkKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTp3aW5kb3cuZ2V0U2VsZWN0aW9uPyhjPXdpbmRvdy5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTpjPXZvaWQgMDtyZXR1cm4gWWQmJmVhKFlkLGMpP251bGw6KFlkPWMsYT1ILmdldFBvb2xlZChWZC5zZWxlY3QsWGQsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1XZCxZYShhKSxhKX1cbnZhciBhZT17ZXZlbnRUeXBlczpWZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50LGY7aWYoIShmPSFlKSl7YTp7ZT1RZChlKTtmPXNhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKXt2YXIgaD1mW2ddO2lmKCFlLmhhc093blByb3BlcnR5KGgpfHwhZVtoXSl7ZT0hMTticmVhayBhfX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/T2EoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjppZihZYihlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSlXZD1lLFhkPWIsWWQ9bnVsbDticmVhaztjYXNlIFwiYmx1clwiOllkPVhkPVdkPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlpkPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6cmV0dXJuIFpkPSExLCRkKGMsZCk7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFVkKWJyZWFrO1xuY2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpyZXR1cm4gJGQoYyxkKX1yZXR1cm4gbnVsbH19O0dhLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBUYXBFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7d2E9UWEuZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZTt4YT1RYS5nZXRJbnN0YW5jZUZyb21Ob2RlO3lhPVFhLmdldE5vZGVGcm9tSW5zdGFuY2U7R2EuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjpDZCxFbnRlckxlYXZlRXZlbnRQbHVnaW46aGQsQ2hhbmdlRXZlbnRQbHVnaW46JGMsU2VsZWN0RXZlbnRQbHVnaW46YWUsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjpJYn0pO3ZhciBiZT12b2lkIDA7XG5iZT1cIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93P2Z1bmN0aW9uKCl7cmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpfTpmdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpfTt2YXIgY2U9dm9pZCAwLGRlPXZvaWQgMDtcbmlmKG0uY2FuVXNlRE9NKXt2YXIgZWU9W10sZmU9MCxnZT17fSxoZT0tMSxpZT0hMSxqZT0hMSxrZT0wLGxlPTMzLG1lPTMzLG5lPXtkaWRUaW1lb3V0OiExLHRpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXt2YXIgYT1rZS1iZSgpO3JldHVybiAwPGE/YTowfX0sb2U9ZnVuY3Rpb24oYSxiKXtpZihnZVtiXSl0cnl7YShuZSl9ZmluYWxseXtkZWxldGUgZ2VbYl19fSxwZT1cIl9fcmVhY3RJZGxlQ2FsbGJhY2skXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZnVuY3Rpb24oYSl7aWYoYS5zb3VyY2U9PT13aW5kb3cmJmEuZGF0YT09PXBlJiYoaWU9ITEsMCE9PWVlLmxlbmd0aCkpe2lmKDAhPT1lZS5sZW5ndGgmJihhPWJlKCksISgtMT09PWhlfHxoZT5hKSkpe2hlPS0xO25lLmRpZFRpbWVvdXQ9ITA7Zm9yKHZhciBiPTAsYz1lZS5sZW5ndGg7YjxjO2IrKyl7dmFyIGQ9ZWVbYl0sZT1kLnRpbWVvdXRUaW1lOy0xIT09XG5lJiZlPD1hP29lKGQuc2NoZWR1bGVkQ2FsbGJhY2ssZC5jYWxsYmFja0lkKTotMSE9PWUmJigtMT09PWhlfHxlPGhlKSYmKGhlPWUpfX1mb3IoYT1iZSgpOzA8a2UtYSYmMDxlZS5sZW5ndGg7KWE9ZWUuc2hpZnQoKSxuZS5kaWRUaW1lb3V0PSExLG9lKGEuc2NoZWR1bGVkQ2FsbGJhY2ssYS5jYWxsYmFja0lkKSxhPWJlKCk7MDxlZS5sZW5ndGgmJiFqZSYmKGplPSEwLHJlcXVlc3RBbmltYXRpb25GcmFtZShxZSkpfX0sITEpO3ZhciBxZT1mdW5jdGlvbihhKXtqZT0hMTt2YXIgYj1hLWtlK21lO2I8bWUmJmxlPG1lPyg4PmImJihiPTgpLG1lPWI8bGU/bGU6Yik6bGU9YjtrZT1hK21lO2llfHwoaWU9ITAsd2luZG93LnBvc3RNZXNzYWdlKHBlLFwiKlwiKSl9O2NlPWZ1bmN0aW9uKGEsYil7dmFyIGM9LTE7bnVsbCE9YiYmXCJudW1iZXJcIj09PXR5cGVvZiBiLnRpbWVvdXQmJihjPWJlKCkrYi50aW1lb3V0KTtpZigtMT09PWhlfHwtMSE9PWMmJmM8aGUpaGU9YztmZSsrO2I9ZmU7ZWUucHVzaCh7c2NoZWR1bGVkQ2FsbGJhY2s6YSxcbmNhbGxiYWNrSWQ6Yix0aW1lb3V0VGltZTpjfSk7Z2VbYl09ITA7amV8fChqZT0hMCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUocWUpKTtyZXR1cm4gYn07ZGU9ZnVuY3Rpb24oYSl7ZGVsZXRlIGdlW2FdfX1lbHNle3ZhciByZT0wLHNlPXt9O2NlPWZ1bmN0aW9uKGEpe3ZhciBiPXJlKyssYz1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YSh7dGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3JldHVybiBJbmZpbml0eX0sZGlkVGltZW91dDohMX0pfSk7c2VbYl09YztyZXR1cm4gYn07ZGU9ZnVuY3Rpb24oYSl7dmFyIGI9c2VbYV07ZGVsZXRlIHNlW2FdO2NsZWFyVGltZW91dChiKX19ZnVuY3Rpb24gdGUoYSl7dmFyIGI9XCJcIjtjYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbD09YXx8XCJzdHJpbmdcIiE9PXR5cGVvZiBhJiZcIm51bWJlclwiIT09dHlwZW9mIGF8fChiKz1hKX0pO3JldHVybiBifVxuZnVuY3Rpb24gdWUoYSxiKXthPXAoe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj10ZShiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9ZnVuY3Rpb24gdmUoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK2M7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIHdlKGEsYil7dmFyIGM9Yi52YWx1ZTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpudWxsIT1jP2M6Yi5kZWZhdWx0VmFsdWUsd2FzTXVsdGlwbGU6ISFiLm11bHRpcGxlfX1mdW5jdGlvbiB4ZShhLGIpe251bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/QShcIjkxXCIpOnZvaWQgMDtyZXR1cm4gcCh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiB5ZShhLGIpe3ZhciBjPWIudmFsdWU7bnVsbD09YyYmKGM9Yi5kZWZhdWx0VmFsdWUsYj1iLmNoaWxkcmVuLG51bGwhPWImJihudWxsIT1jP0EoXCI5MlwiKTp2b2lkIDAsQXJyYXkuaXNBcnJheShiKSYmKDE+PWIubGVuZ3RoP3ZvaWQgMDpBKFwiOTNcIiksYj1iWzBdKSxjPVwiXCIrYiksbnVsbD09YyYmKGM9XCJcIikpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlwiXCIrY319XG5mdW5jdGlvbiB6ZShhLGIpe3ZhciBjPWIudmFsdWU7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWIuZGVmYXVsdFZhbHVlKX1mdW5jdGlvbiBBZShhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiYoYS52YWx1ZT1iKX12YXIgQmU9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gQ2UoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBEZShhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/Q2UoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgRWU9dm9pZCAwLEZlPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PUJlLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle0VlPUVlfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO0VlLmlubmVySFRNTD1cIjxzdmc+XCIrYitcIjwvc3ZnPlwiO2ZvcihiPUVlLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIEdlKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgSGU9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLGZsb29kT3BhY2l0eTohMCxcbnN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sSWU9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKEhlKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0llLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7SGVbYl09SGVbYV19KX0pO1xuZnVuY3Rpb24gSmUoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpO3ZhciBlPWM7dmFyIGY9YltjXTtlPW51bGw9PWZ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGZ8fFwiXCI9PT1mP1wiXCI6ZHx8XCJudW1iZXJcIiE9PXR5cGVvZiBmfHwwPT09Znx8SGUuaGFzT3duUHJvcGVydHkoZSkmJkhlW2VdPyhcIlwiK2YpLnRyaW0oKTpmK1wicHhcIjtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIEtlPXAoe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiBMZShhLGIsYyl7YiYmKEtlW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD9BKFwiMTM3XCIsYSxjKCkpOnZvaWQgMCksbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmKG51bGwhPWIuY2hpbGRyZW4/QShcIjYwXCIpOnZvaWQgMCxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3ZvaWQgMDpBKFwiNjFcIikpLG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZT9BKFwiNjJcIixjKCkpOnZvaWQgMCl9XG5mdW5jdGlvbiBNZShhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIE5lPXYudGhhdFJldHVybnMoXCJcIik7XG5mdW5jdGlvbiBPZShhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1RZChhKTtiPXNhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2lmKCFjLmhhc093blByb3BlcnR5KGUpfHwhY1tlXSl7c3dpdGNoKGUpe2Nhc2UgXCJzY3JvbGxcIjpMZChcInNjcm9sbFwiLGEpO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6TGQoXCJmb2N1c1wiLGEpO0xkKFwiYmx1clwiLGEpO2MuYmx1cj0hMDtjLmZvY3VzPSEwO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjokYihlLCEwKSYmTGQoZSxhKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09amIuaW5kZXhPZihlKSYmTChlLGEpfWNbZV09ITB9fX1cbmZ1bmN0aW9uIFBlKGEsYixjLGQpe2M9OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7ZD09PUJlLmh0bWwmJihkPUNlKGEpKTtkPT09QmUuaHRtbD9cInNjcmlwdFwiPT09YT8oYT1jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6YT1cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM/Yy5jcmVhdGVFbGVtZW50KGEse2lzOmIuaXN9KTpjLmNyZWF0ZUVsZW1lbnQoYSk6YT1jLmNyZWF0ZUVsZW1lbnROUyhkLGEpO3JldHVybiBhfWZ1bmN0aW9uIFFlKGEsYil7cmV0dXJuKDk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShhKX1cbmZ1bmN0aW9uIFJlKGEsYixjLGQpe3ZhciBlPU1lKGIsYyk7c3dpdGNoKGIpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6TChcImxvYWRcIixhKTt2YXIgZj1jO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihmPTA7ZjxqYi5sZW5ndGg7ZisrKUwoamJbZl0sYSk7Zj1jO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpMKFwiZXJyb3JcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6TChcImVycm9yXCIsYSk7TChcImxvYWRcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImZvcm1cIjpMKFwicmVzZXRcIixhKTtMKFwic3VibWl0XCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6TChcInRvZ2dsZVwiLGEpO2Y9YzticmVhaztjYXNlIFwiaW5wdXRcIjpHYyhhLGMpO2Y9RmMoYSxjKTtMKFwiaW52YWxpZFwiLGEpO09lKGQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj11ZShhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjp3ZShhLGMpO2Y9cCh7fSxjLHt2YWx1ZTp2b2lkIDB9KTtcbkwoXCJpbnZhbGlkXCIsYSk7T2UoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnllKGEsYyk7Zj14ZShhLGMpO0woXCJpbnZhbGlkXCIsYSk7T2UoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6Zj1jfUxlKGIsZixOZSk7dmFyIGc9ZixoO2ZvcihoIGluIGcpaWYoZy5oYXNPd25Qcm9wZXJ0eShoKSl7dmFyIGs9Z1toXTtcInN0eWxlXCI9PT1oP0plKGEsayxOZSk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZGZShhLGspKTpcImNoaWxkcmVuXCI9PT1oP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09Ynx8XCJcIiE9PWspJiZHZShhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmR2UoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmXCJhdXRvRm9jdXNcIiE9PWgmJihyYS5oYXNPd25Qcm9wZXJ0eShoKT9udWxsIT1rJiZPZShkLFxuaCk6bnVsbCE9ayYmRWMoYSxoLGssZSkpfXN3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpjYyhhKTtMYyhhLGMpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmNjKGEpO0FlKGEsYyk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWMudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixjLnZhbHVlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWMubXVsdGlwbGU7Yj1jLnZhbHVlO251bGwhPWI/dmUoYSwhIWMubXVsdGlwbGUsYiwhMSk6bnVsbCE9Yy5kZWZhdWx0VmFsdWUmJnZlKGEsISFjLm11bHRpcGxlLGMuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihhLm9uY2xpY2s9dil9fVxuZnVuY3Rpb24gU2UoYSxiLGMsZCxlKXt2YXIgZj1udWxsO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpjPUZjKGEsYyk7ZD1GYyhhLGQpO2Y9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmM9dWUoYSxjKTtkPXVlKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Yz1wKHt9LGMse3ZhbHVlOnZvaWQgMH0pO2Q9cCh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmM9eGUoYSxjKTtkPXhlKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9dil9TGUoYixkLE5lKTtiPWE9dm9pZCAwO3ZhciBnPW51bGw7Zm9yKGEgaW4gYylpZighZC5oYXNPd25Qcm9wZXJ0eShhKSYmYy5oYXNPd25Qcm9wZXJ0eShhKSYmbnVsbCE9Y1thXSlpZihcInN0eWxlXCI9PT1hKXt2YXIgaD1jW2FdO2ZvcihiIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShiKSYmKGd8fFxuKGc9e30pLGdbYl09XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWEmJlwiY2hpbGRyZW5cIiE9PWEmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1hJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YSYmXCJhdXRvRm9jdXNcIiE9PWEmJihyYS5oYXNPd25Qcm9wZXJ0eShhKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2goYSxudWxsKSk7Zm9yKGEgaW4gZCl7dmFyIGs9ZFthXTtoPW51bGwhPWM/Y1thXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShhKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1hKWlmKGgpe2ZvcihiIGluIGgpIWguaGFzT3duUHJvcGVydHkoYil8fGsmJmsuaGFzT3duUHJvcGVydHkoYil8fChnfHwoZz17fSksZ1tiXT1cIlwiKTtmb3IoYiBpbiBrKWsuaGFzT3duUHJvcGVydHkoYikmJmhbYl0hPT1rW2JdJiYoZ3x8KGc9e30pLGdbYl09a1tiXSl9ZWxzZSBnfHwoZnx8KGY9W10pLGYucHVzaChhLGcpKSxcbmc9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09YT8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChhLFwiXCIraykpOlwiY2hpbGRyZW5cIj09PWE/aD09PWt8fFwic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWEmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1hJiYocmEuaGFzT3duUHJvcGVydHkoYSk/KG51bGwhPWsmJk9lKGUsYSksZnx8aD09PWt8fChmPVtdKSk6KGY9Znx8W10pLnB1c2goYSxrKSl9ZyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGcpO3JldHVybiBmfVxuZnVuY3Rpb24gVGUoYSxiLGMsZCxlKXtcImlucHV0XCI9PT1jJiZcInJhZGlvXCI9PT1lLnR5cGUmJm51bGwhPWUubmFtZSYmSWMoYSxlKTtNZShjLGQpO2Q9TWUoYyxlKTtmb3IodmFyIGY9MDtmPGIubGVuZ3RoO2YrPTIpe3ZhciBnPWJbZl0saD1iW2YrMV07XCJzdHlsZVwiPT09Zz9KZShhLGgsTmUpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/RmUoYSxoKTpcImNoaWxkcmVuXCI9PT1nP0dlKGEsaCk6RWMoYSxnLGgsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOkpjKGEsZSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6emUoYSxlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZT12b2lkIDAsYj1hLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZS5tdWx0aXBsZSxjPWUudmFsdWUsbnVsbCE9Yz92ZShhLCEhZS5tdWx0aXBsZSxjLCExKTpiIT09ISFlLm11bHRpcGxlJiYobnVsbCE9ZS5kZWZhdWx0VmFsdWU/XG52ZShhLCEhZS5tdWx0aXBsZSxlLmRlZmF1bHRWYWx1ZSwhMCk6dmUoYSwhIWUubXVsdGlwbGUsZS5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fVxuZnVuY3Rpb24gVWUoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpMKFwibG9hZFwiLGEpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihkPTA7ZDxqYi5sZW5ndGg7ZCsrKUwoamJbZF0sYSk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkwoXCJlcnJvclwiLGEpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkwoXCJlcnJvclwiLGEpO0woXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcImZvcm1cIjpMKFwicmVzZXRcIixhKTtMKFwic3VibWl0XCIsYSk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpMKFwidG9nZ2xlXCIsYSk7YnJlYWs7Y2FzZSBcImlucHV0XCI6R2MoYSxjKTtMKFwiaW52YWxpZFwiLGEpO09lKGUsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6d2UoYSxjKTtMKFwiaW52YWxpZFwiLGEpO09lKGUsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjp5ZShhLGMpLEwoXCJpbnZhbGlkXCIsYSksT2UoZSxcIm9uQ2hhbmdlXCIpfUxlKGIsXG5jLE5lKTtkPW51bGw7Zm9yKHZhciBmIGluIGMpaWYoYy5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGc9Y1tmXTtcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2YgZz9hLnRleHRDb250ZW50IT09ZyYmKGQ9W1wiY2hpbGRyZW5cIixnXSk6XCJudW1iZXJcIj09PXR5cGVvZiBnJiZhLnRleHRDb250ZW50IT09XCJcIitnJiYoZD1bXCJjaGlsZHJlblwiLFwiXCIrZ10pOnJhLmhhc093blByb3BlcnR5KGYpJiZudWxsIT1nJiZPZShlLGYpfXN3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpjYyhhKTtMYyhhLGMpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmNjKGEpO0FlKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLm9uQ2xpY2smJihhLm9uY2xpY2s9dil9cmV0dXJuIGR9ZnVuY3Rpb24gVmUoYSxiKXtyZXR1cm4gYS5ub2RlVmFsdWUhPT1ifVxudmFyIFdlPXtjcmVhdGVFbGVtZW50OlBlLGNyZWF0ZVRleHROb2RlOlFlLHNldEluaXRpYWxQcm9wZXJ0aWVzOlJlLGRpZmZQcm9wZXJ0aWVzOlNlLHVwZGF0ZVByb3BlcnRpZXM6VGUsZGlmZkh5ZHJhdGVkUHJvcGVydGllczpVZSxkaWZmSHlkcmF0ZWRUZXh0OlZlLHdhcm5Gb3JVbm1hdGNoZWRUZXh0OmZ1bmN0aW9uKCl7fSx3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dDpmdW5jdGlvbigpe30scmVzdG9yZUNvbnRyb2xsZWRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOkpjKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7XG5jPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPVBhKGQpO2U/dm9pZCAwOkEoXCI5MFwiKTtkYyhkKTtKYyhkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6emUoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJnZlKGEsISFjLm11bHRpcGxlLGIsITEpfX19LFhlPW51bGwsWWU9bnVsbDtmdW5jdGlvbiBaZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG5mdW5jdGlvbiAkZShhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcInN0cmluZ1wiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBhZj1iZSxiZj1jZSxjZj1kZTtmdW5jdGlvbiBkZihhKXtmb3IoYT1hLm5leHRTaWJsaW5nO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGVmKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1uZXcgU2V0O3ZhciBmZj1bXSxnZj0tMTtmdW5jdGlvbiBoZihhKXtyZXR1cm57Y3VycmVudDphfX1cbmZ1bmN0aW9uIE0oYSl7MD5nZnx8KGEuY3VycmVudD1mZltnZl0sZmZbZ2ZdPW51bGwsZ2YtLSl9ZnVuY3Rpb24gTihhLGIpe2dmKys7ZmZbZ2ZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgamY9aGYoaGEpLE89aGYoITEpLGtmPWhhO2Z1bmN0aW9uIGxmKGEpe3JldHVybiBtZihhKT9rZjpqZi5jdXJyZW50fVxuZnVuY3Rpb24gbmYoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBoYTt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBtZihhKXtyZXR1cm4gMj09PWEudGFnJiZudWxsIT1hLnR5cGUuY2hpbGRDb250ZXh0VHlwZXN9ZnVuY3Rpb24gb2YoYSl7bWYoYSkmJihNKE8sYSksTShqZixhKSl9ZnVuY3Rpb24gcGYoYSl7TShPLGEpO00oamYsYSl9XG5mdW5jdGlvbiBxZihhLGIsYyl7amYuY3VycmVudCE9PWhhP0EoXCIxNjhcIik6dm9pZCAwO04oamYsYixhKTtOKE8sYyxhKX1mdW5jdGlvbiByZihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlLGQ9YS50eXBlLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldENoaWxkQ29udGV4dClyZXR1cm4gYjtjPWMuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGMpZSBpbiBkP3ZvaWQgMDpBKFwiMTA4XCIsdGMoYSl8fFwiVW5rbm93blwiLGUpO3JldHVybiBwKHt9LGIsYyl9ZnVuY3Rpb24gc2YoYSl7aWYoIW1mKGEpKXJldHVybiExO3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8aGE7a2Y9amYuY3VycmVudDtOKGpmLGIsYSk7TihPLE8uY3VycmVudCxhKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIHRmKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7Yz92b2lkIDA6QShcIjE2OVwiKTtpZihiKXt2YXIgZD1yZihhLGtmKTtjLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWQ7TShPLGEpO00oamYsYSk7TihqZixkLGEpfWVsc2UgTShPLGEpO04oTyxiLGEpfVxuZnVuY3Rpb24gdWYoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1cbmZ1bmN0aW9uIHZmKGEsYixjKXt2YXIgZD1hLmFsdGVybmF0ZTtudWxsPT09ZD8oZD1uZXcgdWYoYS50YWcsYixhLmtleSxhLm1vZGUpLGQudHlwZT1hLnR5cGUsZC5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsZC5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1kKTooZC5wZW5kaW5nUHJvcHM9YixkLmVmZmVjdFRhZz0wLGQubmV4dEVmZmVjdD1udWxsLGQuZmlyc3RFZmZlY3Q9bnVsbCxkLmxhc3RFZmZlY3Q9bnVsbCk7ZC5leHBpcmF0aW9uVGltZT1jO2QuY2hpbGQ9YS5jaGlsZDtkLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2QubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZC51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2Quc2libGluZz1hLnNpYmxpbmc7ZC5pbmRleD1hLmluZGV4O2QucmVmPWEucmVmO3JldHVybiBkfVxuZnVuY3Rpb24gd2YoYSxiLGMpe3ZhciBkPWEudHlwZSxlPWEua2V5O2E9YS5wcm9wcztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl2YXIgZj1kLnByb3RvdHlwZSYmZC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD8yOjA7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGQpZj01O2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgaGM6cmV0dXJuIHhmKGEuY2hpbGRyZW4sYixjLGUpO2Nhc2Ugb2M6Zj0xMTtifD0zO2JyZWFrO2Nhc2UgaWM6Zj0xMTtifD0yO2JyZWFrO2Nhc2UgamM6cmV0dXJuIGQ9bmV3IHVmKDE1LGEsZSxifDQpLGQudHlwZT1qYyxkLmV4cGlyYXRpb25UaW1lPWMsZDtjYXNlIHFjOmY9MTY7Ynw9MjticmVhaztkZWZhdWx0OmE6e3N3aXRjaChcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kP2QuJCR0eXBlb2Y6bnVsbCl7Y2FzZSBtYzpmPTEzO2JyZWFrIGE7Y2FzZSBuYzpmPTEyO2JyZWFrIGE7Y2FzZSBwYzpmPTE0O2JyZWFrIGE7ZGVmYXVsdDpBKFwiMTMwXCIsbnVsbD09ZD9cbmQ6dHlwZW9mIGQsXCJcIil9Zj12b2lkIDB9fWI9bmV3IHVmKGYsYSxlLGIpO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYn1mdW5jdGlvbiB4ZihhLGIsYyxkKXthPW5ldyB1ZigxMCxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIHlmKGEsYixjKXthPW5ldyB1Zig2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gemYoYSxiLGMpe2I9bmV3IHVmKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gQWYoYSxiLGMpe2I9bmV3IHVmKDMsbnVsbCxudWxsLGI/MzowKTthPXtjdXJyZW50OmIsY29udGFpbmVySW5mbzphLHBlbmRpbmdDaGlsZHJlbjpudWxsLGVhcmxpZXN0UGVuZGluZ1RpbWU6MCxsYXRlc3RQZW5kaW5nVGltZTowLGVhcmxpZXN0U3VzcGVuZGVkVGltZTowLGxhdGVzdFN1c3BlbmRlZFRpbWU6MCxsYXRlc3RQaW5nZWRUaW1lOjAscGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOjAsZmluaXNoZWRXb3JrOm51bGwsY29udGV4dDpudWxsLHBlbmRpbmdDb250ZXh0Om51bGwsaHlkcmF0ZTpjLHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lOjAsZmlyc3RCYXRjaDpudWxsLG5leHRTY2hlZHVsZWRSb290Om51bGx9O3JldHVybiBiLnN0YXRlTm9kZT1hfXZhciBCZj1udWxsLENmPW51bGw7ZnVuY3Rpb24gRGYoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3RyeXtyZXR1cm4gYShiKX1jYXRjaChjKXt9fX1cbmZ1bmN0aW9uIEVmKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO0JmPURmKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJSb290KGMsYSl9KTtDZj1EZihmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfSl9Y2F0Y2goZCl7fXJldHVybiEwfWZ1bmN0aW9uIEZmKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBCZiYmQmYoYSl9ZnVuY3Rpb24gR2YoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIENmJiZDZihhKX12YXIgSGY9ITE7XG5mdW5jdGlvbiBJZihhKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6MCxiYXNlU3RhdGU6YSxmaXJzdFVwZGF0ZTpudWxsLGxhc3RVcGRhdGU6bnVsbCxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1mdW5jdGlvbiBKZihhKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6YS5leHBpcmF0aW9uVGltZSxiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RVcGRhdGU6YS5maXJzdFVwZGF0ZSxsYXN0VXBkYXRlOmEubGFzdFVwZGF0ZSxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1cbmZ1bmN0aW9uIEtmKGEpe3JldHVybntleHBpcmF0aW9uVGltZTphLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbCxuZXh0RWZmZWN0Om51bGx9fWZ1bmN0aW9uIExmKGEsYixjKXtudWxsPT09YS5sYXN0VXBkYXRlP2EuZmlyc3RVcGRhdGU9YS5sYXN0VXBkYXRlPWI6KGEubGFzdFVwZGF0ZS5uZXh0PWIsYS5sYXN0VXBkYXRlPWIpO2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lfHxhLmV4cGlyYXRpb25UaW1lPmMpYS5leHBpcmF0aW9uVGltZT1jfVxuZnVuY3Rpb24gTWYoYSxiLGMpe3ZhciBkPWEuYWx0ZXJuYXRlO2lmKG51bGw9PT1kKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3ZhciBmPW51bGw7bnVsbD09PWUmJihlPWEudXBkYXRlUXVldWU9SWYoYS5tZW1vaXplZFN0YXRlKSl9ZWxzZSBlPWEudXBkYXRlUXVldWUsZj1kLnVwZGF0ZVF1ZXVlLG51bGw9PT1lP251bGw9PT1mPyhlPWEudXBkYXRlUXVldWU9SWYoYS5tZW1vaXplZFN0YXRlKSxmPWQudXBkYXRlUXVldWU9SWYoZC5tZW1vaXplZFN0YXRlKSk6ZT1hLnVwZGF0ZVF1ZXVlPUpmKGYpOm51bGw9PT1mJiYoZj1kLnVwZGF0ZVF1ZXVlPUpmKGUpKTtudWxsPT09Znx8ZT09PWY/TGYoZSxiLGMpOm51bGw9PT1lLmxhc3RVcGRhdGV8fG51bGw9PT1mLmxhc3RVcGRhdGU/KExmKGUsYixjKSxMZihmLGIsYykpOihMZihlLGIsYyksZi5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gTmYoYSxiLGMpe3ZhciBkPWEudXBkYXRlUXVldWU7ZD1udWxsPT09ZD9hLnVwZGF0ZVF1ZXVlPUlmKGEubWVtb2l6ZWRTdGF0ZSk6T2YoYSxkKTtudWxsPT09ZC5sYXN0Q2FwdHVyZWRVcGRhdGU/ZC5maXJzdENhcHR1cmVkVXBkYXRlPWQubGFzdENhcHR1cmVkVXBkYXRlPWI6KGQubGFzdENhcHR1cmVkVXBkYXRlLm5leHQ9YixkLmxhc3RDYXB0dXJlZFVwZGF0ZT1iKTtpZigwPT09ZC5leHBpcmF0aW9uVGltZXx8ZC5leHBpcmF0aW9uVGltZT5jKWQuZXhwaXJhdGlvblRpbWU9Y31mdW5jdGlvbiBPZihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZiPT09Yy51cGRhdGVRdWV1ZSYmKGI9YS51cGRhdGVRdWV1ZT1KZihiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBQZihhLGIsYyxkLGUsZil7c3dpdGNoKGMudGFnKXtjYXNlIDE6cmV0dXJuIGE9Yy5wYXlsb2FkLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtjYXNlIDM6YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTEwMjV8NjQ7Y2FzZSAwOmE9Yy5wYXlsb2FkO2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2lmKG51bGw9PT1lfHx2b2lkIDA9PT1lKWJyZWFrO3JldHVybiBwKHt9LGQsZSk7Y2FzZSAyOkhmPSEwfXJldHVybiBkfVxuZnVuY3Rpb24gUWYoYSxiLGMsZCxlKXtIZj0hMTtpZighKDA9PT1iLmV4cGlyYXRpb25UaW1lfHxiLmV4cGlyYXRpb25UaW1lPmUpKXtiPU9mKGEsYik7Zm9yKHZhciBmPWIuYmFzZVN0YXRlLGc9bnVsbCxoPTAsaz1iLmZpcnN0VXBkYXRlLG49ZjtudWxsIT09azspe3ZhciByPWsuZXhwaXJhdGlvblRpbWU7aWYocj5lKXtpZihudWxsPT09ZyYmKGc9ayxmPW4pLDA9PT1ofHxoPnIpaD1yfWVsc2Ugbj1QZihhLGIsayxuLGMsZCksbnVsbCE9PWsuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsay5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdEVmZmVjdD9iLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1rOihiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1rLGIubGFzdEVmZmVjdD1rKSk7az1rLm5leHR9cj1udWxsO2ZvcihrPWIuZmlyc3RDYXB0dXJlZFVwZGF0ZTtudWxsIT09azspe3ZhciB3PWsuZXhwaXJhdGlvblRpbWU7aWYodz5lKXtpZihudWxsPT09ciYmKHI9ayxudWxsPT09XG5nJiYoZj1uKSksMD09PWh8fGg+dyloPXd9ZWxzZSBuPVBmKGEsYixrLG4sYyxkKSxudWxsIT09ay5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD0zMixrLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q/Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PWs6KGIubGFzdENhcHR1cmVkRWZmZWN0Lm5leHRFZmZlY3Q9ayxiLmxhc3RDYXB0dXJlZEVmZmVjdD1rKSk7az1rLm5leHR9bnVsbD09PWcmJihiLmxhc3RVcGRhdGU9bnVsbCk7bnVsbD09PXI/Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbDphLmVmZmVjdFRhZ3w9MzI7bnVsbD09PWcmJm51bGw9PT1yJiYoZj1uKTtiLmJhc2VTdGF0ZT1mO2IuZmlyc3RVcGRhdGU9ZztiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9cjtiLmV4cGlyYXRpb25UaW1lPWg7YS5tZW1vaXplZFN0YXRlPW59fVxuZnVuY3Rpb24gUmYoYSxiKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYT9BKFwiMTkxXCIsYSk6dm9pZCAwO2EuY2FsbChiKX1cbmZ1bmN0aW9uIFNmKGEsYixjKXtudWxsIT09Yi5maXJzdENhcHR1cmVkVXBkYXRlJiYobnVsbCE9PWIubGFzdFVwZGF0ZSYmKGIubGFzdFVwZGF0ZS5uZXh0PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSxiLmxhc3RVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGUpLGIuZmlyc3RDYXB0dXJlZFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsKTthPWIuZmlyc3RFZmZlY3Q7Zm9yKGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGw7bnVsbCE9PWE7KXt2YXIgZD1hLmNhbGxiYWNrO251bGwhPT1kJiYoYS5jYWxsYmFjaz1udWxsLFJmKGQsYykpO2E9YS5uZXh0RWZmZWN0fWE9Yi5maXJzdENhcHR1cmVkRWZmZWN0O2ZvcihiLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9bnVsbDtudWxsIT09YTspYj1hLmNhbGxiYWNrLG51bGwhPT1iJiYoYS5jYWxsYmFjaz1udWxsLFJmKGIsYykpLGE9YS5uZXh0RWZmZWN0fVxuZnVuY3Rpb24gVGYoYSxiKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazp2YyhiKX19dmFyIFVmPWhmKG51bGwpLFZmPWhmKG51bGwpLFdmPWhmKDApO2Z1bmN0aW9uIFhmKGEpe3ZhciBiPWEudHlwZS5fY29udGV4dDtOKFdmLGIuX2NoYW5nZWRCaXRzLGEpO04oVmYsYi5fY3VycmVudFZhbHVlLGEpO04oVWYsYSxhKTtiLl9jdXJyZW50VmFsdWU9YS5wZW5kaW5nUHJvcHMudmFsdWU7Yi5fY2hhbmdlZEJpdHM9YS5zdGF0ZU5vZGV9ZnVuY3Rpb24gWWYoYSl7dmFyIGI9V2YuY3VycmVudCxjPVZmLmN1cnJlbnQ7TShVZixhKTtNKFZmLGEpO00oV2YsYSk7YT1hLnR5cGUuX2NvbnRleHQ7YS5fY3VycmVudFZhbHVlPWM7YS5fY2hhbmdlZEJpdHM9Yn12YXIgWmY9e30sJGY9aGYoWmYpLGFnPWhmKFpmKSxiZz1oZihaZik7ZnVuY3Rpb24gY2coYSl7YT09PVpmP0EoXCIxNzRcIik6dm9pZCAwO3JldHVybiBhfVxuZnVuY3Rpb24gZGcoYSxiKXtOKGJnLGIsYSk7TihhZyxhLGEpO04oJGYsWmYsYSk7dmFyIGM9Yi5ub2RlVHlwZTtzd2l0Y2goYyl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6RGUobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmM9OD09PWM/Yi5wYXJlbnROb2RlOmIsYj1jLm5hbWVzcGFjZVVSSXx8bnVsbCxjPWMudGFnTmFtZSxiPURlKGIsYyl9TSgkZixhKTtOKCRmLGIsYSl9ZnVuY3Rpb24gZWcoYSl7TSgkZixhKTtNKGFnLGEpO00oYmcsYSl9ZnVuY3Rpb24gZmcoYSl7YWcuY3VycmVudD09PWEmJihNKCRmLGEpLE0oYWcsYSkpfWZ1bmN0aW9uIGhnKGEsYixjKXt2YXIgZD1hLm1lbW9pemVkU3RhdGU7Yj1iKGMsZCk7ZD1udWxsPT09Ynx8dm9pZCAwPT09Yj9kOnAoe30sZCxiKTthLm1lbW9pemVkU3RhdGU9ZDthPWEudXBkYXRlUXVldWU7bnVsbCE9PWEmJjA9PT1hLmV4cGlyYXRpb25UaW1lJiYoYS5iYXNlU3RhdGU9ZCl9XG52YXIgbGc9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpPzI9PT1pZChhKTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1pZygpO2Q9amcoZCxhKTt2YXIgZT1LZihkKTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7TWYoYSxlLGQpO2tnKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPWlnKCk7ZD1qZyhkLGEpO3ZhciBlPUtmKGQpO2UudGFnPTE7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO01mKGEsZSxkKTtrZyhhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1pZygpO2M9amcoYyxhKTt2YXIgZD1LZihjKTtkLnRhZz0yO3ZvaWQgMCE9PVxuYiYmbnVsbCE9PWImJihkLmNhbGxiYWNrPWIpO01mKGEsZCxjKTtrZyhhLGMpfX07ZnVuY3Rpb24gbWcoYSxiLGMsZCxlLGYpe3ZhciBnPWEuc3RhdGVOb2RlO2E9YS50eXBlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLnNob3VsZENvbXBvbmVudFVwZGF0ZT9nLnNob3VsZENvbXBvbmVudFVwZGF0ZShjLGUsZik6YS5wcm90b3R5cGUmJmEucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFlYShiLGMpfHwhZWEoZCxlKTohMH1cbmZ1bmN0aW9uIG5nKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZsZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIG9nKGEsYil7dmFyIGM9YS50eXBlLGQ9YS5zdGF0ZU5vZGUsZT1hLnBlbmRpbmdQcm9wcyxmPWxmKGEpO2QucHJvcHM9ZTtkLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtkLnJlZnM9aGE7ZC5jb250ZXh0PW5mKGEsZik7Zj1hLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoUWYoYSxmLGUsZCxiKSxkLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7Zj1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoaGcoYSxmLGUpLGQuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5jb21wb25lbnRXaWxsTW91bnR8fChjPWQuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbE1vdW50JiZcbmQuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYyE9PWQuc3RhdGUmJmxnLmVucXVldWVSZXBsYWNlU3RhdGUoZCxkLnN0YXRlLG51bGwpLGY9YS51cGRhdGVRdWV1ZSxudWxsIT09ZiYmKFFmKGEsZixlLGQsYiksZC5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIgcGc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIHFnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjt2YXIgZD12b2lkIDA7YyYmKDIhPT1jLnRhZz9BKFwiMTEwXCIpOnZvaWQgMCxkPWMuc3RhdGVOb2RlKTtkP3ZvaWQgMDpBKFwiMTQ3XCIsYSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzPT09aGE/ZC5yZWZzPXt9OmQucmVmcztudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifVwic3RyaW5nXCIhPT10eXBlb2YgYT9BKFwiMTQ4XCIpOnZvaWQgMDtjLl9vd25lcj92b2lkIDA6QShcIjI1NFwiLGEpfXJldHVybiBhfVxuZnVuY3Rpb24gcmcoYSxiKXtcInRleHRhcmVhXCIhPT1hLnR5cGUmJkEoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKX1cbmZ1bmN0aW9uIHNnKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiLGMpe2E9dmYoYSxiLGMpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj15ZihjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIudHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyxkKSxkLnJlZj1xZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9d2YoYyxhLm1vZGUsZCk7ZC5yZWY9cWcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbihhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9XG56ZihjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10sZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiByKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDEwIT09Yi50YWcpcmV0dXJuIGI9eGYoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHcoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPXlmKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIGZjOnJldHVybiBjPXdmKGIsYS5tb2RlLGMpLGMucmVmPXFnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSBnYzpyZXR1cm4gYj16ZihiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYocGcoYil8fHNjKGIpKXJldHVybiBiPXhmKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49XG5hLGI7cmcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBQKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIGZjOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09aGM/cihhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIGdjOnJldHVybiBjLmtleT09PWU/bihhLGIsYyxkKTpudWxsfWlmKHBnKGMpfHxzYyhjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpyKGEsYixjLGQsbnVsbCk7cmcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBrYyhhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtcbmlmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIGZjOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1oYz9yKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSBnYzpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbihiLGEsZCxlKX1pZihwZyhkKXx8c2MoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwscihiLGEsZCxlLG51bGwpO3JnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSGQoZSxnLGgsayl7Zm9yKHZhciB1PW51bGwseD1udWxsLHQ9ZyxxPWc9MCxuPW51bGw7bnVsbCE9PXQmJnE8aC5sZW5ndGg7cSsrKXt0LmluZGV4PnE/KG49dCx0PW51bGwpOm49dC5zaWJsaW5nO3ZhciBsPVAoZSx0LGhbcV0sayk7aWYobnVsbD09PWwpe251bGw9PT10JiYodD1uKTticmVha31hJiZ0JiZudWxsPT09bC5hbHRlcm5hdGUmJmIoZSxcbnQpO2c9ZihsLGcscSk7bnVsbD09PXg/dT1sOnguc2libGluZz1sO3g9bDt0PW59aWYocT09PWgubGVuZ3RoKXJldHVybiBjKGUsdCksdTtpZihudWxsPT09dCl7Zm9yKDtxPGgubGVuZ3RoO3ErKylpZih0PXcoZSxoW3FdLGspKWc9Zih0LGcscSksbnVsbD09PXg/dT10Onguc2libGluZz10LHg9dDtyZXR1cm4gdX1mb3IodD1kKGUsdCk7cTxoLmxlbmd0aDtxKyspaWYobj1rYyh0LGUscSxoW3FdLGspKWEmJm51bGwhPT1uLmFsdGVybmF0ZSYmdC5kZWxldGUobnVsbD09PW4ua2V5P3E6bi5rZXkpLGc9ZihuLGcscSksbnVsbD09PXg/dT1uOnguc2libGluZz1uLHg9bjthJiZ0LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiB1fWZ1bmN0aW9uIEUoZSxnLGgsayl7dmFyIHQ9c2MoaCk7XCJmdW5jdGlvblwiIT09dHlwZW9mIHQ/QShcIjE1MFwiKTp2b2lkIDA7aD10LmNhbGwoaCk7bnVsbD09aD9BKFwiMTUxXCIpOnZvaWQgMDtmb3IodmFyIHU9dD1udWxsLG49Zyx4PVxuZz0wLHk9bnVsbCxsPWgubmV4dCgpO251bGwhPT1uJiYhbC5kb25lO3grKyxsPWgubmV4dCgpKXtuLmluZGV4Png/KHk9bixuPW51bGwpOnk9bi5zaWJsaW5nO3ZhciByPVAoZSxuLGwudmFsdWUsayk7aWYobnVsbD09PXIpe258fChuPXkpO2JyZWFrfWEmJm4mJm51bGw9PT1yLmFsdGVybmF0ZSYmYihlLG4pO2c9ZihyLGcseCk7bnVsbD09PXU/dD1yOnUuc2libGluZz1yO3U9cjtuPXl9aWYobC5kb25lKXJldHVybiBjKGUsbiksdDtpZihudWxsPT09bil7Zm9yKDshbC5kb25lO3grKyxsPWgubmV4dCgpKWw9dyhlLGwudmFsdWUsayksbnVsbCE9PWwmJihnPWYobCxnLHgpLG51bGw9PT11P3Q9bDp1LnNpYmxpbmc9bCx1PWwpO3JldHVybiB0fWZvcihuPWQoZSxuKTshbC5kb25lO3grKyxsPWgubmV4dCgpKWw9a2MobixlLHgsbC52YWx1ZSxrKSxudWxsIT09bCYmKGEmJm51bGwhPT1sLmFsdGVybmF0ZSYmbi5kZWxldGUobnVsbD09PWwua2V5P3g6bC5rZXkpLGc9ZihsLGcseCksbnVsbD09PVxudT90PWw6dS5zaWJsaW5nPWwsdT1sKTthJiZuLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiB0fXJldHVybiBmdW5jdGlvbihhLGQsZixoKXtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1oYyYmbnVsbD09PWYua2V5JiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGspc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgZmM6YTp7dmFyIG49Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bilpZigxMD09PWsudGFnP2YudHlwZT09PWhjOmsudHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi50eXBlPT09aGM/Zi5wcm9wcy5jaGlsZHJlbjpmLnByb3BzLGgpO2QucmVmPXFnKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PWhjPyhkPXhmKGYucHJvcHMuY2hpbGRyZW4sXG5hLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPXdmKGYsYS5tb2RlLGgpLGgucmVmPXFnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSBnYzphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10saCk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPXpmKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmLGgpLGQucmV0dXJuPVxuYSxhPWQpOihjKGEsZCksZD15ZihmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihwZyhmKSlyZXR1cm4gSGQoYSxkLGYsaCk7aWYoc2MoZikpcmV0dXJuIEUoYSxkLGYsaCk7ayYmcmcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYpc3dpdGNoKGEudGFnKXtjYXNlIDI6Y2FzZSAxOmg9YS50eXBlLEEoXCIxNTJcIixoLmRpc3BsYXlOYW1lfHxoLm5hbWV8fFwiQ29tcG9uZW50XCIpfXJldHVybiBjKGEsZCl9fXZhciB0Zz1zZyghMCksdWc9c2coITEpLHZnPW51bGwsd2c9bnVsbCx4Zz0hMTtmdW5jdGlvbiB5ZyhhLGIpe3ZhciBjPW5ldyB1Zig1LG51bGwsbnVsbCwwKTtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31cbmZ1bmN0aW9uIHpnKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIEFnKGEpe2lmKHhnKXt2YXIgYj13ZztpZihiKXt2YXIgYz1iO2lmKCF6ZyhhLGIpKXtiPWRmKGMpO2lmKCFifHwhemcoYSxiKSl7YS5lZmZlY3RUYWd8PTI7eGc9ITE7dmc9YTtyZXR1cm59eWcodmcsYyl9dmc9YTt3Zz1lZihiKX1lbHNlIGEuZWZmZWN0VGFnfD0yLHhnPSExLHZnPWF9fVxuZnVuY3Rpb24gQmcoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnOylhPWEucmV0dXJuO3ZnPWF9ZnVuY3Rpb24gQ2coYSl7aWYoYSE9PXZnKXJldHVybiExO2lmKCF4ZylyZXR1cm4gQmcoYSkseGc9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiEkZShiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9d2c7YjspeWcoYSxiKSxiPWRmKGIpO0JnKGEpO3dnPXZnP2RmKGEuc3RhdGVOb2RlKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIERnKCl7d2c9dmc9bnVsbDt4Zz0hMX1mdW5jdGlvbiBRKGEsYixjKXtFZyhhLGIsYyxiLmV4cGlyYXRpb25UaW1lKX1mdW5jdGlvbiBFZyhhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP3VnKGIsbnVsbCxjLGQpOnRnKGIsYS5jaGlsZCxjLGQpfVxuZnVuY3Rpb24gRmcoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiBHZyhhLGIsYyxkLGUpe0ZnKGEsYik7dmFyIGY9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWMmJiFmKXJldHVybiBkJiZ0ZihiLCExKSxSKGEsYik7Yz1iLnN0YXRlTm9kZTtlYy5jdXJyZW50PWI7dmFyIGc9Zj9udWxsOmMucmVuZGVyKCk7Yi5lZmZlY3RUYWd8PTE7ZiYmKEVnKGEsYixudWxsLGUpLGIuY2hpbGQ9bnVsbCk7RWcoYSxiLGcsZSk7Yi5tZW1vaXplZFN0YXRlPWMuc3RhdGU7Yi5tZW1vaXplZFByb3BzPWMucHJvcHM7ZCYmdGYoYiwhMCk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBIZyhhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P3FmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJnFmKGEsYi5jb250ZXh0LCExKTtkZyhhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiBJZyhhLGIsYyxkKXt2YXIgZT1hLmNoaWxkO251bGwhPT1lJiYoZS5yZXR1cm49YSk7Zm9yKDtudWxsIT09ZTspe3N3aXRjaChlLnRhZyl7Y2FzZSAxMjp2YXIgZj1lLnN0YXRlTm9kZXwwO2lmKGUudHlwZT09PWImJjAhPT0oZiZjKSl7Zm9yKGY9ZTtudWxsIT09Zjspe3ZhciBnPWYuYWx0ZXJuYXRlO2lmKDA9PT1mLmV4cGlyYXRpb25UaW1lfHxmLmV4cGlyYXRpb25UaW1lPmQpZi5leHBpcmF0aW9uVGltZT1kLG51bGwhPT1nJiYoMD09PWcuZXhwaXJhdGlvblRpbWV8fGcuZXhwaXJhdGlvblRpbWU+ZCkmJihnLmV4cGlyYXRpb25UaW1lPWQpO2Vsc2UgaWYobnVsbCE9PWcmJigwPT09Zy5leHBpcmF0aW9uVGltZXx8Zy5leHBpcmF0aW9uVGltZT5kKSlnLmV4cGlyYXRpb25UaW1lPWQ7ZWxzZSBicmVhaztmPWYucmV0dXJufWY9bnVsbH1lbHNlIGY9ZS5jaGlsZDticmVhaztjYXNlIDEzOmY9ZS50eXBlPT09YS50eXBlP251bGw6ZS5jaGlsZDticmVhaztkZWZhdWx0OmY9XG5lLmNoaWxkfWlmKG51bGwhPT1mKWYucmV0dXJuPWU7ZWxzZSBmb3IoZj1lO251bGwhPT1mOyl7aWYoZj09PWEpe2Y9bnVsbDticmVha31lPWYuc2libGluZztpZihudWxsIT09ZSl7ZS5yZXR1cm49Zi5yZXR1cm47Zj1lO2JyZWFrfWY9Zi5yZXR1cm59ZT1mfX1cbmZ1bmN0aW9uIEpnKGEsYixjKXt2YXIgZD1iLnR5cGUuX2NvbnRleHQsZT1iLnBlbmRpbmdQcm9wcyxmPWIubWVtb2l6ZWRQcm9wcyxnPSEwO2lmKE8uY3VycmVudClnPSExO2Vsc2UgaWYoZj09PWUpcmV0dXJuIGIuc3RhdGVOb2RlPTAsWGYoYiksUihhLGIpO3ZhciBoPWUudmFsdWU7Yi5tZW1vaXplZFByb3BzPWU7aWYobnVsbD09PWYpaD0xMDczNzQxODIzO2Vsc2UgaWYoZi52YWx1ZT09PWUudmFsdWUpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiZnKXJldHVybiBiLnN0YXRlTm9kZT0wLFhmKGIpLFIoYSxiKTtoPTB9ZWxzZXt2YXIgaz1mLnZhbHVlO2lmKGs9PT1oJiYoMCE9PWt8fDEvaz09PTEvaCl8fGshPT1rJiZoIT09aCl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJmcpcmV0dXJuIGIuc3RhdGVOb2RlPTAsWGYoYiksUihhLGIpO2g9MH1lbHNlIGlmKGg9XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGssXG5oKToxMDczNzQxODIzLGh8PTAsMD09PWgpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiZnKXJldHVybiBiLnN0YXRlTm9kZT0wLFhmKGIpLFIoYSxiKX1lbHNlIElnKGIsZCxoLGMpfWIuc3RhdGVOb2RlPWg7WGYoYik7UShhLGIsZS5jaGlsZHJlbik7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gUihhLGIpe251bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZD9BKFwiMTUzXCIpOnZvaWQgMDtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO3ZhciBjPXZmKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPXZmKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIEtnKGEsYixjKXtpZigwPT09Yi5leHBpcmF0aW9uVGltZXx8Yi5leHBpcmF0aW9uVGltZT5jKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzpIZyhiKTticmVhaztjYXNlIDI6c2YoYik7YnJlYWs7Y2FzZSA0OmRnKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMzpYZihiKX1yZXR1cm4gbnVsbH1zd2l0Y2goYi50YWcpe2Nhc2UgMDpudWxsIT09YT9BKFwiMTU1XCIpOnZvaWQgMDt2YXIgZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPWxmKGIpO2Y9bmYoYixmKTtkPWQoZSxmKTtiLmVmZmVjdFRhZ3w9MTtcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5yZW5kZXImJnZvaWQgMD09PWQuJCR0eXBlb2Y/KGY9Yi50eXBlLGIudGFnPTIsYi5tZW1vaXplZFN0YXRlPW51bGwhPT1kLnN0YXRlJiZ2b2lkIDAhPT1kLnN0YXRlP2Quc3RhdGU6bnVsbCxmPWYuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGYmJmhnKGIsZixlKSxlPXNmKGIpLGQudXBkYXRlcj1sZyxiLnN0YXRlTm9kZT1kLGQuX3JlYWN0SW50ZXJuYWxGaWJlcj1iLG9nKGIsYyksYT1HZyhhLGIsITAsZSxjKSk6KGIudGFnPTEsUShhLGIsZCksYi5tZW1vaXplZFByb3BzPWUsYT1iLmNoaWxkKTtyZXR1cm4gYTtjYXNlIDE6cmV0dXJuIGU9Yi50eXBlLGM9Yi5wZW5kaW5nUHJvcHMsTy5jdXJyZW50fHxiLm1lbW9pemVkUHJvcHMhPT1jPyhkPWxmKGIpLGQ9bmYoYixkKSxlPWUoYyxkKSxiLmVmZmVjdFRhZ3w9MSxRKGEsYixlKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpOmE9UihhLGIpLGE7Y2FzZSAyOmU9c2YoYik7aWYobnVsbD09PWEpaWYobnVsbD09PWIuc3RhdGVOb2RlKXt2YXIgZz1iLnBlbmRpbmdQcm9wcyxoPWIudHlwZTtkPWxmKGIpO3ZhciBrPTI9PT1iLnRhZyYmbnVsbCE9Yi50eXBlLmNvbnRleHRUeXBlcztmPWs/bmYoYixkKTpoYTtnPW5ldyBoKGcsZik7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1cbmcuc3RhdGUmJnZvaWQgMCE9PWcuc3RhdGU/Zy5zdGF0ZTpudWxsO2cudXBkYXRlcj1sZztiLnN0YXRlTm9kZT1nO2cuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO2smJihrPWIuc3RhdGVOb2RlLGsuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1kLGsuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7b2coYixjKTtkPSEwfWVsc2V7aD1iLnR5cGU7ZD1iLnN0YXRlTm9kZTtrPWIubWVtb2l6ZWRQcm9wcztmPWIucGVuZGluZ1Byb3BzO2QucHJvcHM9azt2YXIgbj1kLmNvbnRleHQ7Zz1sZihiKTtnPW5mKGIsZyk7dmFyIHI9aC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KGg9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJ8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fFxuKGshPT1mfHxuIT09ZykmJm5nKGIsZCxmLGcpO0hmPSExO3ZhciB3PWIubWVtb2l6ZWRTdGF0ZTtuPWQuc3RhdGU9dzt2YXIgUD1iLnVwZGF0ZVF1ZXVlO251bGwhPT1QJiYoUWYoYixQLGYsZCxjKSxuPWIubWVtb2l6ZWRTdGF0ZSk7ayE9PWZ8fHchPT1ufHxPLmN1cnJlbnR8fEhmPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgciYmKGhnKGIscixmKSxuPWIubWVtb2l6ZWRTdGF0ZSksKGs9SGZ8fG1nKGIsayxmLHcsbixnKSk/KGh8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxNb3VudCYmZC5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZkLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQmJlxuKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGIubWVtb2l6ZWRQcm9wcz1mLGIubWVtb2l6ZWRTdGF0ZT1uKSxkLnByb3BzPWYsZC5zdGF0ZT1uLGQuY29udGV4dD1nLGQ9ayk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGQ9ITEpfWVsc2UgaD1iLnR5cGUsZD1iLnN0YXRlTm9kZSxmPWIubWVtb2l6ZWRQcm9wcyxrPWIucGVuZGluZ1Byb3BzLGQucHJvcHM9ZixuPWQuY29udGV4dCxnPWxmKGIpLGc9bmYoYixnKSxyPWguZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLChoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHxcbihmIT09a3x8biE9PWcpJiZuZyhiLGQsayxnKSxIZj0hMSxuPWIubWVtb2l6ZWRTdGF0ZSx3PWQuc3RhdGU9bixQPWIudXBkYXRlUXVldWUsbnVsbCE9PVAmJihRZihiLFAsayxkLGMpLHc9Yi5tZW1vaXplZFN0YXRlKSxmIT09a3x8biE9PXd8fE8uY3VycmVudHx8SGY/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiByJiYoaGcoYixyLGspLHc9Yi5tZW1vaXplZFN0YXRlKSwocj1IZnx8bWcoYixmLGssbix3LGcpKT8oaHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnRXaWxsVXBkYXRlJiZkLmNvbXBvbmVudFdpbGxVcGRhdGUoayx3LGcpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZkLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGssdyxnKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkVXBkYXRlJiZcbihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmNvbXBvbmVudERpZFVwZGF0ZXx8Zj09PWEubWVtb2l6ZWRQcm9wcyYmbj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8Zj09PWEubWVtb2l6ZWRQcm9wcyYmbj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1rLGIubWVtb2l6ZWRTdGF0ZT13KSxkLnByb3BzPWssZC5zdGF0ZT13LGQuY29udGV4dD1nLGQ9cik6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmNvbXBvbmVudERpZFVwZGF0ZXx8Zj09PWEubWVtb2l6ZWRQcm9wcyYmbj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XG5mPT09YS5tZW1vaXplZFByb3BzJiZuPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksZD0hMSk7cmV0dXJuIEdnKGEsYixkLGUsYyk7Y2FzZSAzOkhnKGIpO2U9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09ZSlpZihkPWIubWVtb2l6ZWRTdGF0ZSxkPW51bGwhPT1kP2QuZWxlbWVudDpudWxsLFFmKGIsZSxiLnBlbmRpbmdQcm9wcyxudWxsLGMpLGU9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQsZT09PWQpRGcoKSxhPVIoYSxiKTtlbHNle2Q9Yi5zdGF0ZU5vZGU7aWYoZD0obnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKSYmZC5oeWRyYXRlKXdnPWVmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLHZnPWIsZD14Zz0hMDtkPyhiLmVmZmVjdFRhZ3w9MixiLmNoaWxkPXVnKGIsbnVsbCxlLGMpKTooRGcoKSxRKGEsYixlKSk7YT1iLmNoaWxkfWVsc2UgRGcoKSxhPVIoYSxiKTtyZXR1cm4gYTtjYXNlIDU6YTp7Y2coYmcuY3VycmVudCk7ZT1jZygkZi5jdXJyZW50KTtkPURlKGUsXG5iLnR5cGUpO2UhPT1kJiYoTihhZyxiLGIpLE4oJGYsZCxiKSk7bnVsbD09PWEmJkFnKGIpO2U9Yi50eXBlO2s9Yi5tZW1vaXplZFByb3BzO2Q9Yi5wZW5kaW5nUHJvcHM7Zj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbDtpZighTy5jdXJyZW50JiZrPT09ZCl7aWYoaz1iLm1vZGUmMSYmISFkLmhpZGRlbiliLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7aWYoIWt8fDEwNzM3NDE4MjMhPT1jKXthPVIoYSxiKTticmVhayBhfX1rPWQuY2hpbGRyZW47JGUoZSxkKT9rPW51bGw6ZiYmJGUoZSxmKSYmKGIuZWZmZWN0VGFnfD0xNik7RmcoYSxiKTsxMDczNzQxODIzIT09YyYmYi5tb2RlJjEmJmQuaGlkZGVuPyhiLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjMsYi5tZW1vaXplZFByb3BzPWQsYT1udWxsKTooUShhLGIsayksYi5tZW1vaXplZFByb3BzPWQsYT1iLmNoaWxkKX1yZXR1cm4gYTtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZBZyhiKSxiLm1lbW9pemVkUHJvcHM9Yi5wZW5kaW5nUHJvcHMsXG5udWxsO2Nhc2UgMTY6cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBkZyhiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGU9Yi5wZW5kaW5nUHJvcHMsTy5jdXJyZW50fHxiLm1lbW9pemVkUHJvcHMhPT1lPyhudWxsPT09YT9iLmNoaWxkPXRnKGIsbnVsbCxlLGMpOlEoYSxiLGUpLGIubWVtb2l6ZWRQcm9wcz1lLGE9Yi5jaGlsZCk6YT1SKGEsYiksYTtjYXNlIDE0OnJldHVybiBlPWIudHlwZS5yZW5kZXIsYz1iLnBlbmRpbmdQcm9wcyxkPWIucmVmLE8uY3VycmVudHx8Yi5tZW1vaXplZFByb3BzIT09Y3x8ZCE9PShudWxsIT09YT9hLnJlZjpudWxsKT8oZT1lKGMsZCksUShhLGIsZSksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPVIoYSxiKSxhO2Nhc2UgMTA6cmV0dXJuIGM9Yi5wZW5kaW5nUHJvcHMsTy5jdXJyZW50fHxiLm1lbW9pemVkUHJvcHMhPT1jPyhRKGEsYixjKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpOmE9UihhLGIpLGE7Y2FzZSAxMTpyZXR1cm4gYz1cbmIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLE8uY3VycmVudHx8bnVsbCE9PWMmJmIubWVtb2l6ZWRQcm9wcyE9PWM/KFEoYSxiLGMpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1SKGEsYiksYTtjYXNlIDE1OnJldHVybiBjPWIucGVuZGluZ1Byb3BzLGIubWVtb2l6ZWRQcm9wcz09PWM/YT1SKGEsYik6KFEoYSxiLGMuY2hpbGRyZW4pLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCksYTtjYXNlIDEzOnJldHVybiBKZyhhLGIsYyk7Y2FzZSAxMjphOmlmKGQ9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsaz1iLm1lbW9pemVkUHJvcHMsZT1kLl9jdXJyZW50VmFsdWUsZz1kLl9jaGFuZ2VkQml0cyxPLmN1cnJlbnR8fDAhPT1nfHxrIT09Zil7Yi5tZW1vaXplZFByb3BzPWY7aD1mLnVuc3RhYmxlX29ic2VydmVkQml0cztpZih2b2lkIDA9PT1ofHxudWxsPT09aCloPTEwNzM3NDE4MjM7Yi5zdGF0ZU5vZGU9aDtpZigwIT09KGcmaCkpSWcoYixkLGcsYyk7ZWxzZSBpZihrPT09Zil7YT1cblIoYSxiKTticmVhayBhfWM9Zi5jaGlsZHJlbjtjPWMoZSk7Yi5lZmZlY3RUYWd8PTE7UShhLGIsYyk7YT1iLmNoaWxkfWVsc2UgYT1SKGEsYik7cmV0dXJuIGE7ZGVmYXVsdDpBKFwiMTU2XCIpfX1mdW5jdGlvbiBMZyhhKXthLmVmZmVjdFRhZ3w9NH12YXIgUGc9dm9pZCAwLFFnPXZvaWQgMCxSZz12b2lkIDA7UGc9ZnVuY3Rpb24oKXt9O1FnPWZ1bmN0aW9uKGEsYixjKXsoYi51cGRhdGVRdWV1ZT1jKSYmTGcoYil9O1JnPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiZMZyhiKX07XG5mdW5jdGlvbiBTZyhhLGIpe3ZhciBjPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnJldHVybiBudWxsO2Nhc2UgMjpyZXR1cm4gb2YoYiksbnVsbDtjYXNlIDM6ZWcoYik7cGYoYik7dmFyIGQ9Yi5zdGF0ZU5vZGU7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKUNnKGIpLGIuZWZmZWN0VGFnJj0tMztQZyhiKTtyZXR1cm4gbnVsbDtjYXNlIDU6ZmcoYik7ZD1jZyhiZy5jdXJyZW50KTt2YXIgZT1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKXt2YXIgZj1hLm1lbW9pemVkUHJvcHMsZz1iLnN0YXRlTm9kZSxoPWNnKCRmLmN1cnJlbnQpO2c9U2UoZyxlLGYsYyxkKTtRZyhhLGIsZyxlLGYsYyxkLGgpO2EucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1lbHNle2lmKCFjKXJldHVybiBudWxsPT09Yi5zdGF0ZU5vZGU/XG5BKFwiMTY2XCIpOnZvaWQgMCxudWxsO2E9Y2coJGYuY3VycmVudCk7aWYoQ2coYikpYz1iLnN0YXRlTm9kZSxlPWIudHlwZSxmPWIubWVtb2l6ZWRQcm9wcyxjW0NdPWIsY1tNYV09ZixkPVVlKGMsZSxmLGEsZCksYi51cGRhdGVRdWV1ZT1kLG51bGwhPT1kJiZMZyhiKTtlbHNle2E9UGUoZSxjLGQsYSk7YVtDXT1iO2FbTWFdPWM7YTpmb3IoZj1iLmNoaWxkO251bGwhPT1mOyl7aWYoNT09PWYudGFnfHw2PT09Zi50YWcpYS5hcHBlbmRDaGlsZChmLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Zi50YWcmJm51bGwhPT1mLmNoaWxkKXtmLmNoaWxkLnJldHVybj1mO2Y9Zi5jaGlsZDtjb250aW51ZX1pZihmPT09YilicmVhaztmb3IoO251bGw9PT1mLnNpYmxpbmc7KXtpZihudWxsPT09Zi5yZXR1cm58fGYucmV0dXJuPT09YilicmVhayBhO2Y9Zi5yZXR1cm59Zi5zaWJsaW5nLnJldHVybj1mLnJldHVybjtmPWYuc2libGluZ31SZShhLGUsYyxkKTtaZShlLGMpJiZMZyhiKTtiLnN0YXRlTm9kZT1cbmF9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKVJnKGEsYixhLm1lbW9pemVkUHJvcHMsYyk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGMpcmV0dXJuIG51bGw9PT1iLnN0YXRlTm9kZT9BKFwiMTY2XCIpOnZvaWQgMCxudWxsO2Q9Y2coYmcuY3VycmVudCk7Y2coJGYuY3VycmVudCk7Q2coYik/KGQ9Yi5zdGF0ZU5vZGUsYz1iLm1lbW9pemVkUHJvcHMsZFtDXT1iLFZlKGQsYykmJkxnKGIpKTooZD1RZShjLGQpLGRbQ109YixiLnN0YXRlTm9kZT1kKX1yZXR1cm4gbnVsbDtjYXNlIDE0OnJldHVybiBudWxsO2Nhc2UgMTY6cmV0dXJuIG51bGw7Y2FzZSAxMDpyZXR1cm4gbnVsbDtjYXNlIDExOnJldHVybiBudWxsO2Nhc2UgMTU6cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBlZyhiKSxQZyhiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIFlmKGIpLG51bGw7Y2FzZSAxMjpyZXR1cm4gbnVsbDtjYXNlIDA6QShcIjE2N1wiKTtcbmRlZmF1bHQ6QShcIjE1NlwiKX19ZnVuY3Rpb24gVGcoYSxiKXt2YXIgYz1iLnNvdXJjZTtudWxsPT09Yi5zdGFjayYmbnVsbCE9PWMmJnZjKGMpO251bGwhPT1jJiZ0YyhjKTtiPWIudmFsdWU7bnVsbCE9PWEmJjI9PT1hLnRhZyYmdGMoYSk7dHJ5e2ImJmIuc3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZ3x8Y29uc29sZS5lcnJvcihiKX1jYXRjaChkKXtkJiZkLnN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmd8fGNvbnNvbGUuZXJyb3IoZCl9fWZ1bmN0aW9uIFVnKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe1ZnKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIFdnKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBHZiYmR2YoYSk7c3dpdGNoKGEudGFnKXtjYXNlIDI6VWcoYSk7dmFyIGI9YS5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2IucHJvcHM9YS5tZW1vaXplZFByb3BzLGIuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGIuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChjKXtWZyhhLGMpfWJyZWFrO2Nhc2UgNTpVZyhhKTticmVhaztjYXNlIDQ6WGcoYSl9fWZ1bmN0aW9uIFlnKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gWmcoYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoWWcoYikpe3ZhciBjPWI7YnJlYWsgYX1iPWIucmV0dXJufUEoXCIxNjBcIik7Yz12b2lkIDB9dmFyIGQ9Yj12b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6Yj1jLnN0YXRlTm9kZTtkPSExO2JyZWFrO2Nhc2UgMzpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDpBKFwiMTYxXCIpfWMuZWZmZWN0VGFnJjE2JiYoR2UoYixcIlwiKSxjLmVmZmVjdFRhZyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fFlnKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtcbmlmKG51bGw9PT1jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7aWYoNT09PWUudGFnfHw2PT09ZS50YWcpaWYoYylpZihkKXt2YXIgZj1iLGc9ZS5zdGF0ZU5vZGUsaD1jOzg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZyxoKTpmLmluc2VydEJlZm9yZShnLGgpfWVsc2UgYi5pbnNlcnRCZWZvcmUoZS5zdGF0ZU5vZGUsYyk7ZWxzZSBkPyhmPWIsZz1lLnN0YXRlTm9kZSw4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGcsZik6Zi5hcHBlbmRDaGlsZChnKSk6Yi5hcHBlbmRDaGlsZChlLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09ZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkLnJldHVybj1lO2U9ZS5jaGlsZDtjb250aW51ZX1pZihlPT09YSlicmVhaztmb3IoO251bGw9PT1cbmUuc2libGluZzspe2lmKG51bGw9PT1lLnJldHVybnx8ZS5yZXR1cm49PT1hKXJldHVybjtlPWUucmV0dXJufWUuc2libGluZy5yZXR1cm49ZS5yZXR1cm47ZT1lLnNpYmxpbmd9fVxuZnVuY3Rpb24gWGcoYSl7Zm9yKHZhciBiPWEsYz0hMSxkPXZvaWQgMCxlPXZvaWQgMDs7KXtpZighYyl7Yz1iLnJldHVybjthOmZvcig7Oyl7bnVsbD09PWM/QShcIjE2MFwiKTp2b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6ZD1jLnN0YXRlTm9kZTtlPSExO2JyZWFrIGE7Y2FzZSAzOmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGE7Y2FzZSA0OmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGF9Yz1jLnJldHVybn1jPSEwfWlmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXthOmZvcih2YXIgZj1iLGc9Zjs7KWlmKFdnKGcpLG51bGwhPT1nLmNoaWxkJiY0IT09Zy50YWcpZy5jaGlsZC5yZXR1cm49ZyxnPWcuY2hpbGQ7ZWxzZXtpZihnPT09ZilicmVhaztmb3IoO251bGw9PT1nLnNpYmxpbmc7KXtpZihudWxsPT09Zy5yZXR1cm58fGcucmV0dXJuPT09ZilicmVhayBhO2c9Zy5yZXR1cm59Zy5zaWJsaW5nLnJldHVybj1nLnJldHVybjtnPWcuc2libGluZ31lP1xuKGY9ZCxnPWIuc3RhdGVOb2RlLDg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChnKTpmLnJlbW92ZUNoaWxkKGcpKTpkLnJlbW92ZUNoaWxkKGIuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1iLnRhZz9kPWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86V2coYiksbnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybjtiPWIucmV0dXJuOzQ9PT1iLnRhZyYmKGM9ITEpfWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fVxuZnVuY3Rpb24gJGcoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMjpicmVhaztjYXNlIDU6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzO2E9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7dmFyIGU9Yi50eXBlLGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7bnVsbCE9PWYmJihjW01hXT1kLFRlKGMsZixlLGEsZCkpfWJyZWFrO2Nhc2UgNjpudWxsPT09Yi5zdGF0ZU5vZGU/QShcIjE2MlwiKTp2b2lkIDA7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPWIubWVtb2l6ZWRQcm9wczticmVhaztjYXNlIDM6YnJlYWs7Y2FzZSAxNTpicmVhaztjYXNlIDE2OmJyZWFrO2RlZmF1bHQ6QShcIjE2M1wiKX19ZnVuY3Rpb24gYWgoYSxiLGMpe2M9S2YoYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7YmgoZCk7VGcoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBjaChhLGIsYyl7Yz1LZihjKTtjLnRhZz0zO3ZhciBkPWEuc3RhdGVOb2RlO251bGwhPT1kJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtudWxsPT09ZGg/ZGg9bmV3IFNldChbdGhpc10pOmRoLmFkZCh0aGlzKTt2YXIgYz1iLnZhbHVlLGQ9Yi5zdGFjaztUZyhhLGIpO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYyx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWQ/ZDpcIlwifSl9KTtyZXR1cm4gY31cbmZ1bmN0aW9uIGVoKGEsYixjLGQsZSxmKXtjLmVmZmVjdFRhZ3w9NTEyO2MuZmlyc3RFZmZlY3Q9Yy5sYXN0RWZmZWN0PW51bGw7ZD1UZihkLGMpO2E9Yjtkb3tzd2l0Y2goYS50YWcpe2Nhc2UgMzphLmVmZmVjdFRhZ3w9MTAyNDtkPWFoKGEsZCxmKTtOZihhLGQsZik7cmV0dXJuO2Nhc2UgMjppZihiPWQsYz1hLnN0YXRlTm9kZSwwPT09KGEuZWZmZWN0VGFnJjY0KSYmbnVsbCE9PWMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PWRofHwhZGguaGFzKGMpKSl7YS5lZmZlY3RUYWd8PTEwMjQ7ZD1jaChhLGIsZik7TmYoYSxkLGYpO3JldHVybn19YT1hLnJldHVybn13aGlsZShudWxsIT09YSl9XG5mdW5jdGlvbiBmaChhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMjpvZihhKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiYxMDI0PyhhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGEpOm51bGw7Y2FzZSAzOnJldHVybiBlZyhhKSxwZihhKSxiPWEuZWZmZWN0VGFnLGImMTAyND8oYS5lZmZlY3RUYWc9YiYtMTAyNXw2NCxhKTpudWxsO2Nhc2UgNTpyZXR1cm4gZmcoYSksbnVsbDtjYXNlIDE2OnJldHVybiBiPWEuZWZmZWN0VGFnLGImMTAyND8oYS5lZmZlY3RUYWc9YiYtMTAyNXw2NCxhKTpudWxsO2Nhc2UgNDpyZXR1cm4gZWcoYSksbnVsbDtjYXNlIDEzOnJldHVybiBZZihhKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fXZhciBnaD1hZigpLGhoPTIsaWg9Z2gsamg9MCxraD0wLGxoPSExLFM9bnVsbCxtaD1udWxsLFQ9MCxuaD0tMSxvaD0hMSxVPW51bGwscGg9ITEscWg9ITEsZGg9bnVsbDtcbmZ1bmN0aW9uIHJoKCl7aWYobnVsbCE9PVMpZm9yKHZhciBhPVMucmV0dXJuO251bGwhPT1hOyl7dmFyIGI9YTtzd2l0Y2goYi50YWcpe2Nhc2UgMjpvZihiKTticmVhaztjYXNlIDM6ZWcoYik7cGYoYik7YnJlYWs7Y2FzZSA1OmZnKGIpO2JyZWFrO2Nhc2UgNDplZyhiKTticmVhaztjYXNlIDEzOllmKGIpfWE9YS5yZXR1cm59bWg9bnVsbDtUPTA7bmg9LTE7b2g9ITE7Uz1udWxsO3FoPSExfVxuZnVuY3Rpb24gc2goYSl7Zm9yKDs7KXt2YXIgYj1hLmFsdGVybmF0ZSxjPWEucmV0dXJuLGQ9YS5zaWJsaW5nO2lmKDA9PT0oYS5lZmZlY3RUYWcmNTEyKSl7Yj1TZyhiLGEsVCk7dmFyIGU9YTtpZigxMDczNzQxODIzPT09VHx8MTA3Mzc0MTgyMyE9PWUuZXhwaXJhdGlvblRpbWUpe3ZhciBmPTA7c3dpdGNoKGUudGFnKXtjYXNlIDM6Y2FzZSAyOnZhciBnPWUudXBkYXRlUXVldWU7bnVsbCE9PWcmJihmPWcuZXhwaXJhdGlvblRpbWUpfWZvcihnPWUuY2hpbGQ7bnVsbCE9PWc7KTAhPT1nLmV4cGlyYXRpb25UaW1lJiYoMD09PWZ8fGY+Zy5leHBpcmF0aW9uVGltZSkmJihmPWcuZXhwaXJhdGlvblRpbWUpLGc9Zy5zaWJsaW5nO2UuZXhwaXJhdGlvblRpbWU9Zn1pZihudWxsIT09YilyZXR1cm4gYjtudWxsIT09YyYmMD09PShjLmVmZmVjdFRhZyY1MTIpJiYobnVsbD09PWMuZmlyc3RFZmZlY3QmJihjLmZpcnN0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLG51bGwhPT1hLmxhc3RFZmZlY3QmJlxuKG51bGwhPT1jLmxhc3RFZmZlY3QmJihjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxjLmxhc3RFZmZlY3Q9YS5sYXN0RWZmZWN0KSwxPGEuZWZmZWN0VGFnJiYobnVsbCE9PWMubGFzdEVmZmVjdD9jLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hOmMuZmlyc3RFZmZlY3Q9YSxjLmxhc3RFZmZlY3Q9YSkpO2lmKG51bGwhPT1kKXJldHVybiBkO2lmKG51bGwhPT1jKWE9YztlbHNle3FoPSEwO2JyZWFrfX1lbHNle2E9ZmgoYSxvaCxUKTtpZihudWxsIT09YSlyZXR1cm4gYS5lZmZlY3RUYWcmPTUxMSxhO251bGwhPT1jJiYoYy5maXJzdEVmZmVjdD1jLmxhc3RFZmZlY3Q9bnVsbCxjLmVmZmVjdFRhZ3w9NTEyKTtpZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZSBicmVha319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiB0aChhKXt2YXIgYj1LZyhhLmFsdGVybmF0ZSxhLFQpO251bGw9PT1iJiYoYj1zaChhKSk7ZWMuY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gdWgoYSxiLGMpe2xoP0EoXCIyNDNcIik6dm9pZCAwO2xoPSEwO2lmKGIhPT1UfHxhIT09bWh8fG51bGw9PT1TKXJoKCksbWg9YSxUPWIsbmg9LTEsUz12ZihtaC5jdXJyZW50LG51bGwsVCksYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZD0hMTtvaD0hY3x8VDw9aGg7ZG97dHJ5e2lmKGMpZm9yKDtudWxsIT09UyYmIXZoKCk7KVM9dGgoUyk7ZWxzZSBmb3IoO251bGwhPT1TOylTPXRoKFMpfWNhdGNoKGYpe2lmKG51bGw9PT1TKWQ9ITAsYmgoZik7ZWxzZXtudWxsPT09Uz9BKFwiMjcxXCIpOnZvaWQgMDtjPVM7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpe2Q9ITA7YmgoZik7YnJlYWt9ZWgoYSxlLGMsZixvaCxULGloKTtTPXNoKGMpfX1icmVha313aGlsZSgxKTtsaD0hMTtpZihkKXJldHVybiBudWxsO2lmKG51bGw9PT1TKXtpZihxaClyZXR1cm4gYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9YixhLmN1cnJlbnQuYWx0ZXJuYXRlO29oP0EoXCIyNjJcIik6XG52b2lkIDA7MDw9bmgmJnNldFRpbWVvdXQoZnVuY3Rpb24oKXt2YXIgYj1hLmN1cnJlbnQuZXhwaXJhdGlvblRpbWU7MCE9PWImJigwPT09YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZXx8YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTxiKSYmd2goYSxiKX0sbmgpO3hoKGEuY3VycmVudC5leHBpcmF0aW9uVGltZSl9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBWZyhhLGIpe3ZhciBjO2E6e2xoJiYhcGg/QShcIjI2M1wiKTp2b2lkIDA7Zm9yKGM9YS5yZXR1cm47bnVsbCE9PWM7KXtzd2l0Y2goYy50YWcpe2Nhc2UgMjp2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21DYXRjaHx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09ZGh8fCFkaC5oYXMoZCkpKXthPVRmKGIsYSk7YT1jaChjLGEsMSk7TWYoYyxhLDEpO2tnKGMsMSk7Yz12b2lkIDA7YnJlYWsgYX1icmVhaztjYXNlIDM6YT1UZihiLGEpO2E9YWgoYyxhLDEpO01mKGMsYSwxKTtrZyhjLDEpO2M9dm9pZCAwO2JyZWFrIGF9Yz1jLnJldHVybn0zPT09YS50YWcmJihjPVRmKGIsYSksYz1haChhLGMsMSksTWYoYSxjLDEpLGtnKGEsMSkpO2M9dm9pZCAwfXJldHVybiBjfVxuZnVuY3Rpb24geWgoKXt2YXIgYT0yKzI1KigoKGlnKCktMis1MDApLzI1fDApKzEpO2E8PWpoJiYoYT1qaCsxKTtyZXR1cm4gamg9YX1mdW5jdGlvbiBqZyhhLGIpe2E9MCE9PWtoP2toOmxoP3BoPzE6VDpiLm1vZGUmMT96aD8yKzEwKigoKGEtMisxNSkvMTB8MCkrMSk6MisyNSooKChhLTIrNTAwKS8yNXwwKSsxKToxO3poJiYoMD09PUFofHxhPkFoKSYmKEFoPWEpO3JldHVybiBhfVxuZnVuY3Rpb24ga2coYSxiKXtmb3IoO251bGwhPT1hOyl7aWYoMD09PWEuZXhwaXJhdGlvblRpbWV8fGEuZXhwaXJhdGlvblRpbWU+YilhLmV4cGlyYXRpb25UaW1lPWI7bnVsbCE9PWEuYWx0ZXJuYXRlJiYoMD09PWEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lfHxhLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZT5iKSYmKGEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1hLnJldHVybilpZigzPT09YS50YWcpe3ZhciBjPWEuc3RhdGVOb2RlOyFsaCYmMCE9PVQmJmI8VCYmcmgoKTt2YXIgZD1jLmN1cnJlbnQuZXhwaXJhdGlvblRpbWU7bGgmJiFwaCYmbWg9PT1jfHx3aChjLGQpO0JoPkNoJiZBKFwiMTg1XCIpfWVsc2UgYnJlYWs7YT1hLnJldHVybn19ZnVuY3Rpb24gaWcoKXtpaD1hZigpLWdoO3JldHVybiBoaD0oaWgvMTB8MCkrMn1cbmZ1bmN0aW9uIERoKGEpe3ZhciBiPWtoO2toPTIrMjUqKCgoaWcoKS0yKzUwMCkvMjV8MCkrMSk7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtraD1ifX1mdW5jdGlvbiBFaChhLGIsYyxkLGUpe3ZhciBmPWtoO2toPTE7dHJ5e3JldHVybiBhKGIsYyxkLGUpfWZpbmFsbHl7a2g9Zn19dmFyIEZoPW51bGwsVj1udWxsLEdoPTAsSGg9LTEsVz0hMSxYPW51bGwsWT0wLEFoPTAsSWg9ITEsSmg9ITEsS2g9bnVsbCxMaD1udWxsLFo9ITEsTWg9ITEsemg9ITEsTmg9bnVsbCxDaD0xRTMsQmg9MCxPaD0xO2Z1bmN0aW9uIFBoKGEpe2lmKDAhPT1HaCl7aWYoYT5HaClyZXR1cm47Y2YoSGgpfXZhciBiPWFmKCktZ2g7R2g9YTtIaD1iZihRaCx7dGltZW91dDoxMCooYS0yKS1ifSl9XG5mdW5jdGlvbiB3aChhLGIpe2lmKG51bGw9PT1hLm5leHRTY2hlZHVsZWRSb290KWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9YixudWxsPT09Vj8oRmg9Vj1hLGEubmV4dFNjaGVkdWxlZFJvb3Q9YSk6KFY9Vi5uZXh0U2NoZWR1bGVkUm9vdD1hLFYubmV4dFNjaGVkdWxlZFJvb3Q9RmgpO2Vsc2V7dmFyIGM9YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09Y3x8YjxjKWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9Yn1XfHwoWj9NaCYmKFg9YSxZPTEsUmgoYSwxLCExKSk6MT09PWI/U2goKTpQaChiKSl9XG5mdW5jdGlvbiBUaCgpe3ZhciBhPTAsYj1udWxsO2lmKG51bGwhPT1WKWZvcih2YXIgYz1WLGQ9Rmg7bnVsbCE9PWQ7KXt2YXIgZT1kLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lO2lmKDA9PT1lKXtudWxsPT09Y3x8bnVsbD09PVY/QShcIjI0NFwiKTp2b2lkIDA7aWYoZD09PWQubmV4dFNjaGVkdWxlZFJvb3Qpe0ZoPVY9ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgaWYoZD09PUZoKUZoPWU9ZC5uZXh0U2NoZWR1bGVkUm9vdCxWLm5leHRTY2hlZHVsZWRSb290PWUsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Vsc2UgaWYoZD09PVYpe1Y9YztWLm5leHRTY2hlZHVsZWRSb290PUZoO2QubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGMubmV4dFNjaGVkdWxlZFJvb3Q9ZC5uZXh0U2NoZWR1bGVkUm9vdCxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZD1jLm5leHRTY2hlZHVsZWRSb290fWVsc2V7aWYoMD09PWF8fGU8YSlhPWUsYj1kO2lmKGQ9PT1WKWJyZWFrO1xuYz1kO2Q9ZC5uZXh0U2NoZWR1bGVkUm9vdH19Yz1YO251bGwhPT1jJiZjPT09YiYmMT09PWE/QmgrKzpCaD0wO1g9YjtZPWF9ZnVuY3Rpb24gUWgoYSl7VWgoMCwhMCxhKX1mdW5jdGlvbiBTaCgpe1VoKDEsITEsbnVsbCl9ZnVuY3Rpb24gVWgoYSxiLGMpe0xoPWM7VGgoKTtpZihiKWZvcig7bnVsbCE9PVgmJjAhPT1ZJiYoMD09PWF8fGE+PVkpJiYoIUlofHxpZygpPj1ZKTspaWcoKSxSaChYLFksIUloKSxUaCgpO2Vsc2UgZm9yKDtudWxsIT09WCYmMCE9PVkmJigwPT09YXx8YT49WSk7KVJoKFgsWSwhMSksVGgoKTtudWxsIT09TGgmJihHaD0wLEhoPS0xKTswIT09WSYmUGgoWSk7TGg9bnVsbDtJaD0hMTtWaCgpfWZ1bmN0aW9uIFdoKGEsYil7Vz9BKFwiMjUzXCIpOnZvaWQgMDtYPWE7WT1iO1JoKGEsYiwhMSk7U2goKTtWaCgpfVxuZnVuY3Rpb24gVmgoKXtCaD0wO2lmKG51bGwhPT1OaCl7dmFyIGE9Tmg7Tmg9bnVsbDtmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTt0cnl7Yy5fb25Db21wbGV0ZSgpfWNhdGNoKGQpe0pofHwoSmg9ITAsS2g9ZCl9fX1pZihKaCl0aHJvdyBhPUtoLEtoPW51bGwsSmg9ITEsYTt9ZnVuY3Rpb24gUmgoYSxiLGMpe1c/QShcIjI0NVwiKTp2b2lkIDA7Vz0hMDtjPyhjPWEuZmluaXNoZWRXb3JrLG51bGwhPT1jP1hoKGEsYyxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxjPXVoKGEsYiwhMCksbnVsbCE9PWMmJih2aCgpP2EuZmluaXNoZWRXb3JrPWM6WGgoYSxjLGIpKSkpOihjPWEuZmluaXNoZWRXb3JrLG51bGwhPT1jP1hoKGEsYyxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxjPXVoKGEsYiwhMSksbnVsbCE9PWMmJlhoKGEsYyxiKSkpO1c9ITF9XG5mdW5jdGlvbiBYaChhLGIsYyl7dmFyIGQ9YS5maXJzdEJhdGNoO2lmKG51bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZTw9YyYmKG51bGw9PT1OaD9OaD1bZF06TmgucHVzaChkKSxkLl9kZWZlcikpe2EuZmluaXNoZWRXb3JrPWI7YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT0wO3JldHVybn1hLmZpbmlzaGVkV29yaz1udWxsO3BoPWxoPSEwO2M9Yi5zdGF0ZU5vZGU7Yy5jdXJyZW50PT09Yj9BKFwiMTc3XCIpOnZvaWQgMDtkPWMucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOzA9PT1kP0EoXCIyNjFcIik6dm9pZCAwO2MucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7aWcoKTtlYy5jdXJyZW50PW51bGw7aWYoMTxiLmVmZmVjdFRhZylpZihudWxsIT09Yi5sYXN0RWZmZWN0KXtiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iO3ZhciBlPWIuZmlyc3RFZmZlY3R9ZWxzZSBlPWI7ZWxzZSBlPWIuZmlyc3RFZmZlY3Q7WGU9R2Q7dmFyIGY9ZGEoKTtpZihUZChmKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW5cbmYpdmFyIGc9e3N0YXJ0OmYuc2VsZWN0aW9uU3RhcnQsZW5kOmYuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e3ZhciBoPXdpbmRvdy5nZXRTZWxlY3Rpb24mJndpbmRvdy5nZXRTZWxlY3Rpb24oKTtpZihoJiYwIT09aC5yYW5nZUNvdW50KXtnPWguYW5jaG9yTm9kZTt2YXIgaz1oLmFuY2hvck9mZnNldCxuPWguZm9jdXNOb2RlO2g9aC5mb2N1c09mZnNldDt0cnl7Zy5ub2RlVHlwZSxuLm5vZGVUeXBlfWNhdGNoKFdhKXtnPW51bGw7YnJlYWsgYX12YXIgcj0wLHc9LTEsUD0tMSxrYz0wLEhkPTAsRT1mLHQ9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB4Ozspe0UhPT1nfHwwIT09ayYmMyE9PUUubm9kZVR5cGV8fCh3PXIrayk7RSE9PW58fDAhPT1oJiYzIT09RS5ub2RlVHlwZXx8KFA9citoKTszPT09RS5ub2RlVHlwZSYmKHIrPUUubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh4PUUuZmlyc3RDaGlsZCkpYnJlYWs7dD1FO0U9eH1mb3IoOzspe2lmKEU9PT1mKWJyZWFrIGI7dD09PWcmJlxuKytrYz09PWsmJih3PXIpO3Q9PT1uJiYrK0hkPT09aCYmKFA9cik7aWYobnVsbCE9PSh4PUUubmV4dFNpYmxpbmcpKWJyZWFrO0U9dDt0PUUucGFyZW50Tm9kZX1FPXh9Zz0tMT09PXd8fC0xPT09UD9udWxsOntzdGFydDp3LGVuZDpQfX1lbHNlIGc9bnVsbH1nPWd8fHtzdGFydDowLGVuZDowfX1lbHNlIGc9bnVsbDtZZT17Zm9jdXNlZEVsZW06ZixzZWxlY3Rpb25SYW5nZTpnfTtJZCghMSk7Zm9yKFU9ZTtudWxsIT09VTspe2Y9ITE7Zz12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PVU7KXtpZihVLmVmZmVjdFRhZyYyNTYpe3ZhciB1PVUuYWx0ZXJuYXRlO2s9VTtzd2l0Y2goay50YWcpe2Nhc2UgMjppZihrLmVmZmVjdFRhZyYyNTYmJm51bGwhPT11KXt2YXIgeT11Lm1lbW9pemVkUHJvcHMsRD11Lm1lbW9pemVkU3RhdGUsamE9ay5zdGF0ZU5vZGU7amEucHJvcHM9ay5tZW1vaXplZFByb3BzO2phLnN0YXRlPWsubWVtb2l6ZWRTdGF0ZTt2YXIgaGk9amEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoeSxcbkQpO2phLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWhpfWJyZWFrO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpicmVhaztkZWZhdWx0OkEoXCIxNjNcIil9fVU9VS5uZXh0RWZmZWN0fX1jYXRjaChXYSl7Zj0hMCxnPVdhfWYmJihudWxsPT09VT9BKFwiMTc4XCIpOnZvaWQgMCxWZyhVLGcpLG51bGwhPT1VJiYoVT1VLm5leHRFZmZlY3QpKX1mb3IoVT1lO251bGwhPT1VOyl7dT0hMTt5PXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09VTspe3ZhciBxPVUuZWZmZWN0VGFnO3EmMTYmJkdlKFUuc3RhdGVOb2RlLFwiXCIpO2lmKHEmMTI4KXt2YXIgej1VLmFsdGVybmF0ZTtpZihudWxsIT09eil7dmFyIGw9ei5yZWY7bnVsbCE9PWwmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgbD9sKG51bGwpOmwuY3VycmVudD1udWxsKX19c3dpdGNoKHEmMTQpe2Nhc2UgMjpaZyhVKTtVLmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2OlpnKFUpO1UuZWZmZWN0VGFnJj0tMzskZyhVLmFsdGVybmF0ZSxcblUpO2JyZWFrO2Nhc2UgNDokZyhVLmFsdGVybmF0ZSxVKTticmVhaztjYXNlIDg6RD1VLFhnKEQpLEQucmV0dXJuPW51bGwsRC5jaGlsZD1udWxsLEQuYWx0ZXJuYXRlJiYoRC5hbHRlcm5hdGUuY2hpbGQ9bnVsbCxELmFsdGVybmF0ZS5yZXR1cm49bnVsbCl9VT1VLm5leHRFZmZlY3R9fWNhdGNoKFdhKXt1PSEwLHk9V2F9dSYmKG51bGw9PT1VP0EoXCIxNzhcIik6dm9pZCAwLFZnKFUseSksbnVsbCE9PVUmJihVPVUubmV4dEVmZmVjdCkpfWw9WWU7ej1kYSgpO3E9bC5mb2N1c2VkRWxlbTt1PWwuc2VsZWN0aW9uUmFuZ2U7aWYoeiE9PXEmJmZhKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxxKSl7VGQocSkmJih6PXUuc3RhcnQsbD11LmVuZCx2b2lkIDA9PT1sJiYobD16KSxcInNlbGVjdGlvblN0YXJ0XCJpbiBxPyhxLnNlbGVjdGlvblN0YXJ0PXoscS5zZWxlY3Rpb25FbmQ9TWF0aC5taW4obCxxLnZhbHVlLmxlbmd0aCkpOndpbmRvdy5nZXRTZWxlY3Rpb24mJih6PXdpbmRvdy5nZXRTZWxlY3Rpb24oKSxcbnk9cVtsYigpXS5sZW5ndGgsbD1NYXRoLm1pbih1LnN0YXJ0LHkpLHU9dm9pZCAwPT09dS5lbmQ/bDpNYXRoLm1pbih1LmVuZCx5KSwhei5leHRlbmQmJmw+dSYmKHk9dSx1PWwsbD15KSx5PVNkKHEsbCksRD1TZChxLHUpLHkmJkQmJigxIT09ei5yYW5nZUNvdW50fHx6LmFuY2hvck5vZGUhPT15Lm5vZGV8fHouYW5jaG9yT2Zmc2V0IT09eS5vZmZzZXR8fHouZm9jdXNOb2RlIT09RC5ub2RlfHx6LmZvY3VzT2Zmc2V0IT09RC5vZmZzZXQpJiYoamE9ZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKSxqYS5zZXRTdGFydCh5Lm5vZGUseS5vZmZzZXQpLHoucmVtb3ZlQWxsUmFuZ2VzKCksbD51Pyh6LmFkZFJhbmdlKGphKSx6LmV4dGVuZChELm5vZGUsRC5vZmZzZXQpKTooamEuc2V0RW5kKEQubm9kZSxELm9mZnNldCksei5hZGRSYW5nZShqYSkpKSkpO3o9W107Zm9yKGw9cTtsPWwucGFyZW50Tm9kZTspMT09PWwubm9kZVR5cGUmJnoucHVzaCh7ZWxlbWVudDpsLGxlZnQ6bC5zY3JvbGxMZWZ0LFxudG9wOmwuc2Nyb2xsVG9wfSk7cS5mb2N1cygpO2ZvcihxPTA7cTx6Lmxlbmd0aDtxKyspbD16W3FdLGwuZWxlbWVudC5zY3JvbGxMZWZ0PWwubGVmdCxsLmVsZW1lbnQuc2Nyb2xsVG9wPWwudG9wfVllPW51bGw7SWQoWGUpO1hlPW51bGw7Yy5jdXJyZW50PWI7Zm9yKFU9ZTtudWxsIT09VTspe2U9ITE7cT12b2lkIDA7dHJ5e2Zvcih6PWQ7bnVsbCE9PVU7KXt2YXIgZ2c9VS5lZmZlY3RUYWc7aWYoZ2cmMzYpe3ZhciBsYz1VLmFsdGVybmF0ZTtsPVU7dT16O3N3aXRjaChsLnRhZyl7Y2FzZSAyOnZhciBiYT1sLnN0YXRlTm9kZTtpZihsLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1sYyliYS5wcm9wcz1sLm1lbW9pemVkUHJvcHMsYmEuc3RhdGU9bC5tZW1vaXplZFN0YXRlLGJhLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgcmk9bGMubWVtb2l6ZWRQcm9wcyxzaT1sYy5tZW1vaXplZFN0YXRlO2JhLnByb3BzPWwubWVtb2l6ZWRQcm9wcztiYS5zdGF0ZT1sLm1lbW9pemVkU3RhdGU7XG5iYS5jb21wb25lbnREaWRVcGRhdGUocmksc2ksYmEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBNZz1sLnVwZGF0ZVF1ZXVlO251bGwhPT1NZyYmKGJhLnByb3BzPWwubWVtb2l6ZWRQcm9wcyxiYS5zdGF0ZT1sLm1lbW9pemVkU3RhdGUsU2YobCxNZyxiYSx1KSk7YnJlYWs7Y2FzZSAzOnZhciBOZz1sLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1OZyl7eT1udWxsO2lmKG51bGwhPT1sLmNoaWxkKXN3aXRjaChsLmNoaWxkLnRhZyl7Y2FzZSA1Onk9bC5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAyOnk9bC5jaGlsZC5zdGF0ZU5vZGV9U2YobCxOZyx5LHUpfWJyZWFrO2Nhc2UgNTp2YXIgdGk9bC5zdGF0ZU5vZGU7bnVsbD09PWxjJiZsLmVmZmVjdFRhZyY0JiZaZShsLnR5cGUsbC5tZW1vaXplZFByb3BzKSYmdGkuZm9jdXMoKTticmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA0OmJyZWFrO2Nhc2UgMTU6YnJlYWs7Y2FzZSAxNjpicmVhaztkZWZhdWx0OkEoXCIxNjNcIil9fWlmKGdnJlxuMTI4KXtsPXZvaWQgMDt2YXIgdWM9VS5yZWY7aWYobnVsbCE9PXVjKXt2YXIgT2c9VS5zdGF0ZU5vZGU7c3dpdGNoKFUudGFnKXtjYXNlIDU6bD1PZzticmVhaztkZWZhdWx0Omw9T2d9XCJmdW5jdGlvblwiPT09dHlwZW9mIHVjP3VjKGwpOnVjLmN1cnJlbnQ9bH19dmFyIHVpPVUubmV4dEVmZmVjdDtVLm5leHRFZmZlY3Q9bnVsbDtVPXVpfX1jYXRjaChXYSl7ZT0hMCxxPVdhfWUmJihudWxsPT09VT9BKFwiMTc4XCIpOnZvaWQgMCxWZyhVLHEpLG51bGwhPT1VJiYoVT1VLm5leHRFZmZlY3QpKX1saD1waD0hMTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgRmYmJkZmKGIuc3RhdGVOb2RlKTtiPWMuY3VycmVudC5leHBpcmF0aW9uVGltZTswPT09YiYmKGRoPW51bGwpO2EucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9Yn1mdW5jdGlvbiB2aCgpe3JldHVybiBudWxsPT09TGh8fExoLnRpbWVSZW1haW5pbmcoKT5PaD8hMTpJaD0hMH1cbmZ1bmN0aW9uIGJoKGEpe251bGw9PT1YP0EoXCIyNDZcIik6dm9pZCAwO1gucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9MDtKaHx8KEpoPSEwLEtoPWEpfWZ1bmN0aW9uIHhoKGEpe251bGw9PT1YP0EoXCIyNDZcIik6dm9pZCAwO1gucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9YX1mdW5jdGlvbiBZaChhLGIpe3ZhciBjPVo7Wj0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXsoWj1jKXx8V3x8U2goKX19ZnVuY3Rpb24gWmgoYSxiKXtpZihaJiYhTWgpe01oPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e01oPSExfX1yZXR1cm4gYShiKX1mdW5jdGlvbiAkaChhLGIpe1c/QShcIjE4N1wiKTp2b2lkIDA7dmFyIGM9WjtaPSEwO3RyeXtyZXR1cm4gRWgoYSxiKX1maW5hbGx5e1o9YyxTaCgpfX1mdW5jdGlvbiBhaShhKXt2YXIgYj1aO1o9ITA7dHJ5e0VoKGEpfWZpbmFsbHl7KFo9Yil8fFd8fFVoKDEsITEsbnVsbCl9fVxuZnVuY3Rpb24gYmkoYSxiLGMsZCxlKXt2YXIgZj1iLmN1cnJlbnQ7aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGc7Yjp7Mj09PWlkKGMpJiYyPT09Yy50YWc/dm9pZCAwOkEoXCIxNzBcIik7Zm9yKGc9YzszIT09Zy50YWc7KXtpZihtZihnKSl7Zz1nLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifShnPWcucmV0dXJuKT92b2lkIDA6QShcIjE3MVwiKX1nPWcuc3RhdGVOb2RlLmNvbnRleHR9Yz1tZihjKT9yZihjLGcpOmd9ZWxzZSBjPWhhO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9ZTtlPUtmKGQpO2UucGF5bG9hZD17ZWxlbWVudDphfTtiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiYoZS5jYWxsYmFjaz1iKTtNZihmLGUsZCk7a2coZixkKTtyZXR1cm4gZH1cbmZ1bmN0aW9uIGNpKGEpe3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2b2lkIDA9PT1iJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyP0EoXCIxODhcIik6QShcIjI2OFwiLE9iamVjdC5rZXlzKGEpKSk7YT1sZChiKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX1mdW5jdGlvbiBkaShhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1pZygpO2U9amcoZixlKTtyZXR1cm4gYmkoYSxiLGMsZSxkKX1mdW5jdGlvbiBlaShhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fVxuZnVuY3Rpb24gZmkoYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gRWYocCh7fSxhLHtmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPWxkKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYj9iKGEpOm51bGx9fSkpfVxudmFyIGdpPXt1cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lOmJpLGNyZWF0ZUNvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIEFmKGEsYixjKX0sdXBkYXRlQ29udGFpbmVyOmRpLGZsdXNoUm9vdDpXaCxyZXF1ZXN0V29yazp3aCxjb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uOnloLGJhdGNoZWRVcGRhdGVzOlloLHVuYmF0Y2hlZFVwZGF0ZXM6WmgsZGVmZXJyZWRVcGRhdGVzOkRoLHN5bmNVcGRhdGVzOkVoLGludGVyYWN0aXZlVXBkYXRlczpmdW5jdGlvbihhLGIsYyl7aWYoemgpcmV0dXJuIGEoYixjKTtafHxXfHwwPT09QWh8fChVaChBaCwhMSxudWxsKSxBaD0wKTt2YXIgZD16aCxlPVo7Wj16aD0hMDt0cnl7cmV0dXJuIGEoYixjKX1maW5hbGx5e3poPWQsKFo9ZSl8fFd8fFNoKCl9fSxmbHVzaEludGVyYWN0aXZlVXBkYXRlczpmdW5jdGlvbigpe1d8fDA9PT1BaHx8KFVoKEFoLCExLG51bGwpLEFoPTApfSxmbHVzaENvbnRyb2xsZWQ6YWksZmx1c2hTeW5jOiRoLFxuZ2V0UHVibGljUm9vdEluc3RhbmNlOmVpLGZpbmRIb3N0SW5zdGFuY2U6Y2ksZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHM6ZnVuY3Rpb24oYSl7YT1tZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0saW5qZWN0SW50b0RldlRvb2xzOmZpfTtmdW5jdGlvbiBpaShhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOmdjLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fUtiLmluamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQoV2UpO1xuZnVuY3Rpb24gamkoYSl7dGhpcy5fZXhwaXJhdGlvblRpbWU9eWgoKTt0aGlzLl9yb290PWE7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX25leHQ9bnVsbDt0aGlzLl9oYXNDaGlsZHJlbj10aGlzLl9kaWRDb21wbGV0ZT0hMTt0aGlzLl9jaGlsZHJlbj1udWxsO3RoaXMuX2RlZmVyPSEwfWppLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dGhpcy5fZGVmZXI/dm9pZCAwOkEoXCIyNTBcIik7dGhpcy5faGFzQ2hpbGRyZW49ITA7dGhpcy5fY2hpbGRyZW49YTt2YXIgYj10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYz10aGlzLl9leHBpcmF0aW9uVGltZSxkPW5ldyBraTtiaShhLGIsbnVsbCxjLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07amkucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tcGxldGUpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuamkucHJvdG90eXBlLmNvbW1pdD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxiPWEuZmlyc3RCYXRjaDt0aGlzLl9kZWZlciYmbnVsbCE9PWI/dm9pZCAwOkEoXCIyNTFcIik7aWYodGhpcy5faGFzQ2hpbGRyZW4pe3ZhciBjPXRoaXMuX2V4cGlyYXRpb25UaW1lO2lmKGIhPT10aGlzKXt0aGlzLl9oYXNDaGlsZHJlbiYmKGM9dGhpcy5fZXhwaXJhdGlvblRpbWU9Yi5fZXhwaXJhdGlvblRpbWUsdGhpcy5yZW5kZXIodGhpcy5fY2hpbGRyZW4pKTtmb3IodmFyIGQ9bnVsbCxlPWI7ZSE9PXRoaXM7KWQ9ZSxlPWUuX25leHQ7bnVsbD09PWQ/QShcIjI1MVwiKTp2b2lkIDA7ZC5fbmV4dD1lLl9uZXh0O3RoaXMuX25leHQ9YjthLmZpcnN0QmF0Y2g9dGhpc310aGlzLl9kZWZlcj0hMTtXaChhLGMpO2I9dGhpcy5fbmV4dDt0aGlzLl9uZXh0PW51bGw7Yj1hLmZpcnN0QmF0Y2g9YjtudWxsIT09YiYmYi5faGFzQ2hpbGRyZW4mJmIucmVuZGVyKGIuX2NoaWxkcmVuKX1lbHNlIHRoaXMuX25leHQ9XG5udWxsLHRoaXMuX2RlZmVyPSExfTtqaS5wcm90b3R5cGUuX29uQ29tcGxldGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tcGxldGUpe3RoaXMuX2RpZENvbXBsZXRlPSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKykoMCxhW2JdKSgpfX07ZnVuY3Rpb24ga2koKXt0aGlzLl9jYWxsYmFja3M9bnVsbDt0aGlzLl9kaWRDb21taXQ9ITE7dGhpcy5fb25Db21taXQ9dGhpcy5fb25Db21taXQuYmluZCh0aGlzKX1raS5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21taXQpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xua2kucHJvdG90eXBlLl9vbkNvbW1pdD1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21taXQpe3RoaXMuX2RpZENvbW1pdD0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/QShcIjE5MVwiLGMpOnZvaWQgMDtjKCl9fX07ZnVuY3Rpb24gbGkoYSxiLGMpe3RoaXMuX2ludGVybmFsUm9vdD1BZihhLGIsYyl9bGkucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuX2ludGVybmFsUm9vdCxkPW5ldyBraTtiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiZkLnRoZW4oYik7ZGkoYSxjLG51bGwsZC5fb25Db21taXQpO3JldHVybiBkfTtcbmxpLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdCxjPW5ldyBraTthPXZvaWQgMD09PWE/bnVsbDphO251bGwhPT1hJiZjLnRoZW4oYSk7ZGkobnVsbCxiLG51bGwsYy5fb25Db21taXQpO3JldHVybiBjfTtsaS5wcm90b3R5cGUubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLl9pbnRlcm5hbFJvb3QsZT1uZXcga2k7Yz12b2lkIDA9PT1jP251bGw6YztudWxsIT09YyYmZS50aGVuKGMpO2RpKGIsZCxhLGUuX29uQ29tbWl0KTtyZXR1cm4gZX07XG5saS5wcm90b3R5cGUuY3JlYXRlQmF0Y2g9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgamkodGhpcyksYj1hLl9leHBpcmF0aW9uVGltZSxjPXRoaXMuX2ludGVybmFsUm9vdCxkPWMuZmlyc3RCYXRjaDtpZihudWxsPT09ZCljLmZpcnN0QmF0Y2g9YSxhLl9uZXh0PW51bGw7ZWxzZXtmb3IoYz1udWxsO251bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZTw9YjspYz1kLGQ9ZC5fbmV4dDthLl9uZXh0PWQ7bnVsbCE9PWMmJihjLl9uZXh0PWEpfXJldHVybiBhfTtmdW5jdGlvbiBtaShhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9U2I9Z2kuYmF0Y2hlZFVwZGF0ZXM7VGI9Z2kuaW50ZXJhY3RpdmVVcGRhdGVzO1ViPWdpLmZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzO1xuZnVuY3Rpb24gbmkoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBsaShhLCExLGIpfVxuZnVuY3Rpb24gb2koYSxiLGMsZCxlKXttaShjKT92b2lkIDA6QShcIjIwMFwiKTt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBnPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWVpKGYuX2ludGVybmFsUm9vdCk7Zy5jYWxsKGEpfX1udWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9bmkoYyxkKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9ZWkoZi5faW50ZXJuYWxSb290KTtoLmNhbGwoYSl9fVpoKGZ1bmN0aW9uKCl7bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX0pfXJldHVybiBlaShmLl9pbnRlcm5hbFJvb3QpfVxuZnVuY3Rpb24gcGkoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDttaShiKT92b2lkIDA6QShcIjIwMFwiKTtyZXR1cm4gaWkoYSxiLG51bGwsYyl9XG52YXIgcWk9e2NyZWF0ZVBvcnRhbDpwaSxmaW5kRE9NTm9kZTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT9udWxsOjE9PT1hLm5vZGVUeXBlP2E6Y2koYSl9LGh5ZHJhdGU6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBvaShudWxsLGEsYiwhMCxjKX0scmVuZGVyOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gb2kobnVsbCxhLGIsITEsYyl9LHVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjLGQpe251bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxGaWJlcj9BKFwiMzhcIik6dm9pZCAwO3JldHVybiBvaShhLGIsYywhMSxkKX0sdW5tb3VudENvbXBvbmVudEF0Tm9kZTpmdW5jdGlvbihhKXttaShhKT92b2lkIDA6QShcIjQwXCIpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFpoKGZ1bmN0aW9uKCl7b2kobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbH0pfSksITApOiExfSx1bnN0YWJsZV9jcmVhdGVQb3J0YWw6ZnVuY3Rpb24oKXtyZXR1cm4gcGkuYXBwbHkodm9pZCAwLFxuYXJndW1lbnRzKX0sdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6WWgsdW5zdGFibGVfZGVmZXJyZWRVcGRhdGVzOkRoLGZsdXNoU3luYzokaCx1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQ6YWksX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50UGx1Z2luSHViOkthLEV2ZW50UGx1Z2luUmVnaXN0cnk6dmEsRXZlbnRQcm9wYWdhdG9yczokYSxSZWFjdENvbnRyb2xsZWRDb21wb25lbnQ6UmIsUmVhY3RET01Db21wb25lbnRUcmVlOlFhLFJlYWN0RE9NRXZlbnRMaXN0ZW5lcjpNZH0sdW5zdGFibGVfY3JlYXRlUm9vdDpmdW5jdGlvbihhLGIpe3JldHVybiBuZXcgbGkoYSwhMCxudWxsIT1iJiYhMD09PWIuaHlkcmF0ZSl9fTtmaSh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6TmEsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi40LjBcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTtcbnZhciB2aT17ZGVmYXVsdDpxaX0sd2k9dmkmJnFpfHx2aTttb2R1bGUuZXhwb3J0cz13aS5kZWZhdWx0P3dpLmRlZmF1bHQ6d2k7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjQuMFxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGs9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLHA9cmVxdWlyZShcImZianMvbGliL2VtcHR5T2JqZWN0XCIpLHE9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIikscj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLHQ9cj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyx1PXI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNix2PXI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHc9cj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgseD1yP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCx5PXI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHo9cj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxBPXI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsQj1cbnI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyO3ImJlN5bWJvbC5mb3IoXCJyZWFjdC50aW1lb3V0XCIpO3ZhciBDPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBEKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsZT1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0wO2M8YjtjKyspZSs9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbYysxXSk7bighMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGUpfVxudmFyIEU9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319O2Z1bmN0aW9uIEYoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9cDt0aGlzLnVwZGF0ZXI9ZXx8RX1GLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0YucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YT9EKFwiODVcIik6dm9pZCAwO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Ri5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRygpe31cbkcucHJvdG90eXBlPUYucHJvdG90eXBlO2Z1bmN0aW9uIEgoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9cDt0aGlzLnVwZGF0ZXI9ZXx8RX12YXIgST1ILnByb3RvdHlwZT1uZXcgRztJLmNvbnN0cnVjdG9yPUg7ayhJLEYucHJvdG90eXBlKTtJLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBKPXtjdXJyZW50Om51bGx9LEs9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixlKXt2YXIgYz12b2lkIDAsZD17fSxnPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGMgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilLLmNhbGwoYixjKSYmIUwuaGFzT3duUHJvcGVydHkoYykmJihkW2NdPWJbY10pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2Zvcih2YXIgbD1BcnJheShmKSxtPTA7bTxmO20rKylsW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49bH1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoYyBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtjXSYmKGRbY109ZltjXSk7cmV0dXJueyQkdHlwZW9mOnQsdHlwZTphLGtleTpnLHJlZjpoLHByb3BzOmQsX293bmVyOkouY3VycmVudH19XG5mdW5jdGlvbiBOKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT10fWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE89L1xcLysvZyxQPVtdO2Z1bmN0aW9uIFEoYSxiLGUsYyl7aWYoUC5sZW5ndGgpe3ZhciBkPVAucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1lO2QuY29udGV4dD1jO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzplLGNvbnRleHQ6Yyxjb3VudDowfX1mdW5jdGlvbiBSKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+UC5sZW5ndGgmJlAucHVzaChhKX1cbmZ1bmN0aW9uIFMoYSxiLGUsYyl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHQ6Y2FzZSB1Omc9ITB9fWlmKGcpcmV0dXJuIGUoYyxhLFwiXCI9PT1iP1wiLlwiK1QoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGg9MDtoPGEubGVuZ3RoO2grKyl7ZD1hW2hdO3ZhciBmPWIrVChkLGgpO2crPVMoZCxmLGUsYyl9ZWxzZSBpZihudWxsPT09YXx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhP2Y9bnVsbDooZj1DJiZhW0NdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLFxuaD0wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitUKGQsaCsrKSxnKz1TKGQsZixlLGMpO2Vsc2VcIm9iamVjdFwiPT09ZCYmKGU9XCJcIithLEQoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1lP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmUsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFQoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIFUoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gVihhLGIsZSl7dmFyIGM9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9XKGEsYyxlLHEudGhhdFJldHVybnNBcmd1bWVudCk6bnVsbCE9YSYmKE4oYSkmJihiPWQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpK2UsYT17JCR0eXBlb2Y6dCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9KSxjLnB1c2goYSkpfWZ1bmN0aW9uIFcoYSxiLGUsYyxkKXt2YXIgZz1cIlwiO251bGwhPWUmJihnPShcIlwiK2UpLnJlcGxhY2UoTyxcIiQmL1wiKStcIi9cIik7Yj1RKGIsZyxjLGQpO251bGw9PWF8fFMoYSxcIlwiLFYsYik7UihiKX1cbnZhciBYPXtDaGlsZHJlbjp7bWFwOmZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBjPVtdO1coYSxjLG51bGwsYixlKTtyZXR1cm4gY30sZm9yRWFjaDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVEobnVsbCxudWxsLGIsZSk7bnVsbD09YXx8UyhhLFwiXCIsVSxiKTtSKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT8wOlMoYSxcIlwiLHEudGhhdFJldHVybnNOdWxsLG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1coYSxiLG51bGwscS50aGF0UmV0dXJuc0FyZ3VtZW50KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtOKGEpP3ZvaWQgMDpEKFwiMTQzXCIpO3JldHVybiBhfX0sY3JlYXRlUmVmOmZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19LENvbXBvbmVudDpGLFB1cmVDb21wb25lbnQ6SCxjcmVhdGVDb250ZXh0OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6eixcbl9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLF9kZWZhdWx0VmFsdWU6YSxfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfY2hhbmdlZEJpdHM6MCxfY2hhbmdlZEJpdHMyOjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp5LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9LGZvcndhcmRSZWY6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOkIscmVuZGVyOmF9fSxGcmFnbWVudDp2LFN0cmljdE1vZGU6dyx1bnN0YWJsZV9Bc3luY01vZGU6QSx1bnN0YWJsZV9Qcm9maWxlcjp4LGNyZWF0ZUVsZW1lbnQ6TSxjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGUpe251bGw9PT1hfHx2b2lkIDA9PT1hP0QoXCIyNjdcIixhKTp2b2lkIDA7dmFyIGM9dm9pZCAwLGQ9ayh7fSxhLnByb3BzKSxnPWEua2V5LGg9YS5yZWYsZj1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYsZj1KLmN1cnJlbnQpO3ZvaWQgMCE9PVxuYi5rZXkmJihnPVwiXCIrYi5rZXkpO3ZhciBsPXZvaWQgMDthLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMmJihsPWEudHlwZS5kZWZhdWx0UHJvcHMpO2ZvcihjIGluIGIpSy5jYWxsKGIsYykmJiFMLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT12b2lkIDA9PT1iW2NdJiZ2b2lkIDAhPT1sP2xbY106YltjXSl9Yz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWMpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxjKXtsPUFycmF5KGMpO2Zvcih2YXIgbT0wO208YzttKyspbFttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWx9cmV0dXJueyQkdHlwZW9mOnQsdHlwZTphLnR5cGUsa2V5OmcscmVmOmgscHJvcHM6ZCxfb3duZXI6Zn19LGNyZWF0ZUZhY3Rvcnk6ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9LGlzVmFsaWRFbGVtZW50Ok4sdmVyc2lvbjpcIjE2LjQuMFwiLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnRPd25lcjpKLFxuYXNzaWduOmt9fSxZPXtkZWZhdWx0Olh9LFo9WSYmWHx8WTttb2R1bGUuZXhwb3J0cz1aLmRlZmF1bHQ/Wi5kZWZhdWx0Olo7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJ1xuaW1wb3J0IEFwcCBmcm9tICdDb21wb25lbnRzL0FwcCdcbmltcG9ydCByb290UmVkdWNlciBmcm9tICdSZWR1Y2Vycy9pbmRleCdcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQgdGh1bmsgZnJvbSAncmVkdXgtdGh1bmsnXG5pbXBvcnQge1xuICBjcmVhdGVTdG9yZSxcbiAgYXBwbHlNaWRkbGV3YXJlXG59IGZyb20gJ3JlZHV4J1xuXG5jb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKFxuICByb290UmVkdWNlcixcbiAgYXBwbHlNaWRkbGV3YXJlKHRodW5rKVxuKVxuXG5SZWFjdERPTS5yZW5kZXIoXG4gIDxQcm92aWRlciBzdG9yZT17c3RvcmV9ID5cbiAgICA8QXBwIC8+XG4gIDwvUHJvdmlkZXI+LFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpXG4pXG4iLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5leHBvcnQgZGVmYXVsdCBmcmVlR2xvYmFsO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==